<?xml version="1.0" encoding="UTF-8"?>
<!--
 * spring-config.xml
 *
 * [JP] AI-J3(Spring MVC) の 設定ファイルです。
 * [EN] This is the configuration file of AI-J3(Spring MVC).
 *
 * $ spring-config.xml 2609 2016-09-08 04:14:01Z 10088DS00879 $
 *
 * Copyright (c) 2015 DENSO IT SOLUTIONS. All rights reserved.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:p="http://www.springframework.org/schema/p"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:mvc="http://www.springframework.org/schema/mvc"
  xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">

  <!-- Configures the scan paths of the @Controller classes -->
  <context:component-scan base-package="com.globaldenso.dicas.presentation">
    <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
  </context:component-scan>


  <!-- Configures the custom formats for custom PropertyEditors -->
  <bean id="dateFormat" class="java.text.SimpleDateFormat">
    <constructor-arg value="yyyy-MM-dd"/>
  </bean>

  <bean id="timestampFormat" class="java.text.SimpleDateFormat">
    <constructor-arg value="yyyy-MM-dd HH:mm:ss.SSS"/>
  </bean>

  <!-- Configures the ExceptionResolvers  -->
  <!-- The DispatchServlet searches the beans implementing HandlerExceptionResolver, and registers these.
       To decide execution order, PriorityOrdered should be implemented in classes implementing HandlerExceptionResolver -->
  <bean id="bindExceptionResolver" class="com.globaldenso.ai.miyabi.errorback.ValidationBindExceptionResolver"/>

  <bean id="tokenExceptionResolver" class="com.globaldenso.ai.miyabi.token.TransactionTokenExceptionResolver">
    <property name="viewName" value="tokenError"/>
  </bean>

  <bean id="fixedTokenExceptionResolver" class="com.globaldenso.ai.miyabi.token.FixedTokenExceptionResolver">
    <property name="viewName" value="badRequest"/>
  </bean>

  <bean id="systemExceptionResolver" class="com.globaldenso.ai.miyabi.exception.SystemExceptionResolver">
    <property name="viewName" value="error"/>
  </bean>

  <!-- Configures the custom PropertyEditors -->
  <bean id="byteEditor" class="com.globaldenso.ai.miyabi.bind.propertyeditor.CustomNumberEditor">
    <constructor-arg value="#{T(java.lang.Byte)}"/>
    <property name="defaultMessage" value="com.globaldenso.ai.miyabi.bind.propertyeditor.CustomNumberEditor.Byte.message"/>
  </bean>

  <bean id="shortEditor" class="com.globaldenso.ai.miyabi.bind.propertyeditor.CustomNumberEditor">
    <constructor-arg value="#{T(java.lang.Short)}"/>
    <property name="defaultMessage" value="com.globaldenso.ai.miyabi.bind.propertyeditor.CustomNumberEditor.Short.message"/>
  </bean>

  <bean id="integerEditor" class="com.globaldenso.ai.miyabi.bind.propertyeditor.CustomNumberEditor">
    <constructor-arg value="#{T(java.lang.Integer)}"/>
    <property name="defaultMessage" value="com.globaldenso.ai.miyabi.bind.propertyeditor.CustomNumberEditor.Integer.message"/>
  </bean>

  <bean id="longEditor" class="com.globaldenso.ai.miyabi.bind.propertyeditor.CustomNumberEditor">
    <constructor-arg value="#{T(java.lang.Long)}"/>
    <property name="defaultMessage" value="com.globaldenso.ai.miyabi.bind.propertyeditor.CustomNumberEditor.Long.message"/>
  </bean>

  <bean id="floatEditor" class="com.globaldenso.ai.miyabi.bind.propertyeditor.CustomNumberEditor">
    <constructor-arg value="#{T(java.lang.Float)}"/>
    <property name="defaultMessage" value="com.globaldenso.ai.miyabi.bind.propertyeditor.CustomNumberEditor.Float.message"/>
  </bean>

  <bean id="doubleEditor" class="com.globaldenso.ai.miyabi.bind.propertyeditor.CustomNumberEditor">
    <constructor-arg value="#{T(java.lang.Double)}"/>
    <property name="defaultMessage" value="com.globaldenso.ai.miyabi.bind.propertyeditor.CustomNumberEditor.Double.message"/>
  </bean>

  <bean id="bigIntegerEditor" class="com.globaldenso.ai.miyabi.bind.propertyeditor.CustomNumberEditor">
    <constructor-arg value="#{T(java.math.BigInteger)}"/>
    <property name="defaultMessage" value="com.globaldenso.ai.miyabi.bind.propertyeditor.CustomNumberEditor.BigInteger.message"/>
  </bean>

  <bean id="bigDecimalEditor" class="com.globaldenso.ai.miyabi.bind.propertyeditor.CustomNumberEditor">
    <constructor-arg value="#{T(java.math.BigDecimal)}"/>
    <property name="defaultMessage" value="com.globaldenso.ai.miyabi.bind.propertyeditor.CustomNumberEditor.BigDecimal.message"/>
  </bean>

  <bean id="booleanEditor" class="com.globaldenso.ai.miyabi.bind.propertyeditor.CustomBooleanEditor">
  </bean>

  <bean id="dateEditor" class="com.globaldenso.ai.miyabi.bind.propertyeditor.CustomDateEditor">
    <constructor-arg ref="dateFormat"/>
  </bean>

  <bean id="timestampEditor" class="com.globaldenso.ai.miyabi.bind.propertyeditor.CustomTimestampEditor">
    <constructor-arg ref="timestampFormat"/>
  </bean>

  <bean id="localeEditor" class="com.globaldenso.ai.miyabi.bind.propertyeditor.LocaleEditor"/>

  <!--bean id="timestampEditor" class="com.globaldenso.ai.miyabi.bind.propertyeditor.CustomTimestampWithNanosecondEditor">
  </bean-->

  <!-- Registers the custom PropertyEditors used by default to PropertyEditorRegistrar -->
  <bean id="defaultPropertyEditorRegistrar" class="com.globaldenso.ai.miyabi.bind.CustomPropertyEditorRegistrar">
    <property name="customEditors">
      <map key-type="java.lang.Class" value-type="java.beans.PropertyEditorSupport">
        <entry key="#{T(java.lang.Byte)}" value-ref="byteEditor"/>
        <entry key="#{T(java.lang.Short)}" value-ref="shortEditor"/>
        <entry key="#{T(java.lang.Integer)}" value-ref="integerEditor"/>
        <entry key="#{T(java.lang.Long)}" value-ref="longEditor"/>
        <entry key="#{T(java.lang.Float)}" value-ref="floatEditor"/>
        <entry key="#{T(java.lang.Double)}" value-ref="doubleEditor"/>
        <entry key="#{T(java.math.BigInteger)}" value-ref="bigIntegerEditor"/>
        <entry key="#{T(java.math.BigDecimal)}" value-ref="bigDecimalEditor"/>
        <entry key="#{T(java.lang.Boolean)}" value-ref="booleanEditor"/>
        <entry key="#{T(java.util.Date)}" value-ref="dateEditor"/>
        <entry key="#{T(java.sql.Timestamp)}" value-ref="timestampEditor"/>
        <entry key="#{T(java.util.Locale)}" value-ref="localeEditor"/>
      </map>
    </property>
  </bean>

  <!-- Configures the RequestMappingHandlerAdapter -->
  <bean id="requestMappingHandlerAdapter" class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
    <!-- If controller execution should be synchronized on the session, -->
    <!-- the synchronizeOnSession is set true to serialize parallel invocations from the same client. -->
    <property name="synchronizeOnSession" value="true"/>

    <!-- A custom SessionAttributeStore class is able to be configured to the sessionAttributeStore property -->
    <property name="webBindingInitializer" ref="webBindingInitializer"/>
    <property name="messageConverters">
      <list>
        <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>
        <bean class="org.springframework.http.converter.StringHttpMessageConverter">
          <property name="writeAcceptCharset" value="false"/>
        </bean>
        <bean class="org.springframework.http.converter.ResourceHttpMessageConverter"/>
        <bean class="org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter"/>
        <bean class="org.springframework.http.converter.xml.SourceHttpMessageConverter" />
        <!--<bean class="org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter" />-->
        <bean class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter" />
        <bean class="org.springframework.http.converter.FormHttpMessageConverter"/>
        <bean class="org.springframework.http.converter.BufferedImageHttpMessageConverter"/>
        <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
          <property name="supportedMediaTypes">
            <list>
              <value>application/json;charset=UTF-8</value>
              <value>application/x-www-form-urlencoded;charset=UTF-8</value>
            </list>
          </property>
        </bean>
      </list>
    </property>
    <property name="customArgumentResolvers">
      <list>
        <bean class="org.springframework.data.web.PageableHandlerMethodArgumentResolver"
          id="pagingResolver">
          <constructor-arg ref="sortResolver"/>
          <property name="sizeParameterName" value="perPage" />
          <property name="pageParameterName" value="page" />
        </bean>
      </list>
    </property>
  </bean>


  <!-- ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| -->
  <!-- VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV -->
  <!-- If you don't have enough knowledge for the Spring MVC, the following configuration should not be reconfigured.  -->

  <!-- Configures the ConfigurableWebBindingInitializer -->
  <bean id="webBindingInitializer" class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">
    <property name="validator" ref="validator"/>
    <property name="conversionService" ref="conversionService"/>
    <property name="bindingErrorProcessor" ref="bindingErrorProcessor"/>
    <property name="propertyEditorRegistrars" ref="defaultPropertyEditorRegistrar"/>
  </bean>

  <!-- Configures the internationalization -->
  <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver"/>

  <bean class="org.springframework.data.web.SortHandlerMethodArgumentResolver" id="sortResolver"/>

  <!-- Enables the MVC Annotations -->
  <!-- The mvc:annotation-driven has some default settings. -->
  <!-- For custom property editors, the default RequestMappingHandlerAdapter of mvc:annotation-driven must be disabled. -->
  <!-- So You must not move this mvc:annotation-driven above. -->
  <mvc:annotation-driven />

  <!--<mvc:annotation-driven>-->
    <!--<mvc:argument-resolvers>-->
      <!--<bean class="org.springframework.data.web.PageableHandlerMethodArgumentResolver"-->
        <!--id="pagingResolver">-->
        <!--<constructor-arg ref="sortResolver"/>-->
      <!--</bean>-->
    <!--</mvc:argument-resolvers>-->
  <!--</mvc:annotation-driven>-->


  <mvc:default-servlet-handler/>

  <!-- Configures the views -->
  <!--<mvc:view-resolvers>-->
    <!--<mvc:tiles/>-->
    <!--<mvc:jsp prefix="/WEB-INF/jsp/" suffix=".jsp"/>-->
  <!--</mvc:view-resolvers>-->
  <bean class="org.springframework.web.servlet.view.BeanNameViewResolver" p:order="0"/>

  <bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
    <property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/>
    <property name="order" value="1"/>
  </bean>

  <!-- Configures the Tiles3 -->
  <mvc:tiles-configurer>
    <mvc:definitions location="/WEB-INF/tiles-defs.xml"/>
  </mvc:tiles-configurer>

  <bean class="org.springframework.web.servlet.view.UrlBasedViewResolver" p:order="2"
    p:viewClass="org.springframework.web.servlet.view.JstlView"
    p:prefix="/WEB-INF/jsp/" p:suffix=".jsp"/>

  <bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
    <property name="contentType" value="application/json;charset=UTF-8"/>
  </bean>

  <!-- Enables the BeanValidation -->
  <bean id="validator" class="com.globaldenso.ai.miyabi.beanvalidation.ArrayFieldLocalValidatorFactoryBean"/>

  <!-- Configures the ConversionService -->
  <bean id="conversionService" class="org.springframework.format.support.DefaultFormattingConversionService" />

  <!-- Enables the messages of the custom PropertyEditors in properties files -->
  <bean id="bindingErrorProcessor" class="com.globaldenso.ai.miyabi.bind.PropertyEditorExceptionProcessor"/>

  <!-- Configures the RequestDataValueProcessors for extended output of Spring Tag -->
  <bean id="requestDataValueProcessor" class="com.globaldenso.ai.miyabi.support.RequestDataValueProcessorComposite">
    <property name="requestDataValueProcessors">
      <list>
        <!-- This RequestDataValueProcessor that the tag of form:form outputs the transaction token information to  -->
        <bean class="com.globaldenso.ai.miyabi.token.TokenRequestDataValueProcessor"/>
      </list>
    </property>
  </bean>

</beans>