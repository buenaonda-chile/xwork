<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE sqlMap      
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"      
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">
    
<sqlMap namespace="pshumlib">

	<parameterMap id="testParameters" class="java.util.HashMap">
	    <parameter property="COMPS1" javaType="java.lang.String" jdbcType="VARCHAR" mode="INOUT" />
	    <parameter property="JOBDT1" javaType="java.lang.String" jdbcType="VARCHAR" mode="INOUT" />
	    <parameter property="PROCS1" javaType="java.lang.String" jdbcType="VARCHAR" mode="INOUT" />
	    <parameter property="daygu1" javaType="java.lang.String" jdbcType="VARCHAR" mode="INOUT" />
	</parameterMap>

	<procedure id="testProc" parameterMap="testParameters" >
	    { CALL  PSEOBJLIB.FGPZ170UPC(?,?,?,?) }
	</procedure>
	
	<select id="selectGateAccessData" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT [AccessDate]
		      ,[CardNo]
		      ,[EmpNo]
		      ,[EmpName]
		      ,[Company]
		      ,[Post]
		      ,[Reader]
		  FROM [samsmx].[dbo].[tbl_accessHist]
		WHERE  Readercode in ('$GUBUN$')
		AND CONVERT(VARCHAR(8), accessdate, 112) = '$YYYYMMDD$'
		ORDER BY AccessDate
	</select>		
	
	<select id="selectINOUT_TIME" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	<!-- 2014.11.04이전 김석균TJ, 민명규S삭제
		select 
               b.prcdt, b.daymk,
               MIN(CASE WHEN a.sabun='030225' AND  a.itime <![CDATA[<=]]> 1410  THEN  itime END) as E030225_in, 
               MIN(CASE WHEN a.sabun='030225' AND  a.itime <![CDATA[>=]]> 1700  THEN  itime END) as E030225_out,
               MIN(CASE WHEN a.sabun='960305' AND  a.itime <![CDATA[<=]]> 1410  THEN  itime END) as E960305_in, 
               MIN(CASE WHEN a.sabun='960305' AND  a.itime <![CDATA[>=]]> 1700  THEN  itime END) as E960305_out,
               MIN(CASE WHEN a.sabun='080459' AND  a.itime <![CDATA[<=]]> 1410  THEN  itime END) as E080459_in,
               MIN(CASE WHEN a.sabun='080459' AND  a.itime <![CDATA[>=]]> 1700  THEN  itime END) as E080459_out,
               MIN(CASE WHEN a.sabun='110486' AND  a.itime <![CDATA[<=]]> 1410  THEN  itime END) as E110486_in,
               MIN(CASE WHEN a.sabun='110486' AND  a.itime <![CDATA[>=]]> 1700  THEN  itime END) as E110486_out,
               MIN(CASE WHEN a.sabun='130703' AND  a.itime <![CDATA[<=]]> 1410  THEN  itime END) as E130703_in,
               MIN(CASE WHEN a.sabun='130703' AND  a.itime <![CDATA[>=]]> 1700  THEN  itime END) as E130703_out,                

               MIN(CASE WHEN a.sabun='0030244' AND  a.itime <![CDATA[<=]]> 1410  THEN  itime END) as E0030244_in, 
               MIN(CASE WHEN a.sabun='0030244' AND  a.itime <![CDATA[>=]]> 1700  THEN  itime END) as E0030244_out,
               MIN(CASE WHEN a.sabun='0990021' AND  a.itime <![CDATA[<=]]> 1410  THEN  itime END) as E0990021_in, 
               MIN(CASE WHEN a.sabun='0990021' AND  a.itime <![CDATA[>=]]> 1700  THEN  itime END) as E0990021_out,
               MIN(CASE WHEN a.sabun='0110266' AND  a.itime <![CDATA[<=]]> 1410  THEN  itime END) as E0110266_in, 
               MIN(CASE WHEN a.sabun='0110266' AND  a.itime <![CDATA[>=]]> 1700  THEN  itime END) as E0110266_out,

               MIN(CASE WHEN a.sabun='030191'  AND  a.itime <![CDATA[<=]]> 1410  THEN itime END) as E030191_in,
               MIN(CASE WHEN a.sabun='030191'  AND  a.itime <![CDATA[>=]]> 1700  THEN itime END) as E030191_out,
               MIN(CASE WHEN a.sabun='080205'  AND  a.itime <![CDATA[<=]]> 1410  THEN itime END) as E080205_in, 
               MIN(CASE WHEN a.sabun='080205'  AND  a.itime <![CDATA[>=]]> 1700  THEN itime END) as E080205_out,

               MIN(CASE WHEN a.sabun='030230' AND  a.itime <![CDATA[<=]]> 1410  THEN  itime END) as E030230_in, 
               MIN(CASE WHEN a.sabun='030230' AND  a.itime <![CDATA[>=]]> 1700  THEN  itime END) as E030230_out,
               MIN(CASE WHEN a.sabun='110290' AND  a.itime <![CDATA[<=]]> 1410  THEN  itime END) as E110290_in, 
               MIN(CASE WHEN a.sabun='110290' AND  a.itime <![CDATA[>=]]> 1700  THEN  itime END) as E110290_out

		from
		(
			select idnbr as sabun, trf02 as iddat, substr(trf03,1,2)||substr(trf03,4,2) as itime
			from pssdblib.hwb032pfbf
			where trf02 like '$MONTH$'
			and idnbr in ('030191', '080205')
			
			union all
			
			select idnbr as sabun, trf02 as iddat, substr(trf03,1,2)||substr(trf03,4,2) as itime
			from pscdblib.hwb032pfbf
			where trf02 like '$MONTH$'
			and idnbr in ('0030244', '0990021', '0110266')
			
			union all
			
			select sabun, iddat, right('0000' || itime, 4) as itime
			from psedblib.hwb100pf
			where comps in ('E1', 'H1')
			and iddat like '$MONTH$'
			and sabun in ('030225', '960305', '080459', '110486', '130703', '030230', '110290')
		) a RIGHT OUTER JOIN (select * from psedblib.mst090pf where prcdt like '$MONTH$' and comps = 'E1') b
		ON a.iddat = b.prcdt		
		GROUP  BY b.prcdt, b.daymk		
		ORDER  BY  1	
	  -->
		select 
               b.prcdt, b.daymk,
               MIN(CASE WHEN a.sabun='960305' AND  a.itime <![CDATA[<=]]> 1410  THEN  itime END) as E960305_in, 
               MIN(CASE WHEN a.sabun='960305' AND  a.itime <![CDATA[>=]]> 1700  THEN  itime END) as E960305_out,
               MIN(CASE WHEN a.sabun='080459' AND  a.itime <![CDATA[<=]]> 1410  THEN  itime END) as E080459_in,
               MIN(CASE WHEN a.sabun='080459' AND  a.itime <![CDATA[>=]]> 1700  THEN  itime END) as E080459_out,
               MIN(CASE WHEN a.sabun='150046' AND  a.itime <![CDATA[<=]]> 1410  THEN  itime END) as E150046_in,
               MIN(CASE WHEN a.sabun='150046' AND  a.itime <![CDATA[>=]]> 1700  THEN  itime END) as E150046_out,	
               MIN(CASE WHEN a.sabun='110486' AND  a.itime <![CDATA[<=]]> 1410  THEN  itime END) as E110486_in,
               MIN(CASE WHEN a.sabun='110486' AND  a.itime <![CDATA[>=]]> 1700  THEN  itime END) as E110486_out,
               MIN(CASE WHEN a.sabun='141161' AND  a.itime <![CDATA[<=]]> 1410  THEN  itime END) as E141161_in,
               MIN(CASE WHEN a.sabun='141161' AND  a.itime <![CDATA[>=]]> 1700  THEN  itime END) as E141161_out,
               
               MIN(CASE WHEN a.sabun='0030244' AND  a.itime <![CDATA[<=]]> 1410  THEN  itime END) as E0030244_in, 
               MIN(CASE WHEN a.sabun='0030244' AND  a.itime <![CDATA[>=]]> 1700  THEN  itime END) as E0030244_out,
               MIN(CASE WHEN a.sabun='0990021' AND  a.itime <![CDATA[<=]]> 1410  THEN  itime END) as E0990021_in, 
               MIN(CASE WHEN a.sabun='0990021' AND  a.itime <![CDATA[>=]]> 1700  THEN  itime END) as E0990021_out,
               MIN(CASE WHEN a.sabun='0110266' AND  a.itime <![CDATA[<=]]> 1410  THEN  itime END) as E0110266_in, 
               MIN(CASE WHEN a.sabun='0110266' AND  a.itime <![CDATA[>=]]> 1700  THEN  itime END) as E0110266_out,

               MIN(CASE WHEN a.sabun='030191'  AND  a.itime <![CDATA[<=]]> 1410  THEN itime END) as E030191_in,
               MIN(CASE WHEN a.sabun='030191'  AND  a.itime <![CDATA[>=]]> 1700  THEN itime END) as E030191_out,
               MIN(CASE WHEN a.sabun='080205'  AND  a.itime <![CDATA[<=]]> 1410  THEN itime END) as E080205_in, 
               MIN(CASE WHEN a.sabun='080205'  AND  a.itime <![CDATA[>=]]> 1700  THEN itime END) as E080205_out,

               MIN(CASE WHEN a.sabun='030230' AND  a.itime <![CDATA[<=]]> 1410  THEN  itime END) as E030230_in, 
               MIN(CASE WHEN a.sabun='030230' AND  a.itime <![CDATA[>=]]> 1700  THEN  itime END) as E030230_out,
               MIN(CASE WHEN a.sabun='110290' AND  a.itime <![CDATA[<=]]> 1410  THEN  itime END) as E110290_in, 
               MIN(CASE WHEN a.sabun='110290' AND  a.itime <![CDATA[>=]]> 1700  THEN  itime END) as E110290_out

		from
		(
			select idnbr as sabun, trf02 as iddat, substr(trf03,1,2)||substr(trf03,4,2) as itime
			from pssdblib.hwb032pfbf
			where trf02 like '$MONTH$'
			and idnbr in ('030191', '080205')
			
			union all
			
			select idnbr as sabun, trf02 as iddat, substr(trf03,1,2)||substr(trf03,4,2) as itime
			from pscdblib.hwb032pfbf
			where trf02 like '$MONTH$'
			and idnbr in ('0030244', '0990021', '0110266')
			
			union all
			
			select sabun, iddat, right('0000' || itime, 4) as itime
			from psedblib.hwb100pf
			where comps in ('H1')
			and iddat like '$MONTH$'
			and sabun in ('030230', '110290')
			
			union all
			
			select idnbr as sabun, trf02 as iddat, substr(trf03,1,2)||substr(trf03,4,2) as itime
			from psedblib.hwb032pfbf
			where trf02 like '$MONTH$'
			and idnbr in ('960305', '080459', '150046', '110486', '141161')
		) a RIGHT OUTER JOIN (select * from psedblib.mst090pf where prcdt like '$MONTH$' and comps = 'E1') b
		ON a.iddat = b.prcdt		
		GROUP  BY b.prcdt, b.daymk		
		ORDER  BY  1	
	</select>
	
	<select id="selectHPIF" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	select 
		A.BUCD1, sum(B.KIBONP) AS KIBONP,
		sum(B.JKSUDP+B.TESUDP+B.QLSUDP+B.BJSUDP+B.GSSUDP+B.WHSUDP+B.CJSUDP+B.JMSUDP+B.WFSUDP+B.YHSUDP+B.DOSUDP+B.GTSUDP+B.OTSUDP+B.EDUCMP+B.PMKJMP+B.PMKBMP++B.SLSUDP+B.YCSUDP+B.UCSUDP+B.OVSUDP+B.ANSUDP+B.HKSUDP+B.FILL1P+B.FILL3P+B.TQSUDP+B.YUSUDP+B.FILL2P) AS SUDP,
        sum(B.TAX1MP) AS TX1, sum(B.TAX3MP) AS TX2      	
	from
		PSEDBLIB.HMD020PF A, PSEDBLIB.HPC200PF B
	where
		A.SABUN = B.SABUN
		and B.KNYYM = '$YYYYMM$'
		and B.PTYPE in ('P0', 'P1', 'P2')
		and (('$SIGN$' = 'W' AND B.PAYCDP <![CDATA[<>]]> 9) OR ('$SIGN$' = 'B' AND B.PAYCDP = 9))
		group by A.BUCD1
		order by A.BUCD1	
	</select>
	
	<select id="selectHAY201_B" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			COUNT(*) AS TOT, VALUE(SUM(ZZ020),0) AS SODEUK, VALUE(SUM(ZZ110),0) AS SODEUK_TAX, VALUE(SUM(ZZ112),0) AS JUMIN, VALUE(SUM(ZZ114),0) AS NONG,
			VALUE(SUM(ZZ110),0) + VALUE(SUM(ZZ112),0) + VALUE(SUM(ZZ114),0) AS TOTAL_TAX
		FROM
			$LIB3$.HAY081PF
		WHERE
			PTJYM = 201213
	</select>
	
	<select id="selectHAY201_B_MAGAM" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			COUNT(*) AS TOT, VALUE(SUM(ZZ020),0) AS SODEUK, VALUE(SUM(ZZ110),0) AS SODEUK_TAX, VALUE(SUM(ZZ112),0) AS JUMIN, VALUE(SUM(ZZ114),0) AS NONG,
			VALUE(SUM(ZZ110),0) + VALUE(SUM(ZZ112),0) + VALUE(SUM(ZZ114),0) AS TOTAL_TAX
		FROM
			$LIB3$.HAY200PF
		WHERE
			PTJYM = 201213
	</select>
	
	<select id="selectHAY201_XJOB_CNT" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			SUM(CASE WHEN A.RPAT1+A.RBAT1 <![CDATA[<>]]> 0 THEN 1 ELSE 0 END) + SUM(CASE WHEN A.RPAT2+A.RBAT2 <![CDATA[<>]]> 0 THEN 1 ELSE 0 END) AS TOT  
		FROM
			$LIB3$.HAY011PF A, $LIB2$.HAY081PF B 
		WHERE
			A.PTJYM = 201213 AND
			B.PTJYM = 201213 AND
			A.SABUN = B.SABUN
	</select>	
	
	<select id="selectHAY201_XJOB_CNT_MAGAM" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			SUM(CASE WHEN A.RPAT1+A.RBAT1 <![CDATA[<>]]> 0 THEN 1 ELSE 0 END) + SUM(CASE WHEN A.RPAT2+A.RBAT2 <![CDATA[<>]]> 0 THEN 1 ELSE 0 END) AS TOT  
		FROM
			$LIB3$.HAY100PF A, $LIB2$.HAY200PF B 
		WHERE
			A.PTJYM = 201213 AND
			B.PTJYM = 201213 AND
			A.SABUN = B.SABUN
	</select>	
	
	<select id="selectHAY201_C" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			SABUN,PTJYM,ZZ001,ZZ002,ZZ003,ZZ004,ZY001,ZY002,ZY003,ZY004,ZY005,ZY006,ZZ005,ZZ006,ZZ007,ZZ008,ZZ009,ZZ010,ZZ011,
			ZZ012,ZZ013,ZZ014,ZZ018,ZZ019,ZZ020,ZZ021,ZZ022,ZZ028,ZZ029,ZZ030,ZZ031,ZZ032,ZZ033,ZZ034,ZZ035,ZZ036,ZZ037,ZZ038,
			ZZ039,ZZ040,ZZ041,ZZ042,ZZ043,ZZ044,ZZ048,ZZ049,ZZ050,ZZ051,ZZ052,ZZ053,ZZ054,ZZ055,ZZ056,ZZ057,ZZ058,ZZ059,ZZ060,
			ZZ061,ZZ062,ZZ063,ZZ064,ZZ065,ZZ070,ZZ071,ZZ072,ZZ073,ZZ074,ZZ075,ZZ076,ZZ077,ZZ078,ZZ079,ZZ080,ZZ081,ZZ082,ZZ090,
			ZZ091,ZZ092,ZZ093,ZZ094,ZZ097,ZZ100,ZZ101,ZZ110,ZZ111,ZZ112,ZZ113,ZZ114,ZZ115,ZZ119,ZZ130,ZZ131,ZZ132,ZZ133,ZZ134,
			ZZ135,ZZ139,ZZ055M,ZZ055N,ZZ050A
		FROM
			$LIB3$.HAY081PF
		WHERE
			PTJYM = 201213
			
	</select>
	
	<select id="selectHAY201_C_MAGAM" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			SABUN,PTJYM,ZZ001,ZZ002,ZZ003,ZZ004,ZY001,ZY002,ZY003,ZY004,ZY005,ZY006,ZZ005,ZZ006,ZZ007,ZZ008,ZZ009,ZZ010,ZZ011,
			ZZ012,ZZ013,ZZ014,ZZ018,ZZ019,ZZ020,ZZ021,ZZ022,ZZ028,ZZ029,ZZ030,ZZ031,ZZ032,ZZ033,ZZ034,ZZ035,ZZ036,ZZ037,ZZ038,
			ZZ039,ZZ040,ZZ041,ZZ042,ZZ043,ZZ044,ZZ048,ZZ049,ZZ050,ZZ051,ZZ052,ZZ053,ZZ054,ZZ055,ZZ056,ZZ057,ZZ058,ZZ059,ZZ060,
			ZZ061,ZZ062,ZZ063,ZZ064,ZZ065,ZZ070,ZZ071,ZZ072,ZZ073,ZZ074,ZZ075,ZZ076,ZZ077,ZZ078,ZZ079,ZZ080,ZZ081,ZZ082,ZZ090,
			ZZ091,ZZ092,ZZ093,ZZ094,ZZ097,ZZ100,ZZ101,ZZ110,ZZ111,ZZ112,ZZ113,ZZ114,ZZ115,ZZ119,ZZ130,ZZ131,ZZ132,ZZ133,ZZ134,
			ZZ135,ZZ139,ZZ055M,ZZ055N  
		FROM
			$LIB3$.HAY200PF
		WHERE
			PTJYM = 201213		
	</select>
	
	<select id="selectHAY201_C_XJOB" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			SABUN,PTJYM,CHGAD,FORTY,IJJWN,KRWTX,FCWTX,TX1AD,TX3AD,BDMTR,FCWTF,BDYT1,BDYT2,WFBCD,CHBCD,PTBCD,KYBCA,KYBCB,TRBCD,
			BUBCD,SOSCD,CBUCD,BYFL1,BYFL2,POFL1,POFL2,PGPPC,PGPRC,PHOSA,PHOSB,PEDUA,PEDUB,PNHOU,PNMOU,PNHU1,PNHUA,PNHUM,PNHU2,
			PNHU3,PNHU4,PNHU5,PNHU6,PNHU7,PNHU8,PNHU9,WDISA,KIBMA,KIBMB,KIBMC,KIBMD,KIBME,KIBOA,KIBOB,KIBOC,KIBOD,KIBOE,SOFL1,
			SOFL2,YUNG1,YUNG2,JUNTJ,SINYN,CASHN,JIGBN,CJANG,JIRON,HUSA1,HUSA2,HUSA3,HUSA4,KITA1,KITA2,KITA3,KITA4,KITA5,TJMON,
			THMON,TGMON,JENGN,KIBUA,TOBM1,TOBM2,RPNM1,RNOA1,RNOB1,RNOC1,RPAT1,RBAT1,RGB11,RT1X1,RT1X2,RT1X3,RG1P1,RG1P2,RG1P3,
			RG1P4,RGB12,RPNM2,RNOA2,RNOB2,RNOC2,RPAT2,RBAT2,RGB21,RT2X1,RT2X2,RT2X3,RG2P1,RG2P2,RG2P3,RG2P4,RGB22,SIDAT,SSDAT
		FROM
			$LIB3$.HAY011PF
		WHERE
			PTJYM = 201213 AND
			SABUN = '$SABUN$'
	</select>		
	
	<select id="selectHAY201_C_MASTER" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			SABUN,KORNM,CHRNM,JOGCD,DPTCD,LINCD,PASSA,PASSB,PASSC,PASSK,ENRCD,GNDAT,ENDAT,PEDTB,CNDCD,SEXCD,CNDAT,CNRCD,FORCD,
			BIGCD,BIDAT,ORDCD,ORADR,PEDTA,CUDCD,CUADR,TELNB,HOUCD,CARCD,CARNB,CANAM,CHOCD,CHMCD,AGEYY,AGEMM,MGRD1,MGRD2,MEDNO,
			GGRD1,GGRD2,GUKNO,BUCD1,DPTLN,RT002,RT004,RTFUP,RTGIT,RTBL1,RTBL2,FVRCD,FBGCD,FCLCD,FYGCD,FMJCD,FIDNB,FIDAT,FODAT,
			TALLM,WEIGT,LEEYE,RIEYE,EYEBD,BLDTY,BDYCT,SIKCM,ENRNM,ENJCD,ENLCD,WFBCD,KYBCD,CHBCD,PTBCD,TRBCD,PMWCD,BUBCD,SOSCD,
			BYFL1,BYFL2,CNTYY,CNTMM,GAMCD,GAMRT,PAYCD,PCDCD,TAXCD,LABCD,FUNCD,SUSCD,JIMCD,JICCD,HONIN,QCOD1,QCOD2,QCOD3,QCOD4,
			YSCDA,YSCDB,YSCDC,PSDTA,PCDAT,GRADE,HOBON,GUNHO,YNBCD,GYBON,CYBON,YENBO,YKGRD,GBGRD,YKRTE,MKBON,KIBON,EKBON,JKSUD,
			TESUD,QLSUD,BJSUD,GSSUD,WHSUD,CJSUD,JMSUD,WFSUD,YHSUD,DOSUD,GTSUD,HASUD,TQSUD,OTSUD,FILL1,FILL2,FILL3,FILL4,FILL5,
			LABOM,BNKCD,GJANB,BALCD,BSDAT,BEDAT,SYDAT,EDATE,ETIME,USRNM,DSPNM 
		FROM
			$LIB3$.HMD020PF
		WHERE
			SABUN = '$SABUN$'
	</select>
	
	<select id="selectHAY201_E" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			*  
		FROM 
			$LIB3$.HAY021PF
		WHERE
			SABUN = '$SABUN$'
		ORDER BY RELCD				
	</select>
	
	<select id="selectHAY201_F" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			*  
		FROM
			$LIB3$.HAY041PF
		WHERE
			SABUN = '$SABUN$'
		ORDER BY
			INCCD, BNKCD, GJBNB, PAYYN
	</select> 
	<select id="selectHMS000Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
	        sum(case when SEXCDN = 'M' then 1 else 0 end) as M,
	         sum(case when SEXCDN = 'F' then 1 else 0 end) as F,
	         '' as blanks,
	         sum(case when PAYCDN = 1 then 1 else 0 end) as p1,
	         sum(case when PAYCDN = 2 then 1 else 0 end) as p2,
	         sum(case when PAYCDN = 3 then 1 else 0 end) as p3,
	         sum(case when PAYCDN = 4 then 1 else 0 end) as p4,
	         sum(case when PAYCDN = 9 then 1 else 0 end) as p9,
	         sum(case when PAYCDN = 1 then 1 else 0 end) as pt1,
	         sum(case when PAYCDN <![CDATA[<>]]> 1 then 1 else 0 end) as pt9,
	         '' as blanks,
	         sum(case when PAYCDN = 1 and GRADEN = '00' then 1 else 0 end) as G00,
	         sum(case when PAYCDN = 1 and GRADEN = '1A' then 1 else 0 end) as G1a,
	         sum(case when PAYCDN = 1 and GRADEN = '1B' then 1 else 0 end) as G1b,
	         sum(case when PAYCDN = 1 and GRADEN = '2A' then 1 else 0 end) as G2a,
	         sum(case when PAYCDN = 1 and GRADEN = '2B' then 1 else 0 end) as G2b,
	         sum(case when PAYCDN = 1 and GRADEN = '3A' and SEXCDN = 'M' then 1 else 0 end) as G3aM,
	         sum(case when PAYCDN = 1 and GRADEN = '3A' and SEXCDN = 'F' then 1 else 0 end) as G3aF,
	         '' as blanks,
	         sum(case when PAYCDN = 1 and GRADEN = '3B' then 1 else 0 end) as G3b,
	         sum(case when (GRADEN = '5A' or GRADEN = '6A') and SEXCDN='M' then 1 else 0 end) as G56M,
	         sum(case when (GRADEN = '5A' or GRADEN = '6A') and SEXCDN='F' then 1 else 0 end) as G56F,
	         sum(case when CNDCDN <![CDATA[<>]]> 'R' or CNDCDN = 'R' then 1 else 0 end) as Tt1,
	         '' as blanks,
	         sum(case when FORCTN = 'JP' then 1 else 0 end) as FORCTN,
	         sum(case when DPTCDN = 3341 then 1 else 0 end) as REFORCTN,
	         sum(case when BALCD = '21' then 1 else 0 end) as p5,
	         sum(case when BALCD = '24' then 1 else 0 end) as p6,
	         sum(case when BALCD = '25' then 1 else 0 end) as p7
	  FROM PSCDBLIB.HMP100PF
	  WHERE
	 		KDYYM = $KDYYM$
	 		<isNotEmpty prepend="AND" property="COMPS">
				COMPS=#COMPS#
			</isNotEmpty>	 						
	  GROUP BY KDYYM  
	</select> 	
	
	<select id="selectHTME04Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	<!--  2014.11.24 수정 제환복
	    월/년차 시간->일수변경, 생휴시간->일수변경, 인정휴가 시간->일수변경 (병가포함)IJCDT=IJCDT+BGCDT
		SELECT
				C.SABUN, TRIM(C.KORNM) AS KORNM, TRIM(D.DPDPNM) AS DPDPNM, C.GRADE, C.DPTCD, C.GRADE, B.KNYYM,
				B.OTTIM, B.JGTIM, B.JTTIM, B.OTTIM, B.ANTIM, (B.KNTDT || ' / ' || B.CCTIM) AS KNTDT,
				B.HTTIM, B.YTTIM, (B.UCCTT + B.YCCTT) AS YUCTT, B.SLCTT, B.IJCTT, B.F6CTT, B.GCTIM, B.KTA04P,
            	B.KIBONP, B.CJSUDP, B.JMSUDP, B.WHSUDP, B.GSSUDP, B.JKSUDP, B.HASUDP, B.BJSUDP, B.YUSUDP,
            	B.ANSUDP, B.OVSUDP, TRIM(B.TDPTMP) AS TDPTMP, B.HKSUDP, B.OTSUDP, B.PMKJMP, B.KTA09P, B.TAX1MP, B.TAX3MP,
            	B.QLSUDP, B.TQSUDP, B.GTSUDP, (B.WFSUDP + B.YHSUDP + B.DOSUDP) AS WFSUDP, B.SLSUDP, (B.YCSUDP + B.UCSUDP) AS YCSUDP, 
            	(B.TAX4MP+B.PMTX4P) AS TAX4MP, (B.GYPPCP+B.PMGYCP) AS GYPPCP, (B.BGPPCP+B.PMBGCP) AS BGPPCP,
            	B.KTA05P, B.DAERMP, B.LABOMP, B.AMEMBP, B.EFCACP, B.HOURMP, B.HOUGMP,
            	TRIM(B.GGTTMP) AS GGTTMP, TRIM(B.SSTTMP) AS SSTTMP, B.FILL2P, B.EDUCMP, B.KTA08P,
            	B.JCCNT, B.TESUDP, B.ORSGAP, B.KTA03P, B.SAWKMP, B.JEKGMP, B.FILL1P, B.FILL4P, B.FILL5P
		FROM
				PSZDBLIB.M_USR_TID A INNER JOIN $LIB3$.HPC200PF B ON A.TEL_NO1 = B.SABUN
                                     INNER JOIN $LIB3$.HMD020PF C ON B.SABUN = C.SABUN 
                                     INNER JOIN $LIB2$.MST650PF D ON C.DPTCD = D.DPCODE
		WHERE
			    A.USER_ID=#USER_ID#
				AND	B.KNYYM=#KNYYM# 
				AND B.PTYPE=#PTYPE#
				AND D.DPCOMP=#COMPS#
	-->
		SELECT
				CASE WHEN '$COMPS$'!='E1' THEN 
				REPEAT('0', 7-length(trim(char(C.SABUN)))) || C.SABUN 
				ELSE REPEAT('0', 6-length(trim(char(C.SABUN)))) || C.SABUN END SABUN,
				TRIM(C.KORNM) AS KORNM, TRIM(D.DPDPNM) AS DPDPNM, C.GRADE, C.DPTCD, C.GRADE, B.KNYYM,
				B.OTTIM, B.JGTIM, B.JTTIM, B.OTTIM, B.ANTIM, (B.KNTDT || ' / ' || B.CCTIM) AS KNTDT,
				B.HTTIM, B.YTTIM,
				<!-- (B.UCCTT + B.YCCTT) AS YUCTT, B.SLCTT, B.IJCTT, -->
				(B.UCCDT + B.YCCDT) AS YUCTT, B.SLCDT AS SLCTT, B.IJCDT+B.BGCDT AS IJCTT,
				B.F6CTT, B.GCTIM, B.KTA04P,
            	B.KIBONP, B.CJSUDP, B.JMSUDP, B.WHSUDP, B.GSSUDP, B.JKSUDP, B.HASUDP, B.BJSUDP, B.YUSUDP,
            	B.ANSUDP, B.OVSUDP, TRIM(B.TDPTMP) AS TDPTMP, B.HKSUDP, B.OTSUDP, B.PMKJMP, B.KTA09P, B.TAX1MP, B.TAX3MP,
            	B.QLSUDP, B.TQSUDP, B.GTSUDP, (B.WFSUDP + B.YHSUDP + B.DOSUDP) AS WFSUDP, B.SLSUDP, (B.YCSUDP + B.UCSUDP) AS YCSUDP, 
            	(B.TAX4MP+B.PMTX4P) AS TAX4MP, (B.GYPPCP+B.PMGYCP) AS GYPPCP, (B.BGPPCP+B.PMBGCP) AS BGPPCP,
            	B.KTA05P, B.DAERMP, B.LABOMP, B.AMEMBP, B.EFCACP, B.HOURMP, B.HOUGMP,
            	TRIM(B.GGTTMP) AS GGTTMP, TRIM(B.SSTTMP) AS SSTTMP, B.FILL2P, B.EDUCMP, B.KTA08P,
            	B.JCCNT, B.TESUDP, B.ORSGAP, B.KTA03P, B.SAWKMP, B.JEKGMP, B.FILL1P, B.FILL4P, B.FILL5P
		FROM
				PSZDBLIB.M_USR_TID A INNER JOIN $LIB3$.HPC200PF B ON A.TEL_NO1 = B.SABUN
                                     INNER JOIN $LIB3$.HMD020PF C ON B.SABUN = C.SABUN 
                                     INNER JOIN $LIB2$.MST650PF D ON C.DPTCD = D.DPCODE
		WHERE
			    A.USER_ID=#USER_ID#
				AND	B.KNYYM=#KNYYM# 
				AND B.PTYPE=#PTYPE#
				AND D.DPCOMP=#COMPS#
	</select> 	
	<select id="selectHPC030PF" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
				B.PCONT, A.DOAMTH 
		FROM 
				$LIB3$.HPC230PF A LEFT OUTER JOIN $LIB3$.HUM010PF B ON 'DOC' || A.DONHOH = B.PCODE
                                  INNER JOIN PSZDBLIB.M_USR_TID C ON A.SABUNH = C.TEL_NO1
		WHERE 
				A.GYYMMH = #KNYYM# 
				AND C.USER_ID = #USER_ID#
		FETCH FIRST 6 ROWS ONLY
	</select>
	
	<select id="selectHPC010PF" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
				A.GYYMM, TRIM(B.KORNM) AS KORNM, TRIM(A.GDESC) AS GDESC, (A.GOAMT-A.JANAK) AS GOAMT
		FROM 	
				$LIB3$.HPC010PF A LEFT JOIN $LIB3$.HMD020PF B ON A.BSABN = B.SABUN
                                 INNER JOIN PSZDBLIB.M_USR_TID C ON A.JSABN = C.TEL_NO1
		WHERE 
				A.GYYMM = #KNYYM# 
				AND C.USER_ID = #USER_ID#
		FETCH FIRST 6 ROWS ONLY
	</select>
	
	<select id="selectHTME04_rep" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
				CASE WHEN '$COMPS$'!='E1' THEN 
				REPEAT('0', 7-length(trim(char(C.SABUN)))) || C.SABUN 
				ELSE REPEAT('0', 6-length(trim(char(C.SABUN)))) || C.SABUN END SABUN,
				TRIM(C.KORNM) AS KORNM, TRIM(D.DPDPNM) AS DPDPNM, C.GRADE, C.DPTCD, C.GRADE, B.KNYYM,
				B.OTTIM, B.JGTIM, B.JTTIM, B.OTTIM, B.ANTIM, (B.KNTDT || ' / ' || B.CCTIM) AS KNTDT,
				B.HTTIM, B.YTTIM,
				<!-- (B.UCCTT + B.YCCTT) AS YUCTT, B.SLCTT, B.IJCTT, -->
				(B.UCCDT + B.YCCDT) AS YUCTT, B.SLCDT AS SLCTT, B.IJCDT+B.BGCDT AS IJCTT,
				B.F6CTT, B.GCTIM, B.KTA04P,
            	B.KIBONP, B.CJSUDP, B.JMSUDP, B.WHSUDP, B.GSSUDP, B.JKSUDP, B.HASUDP, B.BJSUDP, B.YUSUDP,
            	B.ANSUDP, B.OVSUDP, TRIM(B.TDPTMP) AS TDPTMP, B.HKSUDP, B.OTSUDP, B.PMKJMP, B.KTA09P, B.TAX1MP, B.TAX3MP,
            	B.QLSUDP, B.TQSUDP, B.GTSUDP, (B.WFSUDP + B.YHSUDP + B.DOSUDP) AS WFSUDP, B.SLSUDP, (B.YCSUDP + B.UCSUDP) AS YCSUDP, 
            	(B.TAX4MP+B.PMTX4P) AS TAX4MP, (B.GYPPCP+B.PMGYCP) AS GYPPCP, (B.BGPPCP+B.PMBGCP) AS BGPPCP,
            	B.KTA05P, B.DAERMP, B.LABOMP, B.AMEMBP, B.EFCACP,  B.HOURMP, B.HOUGMP,
            	TRIM(B.GGTTMP) AS GGTTMP, TRIM(B.SSTTMP) AS SSTTMP, B.FILL2P, B.EDUCMP, B.KTA08P, B.PTYPE,
            	B.JCCNT, B.TESUDP, B.ORSGAP, B.KTA03P, B.SAWKMP, B.JEKGMP, B.FILL1P, B.FILL4P, B.FILL5P
		FROM
				$LIB3$.HPC200PF B INNER JOIN $LIB3$.HMD020PF C ON B.SABUN = C.SABUN 
                                  INNER JOIN $LIB2$.MST650PF D ON C.DPTCD = D.DPCODE
		WHERE
			    B.SABUN='$SABUN$'
				AND	B.KNYYM=#KNYYM# 
				AND B.PTYPE=#PTYPE#
				AND D.DPCOMP=#COMPS# 
	</select> 	
	
	<select id="selectHPC030PF_rep" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
				B.PCONT, A.DOAMTH 
		FROM 
				$LIB3$.HPC230PF A LEFT OUTER JOIN $LIB3$.HUM010PF B ON 'DOC' || A.DONHOH = B.PCODE
		WHERE 
				A.GYYMMH = #KNYYM# 
				AND A.SABUNH = '$SABUN$'
		FETCH FIRST 6 ROWS ONLY		
	</select>
	
	<select id="selectHPC010PF_rep" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
				A.GYYMM, TRIM(B.KORNM) AS KORNM, TRIM(A.GDESC) AS GDESC, (A.GOAMT-A.JANAK) AS GOAMT
		FROM 	
				$LIB3$.HPC010PF A LEFT JOIN $LIB3$.HMD020PF B ON A.BSABN = B.SABUN
		WHERE 
				A.GYYMM = #KNYYM# 
				AND A.JSABN = '$SABUN$'
		FETCH FIRST 6 ROWS ONLY
	</select>
	
	<select id="selectHASS01" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
				A.DPSQNO, A.DPCONM, A.DPCODE 
		FROM 	
				$LIB2$.MST650PF A
		WHERE 
				DPCOMP = #COMPS# AND DPCONM NOT IN ('.','') AND (DPEDSW = 'T' OR DPEDSW = '')
				<isNotEmpty prepend="AND" property="DPPAT1">
				A.DPPAT1=#DPPAT1# AND A.DPPAT0 != 3
				<!--
				 AND A.DPPAT0 != 3 기능직 제외
				  -->
				</isNotEmpty>
				AND (SELECT COUNT(*) FROM $LIB3$.HMD020PF WHERE DPTCD = A.DPCODE AND CNDCD <![CDATA[<>]]> 'R') <![CDATA[<>]]> 0
		ORDER BY A.DPSQNO, A.DPCODE
	</select>
	
	<select id="selectHASS01_dept" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		
		SELECT
				A.SABUN, A.DPTCD, TRIM(A.KORNM) AS KORNM, TRIM(A.CHRNM) AS CHRNM, A.PASSA, A.GNDAT,
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'ODCD' || A.GRADE) AS PCONT,
				(CASE WHEN SEXCD = 'M' THEN '남' ELSE '여' END) AS SEX, A.CUADR,
				B.DPSQNO
		FROM 
				$LIB3$.HMD020PF A
				LEFT OUTER JOIN $LIB2$.MST650PF B ON A.DPTCD=B.DPCODE AND B.DPCOMP = #COMPS#
		WHERE
		<isEqual property="CNDCD" compareValue="R">
				A.CNDCD = 'R'
		</isEqual>
		<isNotEqual property="CNDCD" compareValue="R">
				A.CNDCD <![CDATA[<>]]> 'R'
		</isNotEqual>
		<isNotEmpty prepend="AND" property="DPTCD">
				A.DPTCD=#DPTCD#
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="arrDPCODE">
				A.DPTCD IN $arrDPCODE$
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="SABUN">
				A.SABUN=$SABUN$
		</isNotEmpty>		
		ORDER BY B.DPSQNO, A.DPTCD, A.GRADE, A.GNDAT
		
	</select>
	
	<select id="selectHASS02" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
                TRIM(A.KORNM) AS KORNM, TRIM(A.CHRNM) AS CHRNM, A.SEXCD, TRIM(A.SIKCM) AS SIKCM,
                (CASE WHEN A.SEXCD = 'M' THEN '남' ELSE '여' END) AS SEX, TRIM(A.ORADR) AS ORADR,
                (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'RGCD' || A.CHOCD) AS PCONT,
                (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'ITCD' || A.CHMCD) AS CHMCD,
                A.TALLM, A.WEIGT, A.LEEYE, A.RIEYE, A.BLDTY, A.BDYCT, TRIM(A.CUADR) AS CUADR, A.TELNB,
                (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'OSCD' || A.FYGCD) AS FYGCD,
                (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'MTCD' || A.FVRCD) AS FVRCD,
                (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'MSCD' || A.FBGCD) AS FBGCD,
                (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'DRCD' || A.FCLCD) AS FCLCD,
                A.FIDAT, A.FODAT, TRIM(B.DPDPNM) AS DPNM, A.GRADE, A.GNDAT, A.PASSA,
                (SUBSTR(A.PASSA,3,6) || '-' || A.PASSB || A.PASSC) AS JUMIN, 
                (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'ODCD' || A.GRADE) AS GRANM                 
		FROM 
				$LIB3$.HMD020PF A INNER JOIN $LIB2$.MST650PF B ON A.DPTCD = B.DPCODE
		WHERE 
				A.SABUN='$SABUN$'
	</select>	
	
	<select id="selectHASS02_TAB1" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
				TRIM(A.RELNM) AS RELNM, A.BRDAT, A.LIVCD, A.SUBCD,
				A.RELCD || (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'FMCD' || A.RELCD) AS RELCD,
				A.HAKCD || (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'SSCD' || A.HAKCD) AS HAKCD,
				A.JOBCD || (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'JBCD' || A.JOBCD) AS JOBCD
		FROM 
				$LIB3$.HMD160PF A
		WHERE 
				A.SABUN = '$SABUN$'
	</select>
	
	<select id="selectHASS02_TAB2" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
				A.SCHCD || (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'SSCD' || A.SCHCD) AS SCHCD,
				A.ADRCD || (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'BPCD' || A.ADRCD) AS ADRCD,
				A.MAJCD || (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'MJCD' || A.MAJCD) AS MAJCD,
				A.GRDCD || (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'GDCD' || A.GRDCD) AS GRDCD,
				A.OUDAT, TRIM(A.SCHNM) AS SCHNM, TRIM(A.GRDCM) AS GRDCM
		FROM 
				$LIB3$.HMD150PF A
		WHERE 
				A.SABUN = '$SABUN$'
	</select>
	
	<select id="selectHASS02_TAB3" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
				(CASE WHEN GUBCD = '1' THEN '1사외' ELSE '2사내' END) AS GUBCD, 
				ISDAT, OSDAT, TRIM(PLANM) AS PLANM, DEPNM, TRIM(GRANM) AS GRANM, WRKNM
		FROM 
				$LIB3$.HMD170PF
		WHERE 
				SABUN = '$SABUN$'
		ORDER BY ISDAT
	</select>
	
	<select id="selectHASS02_TAB4" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
				(CASE WHEN LCSCD <![CDATA[<]]> 10 THEN (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'QFCD0' || LCSCD) 
				ELSE (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'QFCD' || LCSCD) END) AS LCSCD,
				TRIM((SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'QDCD' || LCSCL)) AS LCSCL,
				GTDAT, TRIM(LCSNB) AS LCSNB, LCSPL
		FROM 
				$LIB3$.HMD180PF
		WHERE 
				SABUN = '$SABUN$'		
	</select>
	
	<select id="selectHASS02_TAB5" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'EMCD' || EDTCD) AS EDTCD,
				ESDAT, EEDAT, EDTPL, EDTNM, EDPOT, EDCLS
		FROM 
				$LIB3$.HMD200PF
		WHERE 
				SABUN = '$SABUN$'		
	</select>
	
	<select id="selectHASS02_TAB6" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
				'징계' AS GUBUN, DCPMN, TRIM(DCPSY) AS DCPSY,
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'DPCD0' || DCPCD) AS DCPCD,
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'DPKD' || DCPKD) AS DCPKD
		FROM 
				$LIB3$.HMD230PF
		WHERE 
				SABUN = '$SABUN$'
		UNION ALL
		SELECT 
				'포상' AS GUBUN, PRZMN, PRZSY,
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'FSCD0' || PRZCD) AS PRZCD,
				PRZNY
		FROM 
				$LIB3$.HMD240PF
		WHERE 
				SABUN = '$SABUN$'
	
	</select>
	
	<select id="selectHASS02_TAB7" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'SICD0' || SICGB) AS SICGB,
				SICYY, FRSDT, TOSDT, TRIM(SICET) AS SICET
		FROM 
				$LIB3$.HMD270PF
		WHERE 
				SABUN = '$SABUN$'		
	</select>
	
	<select id="selectHASS02_TAB8" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
				LSDAT, LLDAT, LDPOT,
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'LMCD0' || LDTCD) AS LDTCD
		FROM 
				$LIB3$.HMD190PF
		WHERE 
				SABUN = '$SABUN$'		
	</select>
	
	<select id="selectHASS02_TAB9" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 	A.APDAT, A.APDCD, A.APDDL, A.APDNM
		FROM (
				<isEqual property="COMPS" compareValue="PE">
				SELECT APDAT, APDCD, (TRIM(APDDL) || TRIM(APDCL)) AS APDDL,
							(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'HACD' || APDCD) AS APDNM
					  FROM	$LIB3$.HMD220PF
					  WHERE	SABUN = '$SABUN$' AND APDCD IN (10, 11)
			    </isEqual>
			    <isNotEqual property="COMPS" compareValue="PE">
			    SELECT BSDAT AS APDAT, BALCD AS APDCD, NAYON AS APDDL,
                      (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'HACD' || BALCD) AS APDNM
				FROM $LIB3$.HMD250PF
				WHERE SABUN = '$SABUN$'	AND BALCD = 71
				</isNotEqual>	
			    ) A
		ORDER BY A.APDAT
	</select>
	
	<select id="selectHASS02_TAB10" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT A.APDAT, A.APDCL, A.APDWK
		FROM (
				<isEqual property="COMPS" compareValue="PE">
		 		SELECT APDAT, TRIM(APDCL) AS APDCL, APDWK
		 		FROM $LIB3$.HMD220PF
		 		WHERE	SABUN = '$SABUN$' AND APDCD IN (12)	
				</isEqual>
	    		<isNotEqual property="COMPS" compareValue="PE">
				SELECT UPDAT AS APDAT, (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'ODCD' || UGRAD) AS APDCL, '' AS APDWK 
				FROM $LIB3$.HMD210PF
				WHERE SABUN = '$SABUN$'
				</isNotEqual>
			) A
		ORDER BY A.APDAT
	</select>
		
	<select id="selectHASS02_TAB11" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
				KNYYM, (GRADEP || HOBONP) AS HOBONP, GYBONP, KIBONP, CJSUDP, HASUDP, WHSUDP, TESUDP,  
				JMSUDP, JKSUDP, GSSUDP, BJSUDP, QLSUDP, TQSUDP, WFSUDP, YHSUDP, DOSUDP, GTSUDP, OTSUDP,
				PAMTTP
		FROM 
				$LIB3$.HPC200PF
		WHERE 
				SUBSTR(KNYYM,5,2) = '04'
				AND	PTYPE = 'P0'				
				AND SABUN = '$SABUN$'					
		ORDER BY KNYYM DESC
	</select>
	
	<select id="selectHASS02_TAB12" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
				ADVYY, ADVPT, ADVET
		FROM 
				$LIB3$.HMD260PF
		WHERE 
				SABUN = '$SABUN$'	
		ORDER BY ADVYY DESC
	</select>
	
	<select id="selectHPM100_rep" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 	
				TRIM(D.DPDPNM) AS DPDPNM, B.YYEAR, B.ILDAN,
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'ODCD' || C.GRADE) AS GRADE,
				C.SABUN, TRIM(C.KORNM) AS KORNM, C.GNDAT, B.YYCHA, B.YYAMT, B.TAX1S, B.TAX3S, B.GOBOH, B.SYAMT
		FROM	
				PSZDBLIB.M_USR_TID A INNER JOIN $LIB3$.HPM100PF B ON A.TEL_NO1 = B.SABUN
									 INNER JOIN $LIB3$.HMD020PF C ON B.SABUN = C.SABUN 
									 INNER JOIN $LIB2$.MST650PF D ON C.DPTCD = D.DPCODE
		WHERE
				A.USER_ID = #USER_ID#
				AND	B.YYEAR = #KNYYM#
	</select>
	
	<select id="selectHPM100_rep_insa" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 	
				TRIM(D.DPDPNM) AS DPDPNM, B.YYEAR, B.ILDAN,
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'ODCD' || C.GRADE) AS GRADE,
				C.SABUN, TRIM(C.KORNM) AS KORNM, C.GNDAT ,B.YYCHA, B.YYAMT, B.TAX1S, B.TAX3S, B.GOBOH, B.SYAMT
		FROM	
				$LIB3$.HPM100PF B INNER JOIN $LIB3$.HMD020PF C ON B.SABUN = C.SABUN
  								  INNER JOIN $LIB2$.MST650PF D ON C.DPTCD = D.DPCODE
		WHERE
				B.YYEAR = #KNYYM# 
				AND B.SABUN = '$SABUN$'
	</select>
	<select id="selectHUM020PF" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		 * 
	FROM
		$LIB3$.HUM020PF
	WHERE
		PACOD=#PACOD#
	</select>
	<select id="selectHWD075Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
		A.DPTCD, trim(D.DPCONM) AS DPCONM, A.SABUN, TRIM(B.KORNM) AS KORNM, A.K21IL, A.K22IL, A.K21IL + A.K22IL AS KNTILH,
		CASE WHEN (A.K21IL + A.K22IL) > C.PADA2 THEN '초과'
		WHEN ((A.K21IL + A.K22IL) <![CDATA[<]]> C.PADA2) AND ((A.K21IL + A.K22IL)<![CDATA[>=]]> C.PADA1) THEN '주의'
		ELSE '양호' END AS KNTCNM, A.K21IL + A.K22IL - C.PADA2 AS KNTICH,
		CASE WHEN (A.K21IL + A.K22IL) >= C.PADA2 THEN 1 ELSE 0 END KKCNT,
		CASE WHEN (A.K21IL + A.K22IL) >= C.PADA2 THEN -1*(C.PADA2-(A.K21IL + A.K22IL)) ELSE 0 END KNTICT,
		A.JOGCD
	FROM 
		$LIB2$.HWD072LF A
		LEFT OUTER JOIN $LIB3$.HMD020PF B ON A.SABUN=B.SABUN
		LEFT OUTER JOIN $LIB3$.HUM020PF C ON C.PACOD=#PACOD#
		LEFT OUTER JOIN $LIB2$.MST650PF D ON A.DPTCD=D.DPCODE AND D.DPCOMP=#COMPS#
	WHERE
		A.DPTCD=#DPCODE#
	</select>

	<select id="selectHWB253Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
		A.DPCDC, TRIM(MAX(B.DPCONM)) AS DPCONM, A.SEDYM, MAX(C.COUNTB) AS COUNTB,
		SUM(CASE WHEN A.PRCDD='01' THEN GETTM ELSE 0 END) AS D00,
		SUM(CASE WHEN A.PRCDD='02' THEN GETTM ELSE 0 END) AS D01,
		SUM(CASE WHEN A.PRCDD='03' THEN GETTM ELSE 0 END) AS D02,
		SUM(CASE WHEN A.PRCDD='04' THEN GETTM ELSE 0 END) AS D03,
		SUM(CASE WHEN A.PRCDD='05' THEN GETTM ELSE 0 END) AS D04,
		SUM(CASE WHEN A.PRCDD='06' THEN GETTM ELSE 0 END) AS D05,
		SUM(CASE WHEN A.PRCDD='07' THEN GETTM ELSE 0 END) AS D06,
		SUM(CASE WHEN A.PRCDD='08' THEN GETTM ELSE 0 END) AS D07,
		SUM(CASE WHEN A.PRCDD='09' THEN GETTM ELSE 0 END) AS D08,
		SUM(CASE WHEN A.PRCDD='10' THEN GETTM ELSE 0 END) AS D09,
		SUM(CASE WHEN A.PRCDD='11' THEN GETTM ELSE 0 END) AS D10,
		SUM(CASE WHEN A.PRCDD='12' THEN GETTM ELSE 0 END) AS D11,
		SUM(CASE WHEN A.PRCDD='13' THEN GETTM ELSE 0 END) AS D12,
		SUM(CASE WHEN A.PRCDD='14' THEN GETTM ELSE 0 END) AS D13,
		SUM(CASE WHEN A.PRCDD='15' THEN GETTM ELSE 0 END) AS D14,
		SUM(CASE WHEN A.PRCDD='16' THEN GETTM ELSE 0 END) AS D15,
		SUM(CASE WHEN A.PRCDD='17' THEN GETTM ELSE 0 END) AS D16,
		SUM(CASE WHEN A.PRCDD='18' THEN GETTM ELSE 0 END) AS D17,
		SUM(CASE WHEN A.PRCDD='19' THEN GETTM ELSE 0 END) AS D18,
		SUM(CASE WHEN A.PRCDD='20' THEN GETTM ELSE 0 END) AS D19,
		SUM(CASE WHEN A.PRCDD='21' THEN GETTM ELSE 0 END) AS D20,
		SUM(CASE WHEN A.PRCDD='22' THEN GETTM ELSE 0 END) AS D21,
		SUM(CASE WHEN A.PRCDD='23' THEN GETTM ELSE 0 END) AS D22,
		SUM(CASE WHEN A.PRCDD='24' THEN GETTM ELSE 0 END) AS D23,
		SUM(CASE WHEN A.PRCDD='25' THEN GETTM ELSE 0 END) AS D24,
		SUM(CASE WHEN A.PRCDD='26' THEN GETTM ELSE 0 END) AS D25,
		SUM(CASE WHEN A.PRCDD='27' THEN GETTM ELSE 0 END) AS D26,
		SUM(CASE WHEN A.PRCDD='28' THEN GETTM ELSE 0 END) AS D27,
		SUM(CASE WHEN A.PRCDD='29' THEN GETTM ELSE 0 END) AS D28,
		SUM(CASE WHEN A.PRCDD='30' THEN GETTM ELSE 0 END) AS D29,
		SUM(CASE WHEN A.PRCDD='31' THEN GETTM ELSE 0 END) AS D30,
		SUM(GETTM) AS DDTT
	FROM(
		SELECT 
			A.DPCDC, A.SEDAT, A.SEDYM, B.PRCDD, B.PAYMK,
			SUM(ROUND(CASE WHEN B.PAYMK='-' THEN A.K20ILH + A.K21ILH + A.K99ILH
			WHEN B.PAYMK='T' AND  A.K99ILH>0 THEN  A.K20ILH + A.K21ILH + A.K99ILH -4
			WHEN (B.PAYMK='S' OR B.PAYMK='H') THEN A.K22ILH + A.K23ILH ELSE 0 END,0)) AS GETTM
		FROM 
			$LIB2$.FAC011LF A
			LEFT OUTER JOIN $LIB2$.MST091LF B ON A.SEDAT=B.PRCDT AND B.COMPS=#COMPS#
		WHERE
			A.SEDYM=$SEDYM$
		GROUP BY A.DPCDC, A.SEDAT,A.SEDYM, B.PRCDD, B.PAYMK
		ORDER BY A.DPCDC, A.SEDAT) A
		LEFT OUTER JOIN $LIB2$.MST650PF B ON A.DPCDC=B.DPCODE AND B.DPCOMP=#COMPS#
		LEFT OUTER JOIN (
			SELECT 
				Z.DPCDC, SUBSTR(MAX(Z.SEDAT),7,2) AS MAXSEDAT, COUNT(*)/SUBSTR(MAX(Z.SEDAT),7,2) AS COUNTB
			FROM 
				$LIB2$.FAC011LF Z
			WHERE
			Z.SEDYM = $SEDYM$
			GROUP BY Z.DPCDC) C ON A.DPCDC=C.DPCDC
	GROUP  BY A.DPCDC, A.SEDYM
	ORDER BY A.DPCDC
	</select>
<!-- 
	<select id="selectHAY081" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
			A.SABUN, A.PTJYM, A.ZZ001, A.ZZ002, A.ZZ003, A.ZZ004, A.ZY001, A.ZY002, A.ZY003, A.ZY004, A.ZY005, 
       		A.ZY006, A.ZZ005, A.ZZ006, A.ZZ007, A.ZZ008, A.ZZ009, A.ZZ010, A.ZZ011, A.ZZ012, A.ZZ013, A.ZZ014, A.ZZ018, 
       		A.ZZ019, A.ZZ020, A.ZZ021, A.ZZ022, A.ZZ028, A.ZZ029, A.ZZ030, A.ZZ031, A.ZZ032, A.ZZ033, A.ZZ034, A.ZZ035, 
       		A.ZZ036, A.ZZ037, A.ZZ038, A.ZZ039, A.ZZ040, A.ZZ041, A.ZZ042, A.ZZ043, A.ZZ044, A.ZZ048, A.ZZ049, A.ZZ050, 
       		A.ZZ050A, A.ZZ050B, A.ZZ055A, A.ZZ055B, A.ZZ055C, A.ZZ055M, A.ZZ055N, A.ZZ051, A.ZZ052, A.ZZ053, A.ZZ054, 
      		A.ZZ055, A.ZZ056, A.ZZ057, A.ZZ058, A.ZZ059, A.ZZ060, A.ZZ061, A.ZZ062,  A.ZZ062A, A.ZZ062B, A.ZZ062C, 
       		A.ZZ063, A.ZZ064, A.ZZ065, A.ZZ070, A.ZZ071, A.ZZ071A, A.ZZ071B, A.ZZ071C, A.ZZ071D, A.ZZ072, 
       		A.ZZ073, A.ZZ074, A.ZZ075, A.ZZ076, A.ZZ077, A.ZZ078, A.ZZ079, A.ZZ080, A.ZZ081, A.ZZ082, A.ZZ090, A.ZZ091, 
       		A.ZZ092, A.ZZ093, A.ZZ094, A.ZZ097, A.ZZ100, A.ZZ101, A.ZZ110, A.ZZ111, A.ZZ112, A.ZZ113, A.ZZ114, A.ZZ115, 
       		A.ZZ119, A.ZZ130, A.ZZ131, A.ZZ132, A.ZZ133, A.ZZ134, A.ZZ135, A.ZZ139, B.SABUN, TRIM(B.KORNM) AS KORNM, B.FORCD,  
       		SUBSTR(KORNO,1,6)||'-'||SUBSTR(KORNO,7,7) AS PASSA, B.ENDAT, B.CNDCD, B.CNDAT, B.DPTCD, B.CUADR, C.SABUN, C.PTJYM, C.CHGAD, 
       		C.IJJWN, C.BDMTR, C.BDYT1, C.BDYT2, C.WFBCD, C.CHBCD, C.PTBCD, C.KYBCA, C.KYBCB, C.TRBCD, C.BUBCD, C.SOSCD, 
       		C.CBUCD, C.BYFL1, C.BYFL2, C.POFL1, C.POFL2, C.PGPPC, C.PGPRC, C.PHOSA, C.PHOSB, C.PEDUA, C.PEDUB, C.PNHOU, 
       		C.PNMOU, C.PNHU1, C.PNHU2, C.PNHU3, C.PNHU4, C.WDISA, C.KIBMA, C.KIBMB, C.KIBMC, C.KIBMD, 
       		C.SOFL1, C.SOFL2, C.YUNG1, C.YUNG2, C.JUNTJ, C.SINYN, C.CASHN, C.JIGBN, C.JIRON, C.SPFCD,
       		C.KITA1, C.KITA2, C.TJMON, C.THMON, C.TGMON, C.JENGN, C.KIBUA, C.TOBM1, C.TOBM2, C.RPNM1, 
       		(C.RNOA1||'-'||C.RNOB1||'-'||C.RNOC1) AS RNOA1, C.ERILM, A.ZX001, A.ZX002, A.ZX005,
       		C.RPAT1, C.RBAT1, C.RGB11, C.RT1X1, C.RT1X2, C.RT1X3, C.RG1P1, C.RG1P2, C.RG1P3, C.RG1P4, 
       		C.RGB12, C.RPNM2, (C.RNOA2||'-'||C.RNOB2||'-'||C.RNOC2) AS RNOA2, 
       		C.RPAT2, C.RBAT2, C.RGB21, C.RT2X1, C.RT2X2, C.RT2X3, C.RG2P1, 
       		C.RG2P2, C.RG2P3, C.RG2P4, C.RGB22, C.SIDAT, C.SSDAT, D.DPCONM, D.DPSQNO 
    FROM 
       		$LIB3$.HAY081PF A INNER JOIN  $LIB3$.HMD020PF B ON A.SABUN = B.SABUN 
		    				  INNER JOIN  $LIB3$.HAY011PF C ON A.SABUN = C.SABUN 
		       				  INNER JOIN  $LIB2$.MST650PF D ON B.DPTCD = D.DPCODE 
		       				  LEFT JOIN $LIB3$.HAY021PF E ON A.SABUN = E.SABUN
    WHERE 
    		D.DPCOMP = #COMPS# AND E.RELCD = 10
    		<isNotEmpty prepend="AND" property="SABUN">
				A.SABUN=$SABUN$
			</isNotEmpty>   
			<isNotEmpty prepend="AND" property="FORCD">
				B.FORCD=$FORCD$
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="DPTCD1">
				B.DPTCD <![CDATA[>=]]> #DPTCD1# AND B.DPTCD <![CDATA[<=]]> #DPTCD1#
			</isNotEmpty> 
			<isNotEmpty prepend="AND" property="PAYCD">
				B.PAYCD=$PAYCD$
			</isNotEmpty>
    ORDER  BY A.PTJYM, B.FORCD, D.DPSQNO, B.DPTCD, B.SEXCD DESC, A.SABUN
	</select>
	
	<select id="selectHAY021" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
			A.SABUN, TRIM(A.RELNM) AS RELNM, A.RELNO, A.KIBCD, A.KYBNO, A.BTPNO, A.PGPSK, A.SPFCD, A.KIBCU,
			A.PHOSK, A.PEDSK, A.PSISK, A.JIGBK, A.CJANU, A.KIBAK, A.KIBAU, A.KIBCK, 
			SUBSTR(A.KORNO,7,1) AS KORNO, TRIM((SUBSTR(A.KORNO,1,6)||'-'||SUBSTR(A.KORNO,7,13))) AS KORNO1, 
			A.BUBNO, A.TRBNO, A.CBUNO, A.PGPSU, A.PHOSU, A.KIBCK, 
			A.PEDSU, A.PSISU, A.JIKBU, A.KIBBK, A.KIBBU, A.KIBDK, A.KIBDU, A.JIROU, A.CSHSU,
			A.CSHSK, A.CJANK, A.CJANU, A.PBTSK, A.PBTSU,
			(SELECT COUNT(TRBNO) FROM $LIB3$.HAY021PF WHERE TRBNO > 0 AND SABUN = A.SABUN) AS TRBNO1			
	FROM 
			$LIB3$.HAY021PF A INNER JOIN $LIB3$.HAY011PF B ON A.SABUN = B.SABUN
	 		
	 		<isNotEmpty property="SABUN">
	WHERE			A.SABUN=$SABUN$
			</isNotEmpty>
	ORDER BY A.RELNO
	</select>
	
	<select id="selectHAY200" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
 			A.SABUN, A.PTJYM, A.ZZ001, A.ZZ002, A.ZZ003, A.ZZ004, A.ZY001, A.ZY002, A.ZY003, A.ZY004, A.ZY005, 
      		A.ZY006, A.ZZ005, A.ZZ006, A.ZZ007, A.ZZ008, A.ZZ009, A.ZZ010, A.ZZ011, A.ZZ012, A.ZZ013, A.ZZ014, A.ZZ018, 
       		A.ZZ019, A.ZZ020, A.ZZ021, A.ZZ022, A.ZZ028, A.ZZ029, A.ZZ030, A.ZZ031, A.ZZ032, A.ZZ033, A.ZZ034, A.ZZ035, 
       		A.ZZ036, A.ZZ037, A.ZZ038, A.ZZ039, A.ZZ040, A.ZZ041, A.ZZ042, A.ZZ043, A.ZZ044, A.ZZ048, A.ZZ049, A.ZZ050, 
       		A.ZZ050A, A.ZZ050B, A.ZZ055A, A.ZZ055B, A.ZZ055C, A.ZZ055M, A.ZZ055N, A.ZZ051, A.ZZ052, A.ZZ053, A.ZZ054, 
      		A.ZZ055, A.ZZ056, A.ZZ057, A.ZZ058, A.ZZ059, A.ZZ060, A.ZZ061, A.ZZ062,  A.ZZ062A, A.ZZ062B, A.ZZ062C, 
       		A.ZZ063, A.ZZ064, A.ZZ065, A.ZZ070, A.ZZ071, A.ZZ071A, A.ZZ071B, A.ZZ071C, A.ZZ071D, A.ZZ072, 
       		A.ZZ073, A.ZZ074, A.ZZ075, A.ZZ076, A.ZZ077, A.ZZ078, A.ZZ079, A.ZZ080, A.ZZ081, A.ZZ082, A.ZZ090, A.ZZ091, 
       		A.ZZ092, A.ZZ093, A.ZZ094, A.ZZ097, A.ZZ100, A.ZZ101, A.ZZ110, A.ZZ111, A.ZZ112, A.ZZ113, A.ZZ114, A.ZZ115, 
       		A.ZZ119, A.ZZ130, A.ZZ131, A.ZZ132, A.ZZ133, A.ZZ134, A.ZZ135, A.ZZ139, B.SABUN, TRIM(B.KORNM) AS KORNM, B.FORCD,  
       		// (SUBSTR(B.PASSA,3,6)||'-'||B.PASSB|| B.PASSC) AS PASSA,
       		SUBSTR(B.PASSA,3,6)||'-'||B.PASSB || REPEAT('0', 6-length(trim(char(B.PASSC)))) || B.PASSC AS PASSA,
       		B.ENDAT, B.CNDCD, B.CNDAT, B.DPTCD, B.CUADR, C.SABUN, C.PTJYM, C.CHGAD, 
       		C.IJJWN, C.BDMTR, C.BDYT1, C.BDYT2, C.WFBCD, C.CHBCD, C.PTBCD, C.KYBCA, C.KYBCB, C.TRBCD, C.BUBCD, C.SOSCD, 
       		C.CBUCD, C.BYFL1, C.BYFL2, C.POFL1, C.POFL2, C.PGPPC, C.PGPRC, C.PHOSA, C.PHOSB, C.PEDUA, C.PEDUB, C.PNHOU, 
       		C.PNMOU, C.PNHU1, C.PNHU2, C.PNHU3, C.PNHU4, C.WDISA, C.KIBMA, C.KIBMB, C.KIBMC, C.KIBMD, 
       		C.SOFL1, C.SOFL2, C.YUNG1, C.YUNG2, C.JUNTJ, C.SINYN, C.CASHN, C.JIGBN, C.JIRON, 
       		C.KITA1, C.KITA2, C.TJMON, C.THMON, C.TGMON, C.JENGN, C.KIBUA, C.TOBM1, C.TOBM2, C.RPNM1, 
       		(C.RNOA1||'-'||C.RNOB1||'-'||C.RNOC1) AS RNOA1, 
       		C.RPAT1, C.RBAT1, C.RGB11, C.RT1X1, C.RT1X2, C.RT1X3, C.RG1P1, C.RG1P2, C.RG1P3, C.RG1P4, 
       		C.RGB12, C.RPNM2, (C.RNOA2||'-'||C.RNOB2||'-'||C.RNOC2) AS RNOA2, 
       		C.RPAT2, C.RBAT2, C.RGB21, C.RT2X1, C.RT2X2, C.RT2X3, C.RG2P1, 
       		C.RG2P2, C.RG2P3, C.RG2P4, C.RGB22, C.SIDAT, C.SSDAT, D.DPCONM, D.DPSQNO
	FROM 
			$LIB3$.HAY200PF A INNER JOIN $LIB3$.HMD020PF B ON A.SABUN = B.SABUN 
                              INNER JOIN $LIB3$.HAY100PF C ON A.SABUN = C.SABUN AND A.PTJYM = C.PTJYM
			                  INNER JOIN $LIB2$.MST650PF D ON B.DPTCD = D.DPCODE 
	WHERE
			A.PTJYM = $PTJYM$ AND D.DPCOMP = #COMPS#
	 		<isNotEmpty prepend="AND" property="SABUN">
				A.SABUN=$SABUN$
			</isNotEmpty>   
			<isNotEmpty prepend="AND" property="FORCD">
				B.FORCD=$FORCD$
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="DPTCD1">
				B.DPTCD <![CDATA[>=]]> #DPTCD1# AND B.DPTCD <![CDATA[<=]]> #DPTCD1#
			</isNotEmpty> 
			<isNotEmpty prepend="AND" property="PAYCD">
				B.PAYCD=$PAYCD$
			</isNotEmpty>
	ORDER BY A.PTJYM, B.FORCD, D.DPSQNO, B.DPTCD, B.SEXCD DESC, A.SABUN
	</select>
 -->	
	<select id="selectHMD020_rep" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
                TRIM(A.KORNM) AS KORNM, TRIM(A.CHRNM) AS CHRNM, A.SEXCD, TRIM(A.SIKCM) AS SIKCM,
                (CASE WHEN A.SEXCD = 'M' THEN '남' ELSE '여' END) AS SEX, TRIM(A.ORADR) AS ORADR,
                (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'RGCD' || A.CHOCD) AS PCONT,
                (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'ITCD' || A.CHMCD) AS CHMCD,
                A.TALLM, A.WEIGT, A.LEEYE, A.RIEYE, A.BLDTY, A.BDYCT, TRIM(A.CUADR) AS CUADR, A.TELNB,
                (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'OSCD' || A.FYGCD) AS FYGCD,
                (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'MTCD' || A.FVRCD) AS FVRCD,
                (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'MSCD' || A.FBGCD) AS FBGCD,
                (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'DRCD' || A.FCLCD) AS FCLCD,
                A.FIDAT, A.FODAT, TRIM(B.DPDPNM) AS DPNM, A.GRADE, A.GNDAT, A.PASSA,
                (SUBSTR(A.PASSA,3,6) || '-' || A.PASSB || A.PASSC) AS JUMIN, TRIM(A.HONIN) AS HONIN, A.SABUN,
                (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'ODCD' || A.GRADE) AS GRANM
		FROM 
				$LIB3$.HMD020PF A INNER JOIN $LIB2$.MST650PF B ON A.DPTCD = B.DPCODE  
		WHERE 
				A.SABUN=$SABUN$	
				AND B.DPCOMP = #COMPS#				
	</select>
	
	<select id="selectHMD160_rep" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
				TRIM(A.RELNM) AS RELNM, A.BRDAT, A.LIVCD, A.SUBCD,
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'FMCD' || A.RELCD) AS RELCD,
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'SSCD' || A.HAKCD) AS HAKCD,
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'JBCD' || A.JOBCD) AS JOBCD
		FROM 
				$LIB3$.HMD160PF A
		WHERE 
				A.SABUN = $SABUN$
		FETCH FIRST 5 ROWS ONLY
	</select>
	
	<select id="selectHMD150_rep" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'SSCD' || A.SCHCD) AS SCHCD,
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'BPCD' || A.ADRCD) AS ADRCD,
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'MJCD' || A.MAJCD) AS MAJCD,
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'GDCD' || A.GRDCD) AS GRDCD,
				A.OUDAT, TRIM(A.SCHNM) AS SCHNM, TRIM(A.GRDCM) AS GRDCM
		FROM 
				$LIB3$.HMD150PF A
		WHERE 
				A.SABUN = $SABUN$
		FETCH FIRST 2 ROWS ONLY
	</select>
	
	<select id="selectHMD170_rep" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
				(CASE WHEN GUBCD = '1' THEN '1사외' ELSE '2사내' END) AS GUBCD, 
				ISDAT, OSDAT, PLANM, DEPNM, GRANM, WRKNM
		FROM 
				$LIB3$.HMD170PF
		WHERE 
				SABUN = $SABUN$
		ORDER BY ISDAT
		FETCH FIRST 2 ROWS ONLY
	</select>
	
	<select id="selectHMD180_rep" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
				(CASE WHEN LCSCD <![CDATA[<]]> 10 THEN (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'QFCD0' || LCSCD) 
				ELSE (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'QFCD' || LCSCD) END) AS LCSCD,
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'QDCD' || LCSCL) AS LCSCL,
				GTDAT, TRIM(LCSNB) AS LCSNB, LCSPL
		FROM 
				$LIB3$.HMD180PF
		WHERE 
				SABUN = $SABUN$
		FETCH FIRST 2 ROWS ONLY
	</select>
	
	<select id="selectHMD200_rep" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'EMCD' || EDTCD) AS EDTCD,
				ESDAT, EEDAT, TRIM(EDTPL) AS EDTPL, EDTNM, EDPOT, EDCLS
		FROM 
				$LIB3$.HMD200PF
		WHERE 
				SABUN = $SABUN$
		ORDER BY ESDAT DESC
		FETCH FIRST 3 ROWS ONLY	
	</select>
	
	<select id="selectHMD230_rep" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		(SELECT 
				'징계' AS GUBUN, DCPMN, TRIM(DCPSY) AS DCPSY,
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'DPCD0' || DCPCD) AS DCPCD,
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'DPKD' || DCPKD) AS DCPKD
		FROM 
				$LIB3$.HMD230PF
		WHERE 
				SABUN = $SABUN$
		UNION ALL
		SELECT 
				'포상' AS GUBUN, PRZMN, TRIM(PRZSY) AS PRZSY,
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'FSCD0' || PRZCD) AS PRZCD,
				PRZNY
		FROM 
				$LIB3$.HMD240PF
		WHERE 
				SABUN = $SABUN$)
		FETCH FIRST 3 ROWS ONLY	
	</select>
	
	<select id="selectHMD190_rep" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
				LSDAT, LLDAT, LDPOT,
				(SELECT TRIM(PCONT) FROM PSEDBLIB.HUM010PF WHERE PCODE = 'LMCD0' || LDTCD) AS LDTCD
		FROM 
				$LIB3$.HMD190PF
		WHERE 
				SABUN = $SABUN$
		FETCH FIRST 2 ROWS ONLY
	</select>
	
	<select id="selectHMD220_rep" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT A.APDAT, A.APDCL, A.APDWK, A.APDDL
		FROM (
				<isEqual property="COMPS" compareValue="PE">
		 		SELECT APDAT, TRIM(APDCL) AS APDCL, APDWK, TRIM(APDDL) AS APDDL
		 		FROM $LIB3$.HMD220PF
		 		WHERE	SABUN = '$SABUN$' AND APDCD IN (12)	
				</isEqual>
	    		<isNotEqual property="COMPS" compareValue="PE">
				SELECT UPDAT AS APDAT, (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'ODCD' || UGRAD) AS APDCL, '' AS APDWK, '' AS APDDL  
				FROM $LIB3$.HMD210PF
				WHERE SABUN = '$SABUN$'
				</isNotEqual>
			) A
		ORDER BY A.APDAT		
		FETCH FIRST 10 ROWS ONLY
	</select>
	
	<select id="selectHMD260_rep" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
				ADVYY, ADVPT, ADVET
		FROM 
				$LIB3$.HMD260PF
		WHERE 
				SABUN = $SABUN$
		ORDER BY ADVYY DESC
		FETCH FIRST 3 ROWS ONLY	
	</select>
	
	<select id="selectHMD270_rep" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
				(SELECT TRIM(PCONT) FROM PSEDBLIB.HUM010PF WHERE PCODE = 'SICD0' || SICGB) AS SICGB,
				SICYY, FRSDT, TOSDT, TRIM(SICET) AS SICET
		FROM 
				$LIB3$.HMD270PF
		WHERE 
				SABUN = $SABUN$
		FETCH FIRST 3 ROWS ONLY		
	</select>
	
	<select id="selectHPC200_rep" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
				KNYYM, (GRADEP || HOBONP) AS HOBONP, GYBONP, KIBONP, CJSUDP, HASUDP, WHSUDP, TESUDP,  
				JMSUDP, JKSUDP, GSSUDP, BJSUDP, QLSUDP, TQSUDP, WFSUDP, YHSUDP, DOSUDP, GTSUDP, OTSUDP,
				PAMTTP
		FROM 
				$LIB3$.HPC200PF
		WHERE 
				SUBSTR(KNYYM,5,2) = '04'
				AND	PTYPE = 'P0'				
				AND SABUN = $SABUN$					
		ORDER BY KNYYM DESC
		FETCH FIRST 10 ROWS ONLY	
	</select>
<!--  	
	<select id="selectHAY081_1" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
			A.SABUN, A.PTJYM, A.ZZ001, A.ZZ002, A.ZZ003, A.ZZ004, A.ZY001, A.ZY002, A.ZY003, A.ZY004, A.ZY005, 
       		A.ZY006, A.ZZ005, A.ZZ006, A.ZZ007, A.ZZ008, A.ZZ009, A.ZZ010, A.ZZ011, A.ZZ012, A.ZZ013, A.ZZ014, A.ZZ018, 
       		A.ZZ019, A.ZZ020, A.ZZ021, A.ZZ022, A.ZZ028, A.ZZ029, A.ZZ030, A.ZZ031, A.ZZ032, A.ZZ033, A.ZZ034, A.ZZ035, 
       		A.ZZ036, A.ZZ037, A.ZZ038, A.ZZ039, A.ZZ040, A.ZZ041, A.ZZ042, A.ZZ043, A.ZZ044, A.ZZ048, A.ZZ049, A.ZZ050, 
       		A.ZZ050A, A.ZZ050B, A.ZZ055A, A.ZZ055B, A.ZZ055C, A.ZZ055M, A.ZZ055N, A.ZZ051, A.ZZ052, A.ZZ053, A.ZZ054, 
      		A.ZZ055, A.ZZ056, A.ZZ057, A.ZZ058, A.ZZ059, A.ZZ060, A.ZZ061, A.ZZ062,  A.ZZ062A, A.ZZ062B, A.ZZ062C, 
       		A.ZZ063, A.ZZ064, A.ZZ065, A.ZZ070, A.ZZ071, A.ZZ071A, A.ZZ071B, A.ZZ071C, A.ZZ071D, A.ZZ072, 
       		A.ZZ073, A.ZZ074, A.ZZ075, A.ZZ076, A.ZZ077, A.ZZ078, A.ZZ079, A.ZZ080, A.ZZ081, A.ZZ082, A.ZZ090, A.ZZ091, 
       		A.ZZ092, A.ZZ093, A.ZZ094, A.ZZ097, A.ZZ100, A.ZZ101, A.ZZ110, A.ZZ111, A.ZZ112, A.ZZ113, A.ZZ114, A.ZZ115, 
       		A.ZZ119, A.ZZ130, A.ZZ131, A.ZZ132, A.ZZ133, A.ZZ134, A.ZZ135, A.ZZ139, B.SABUN, TRIM(B.KORNM) AS KORNM, B.FORCD,  
			// (SUBSTR(B.PASSA,3,6)||'-'||B.PASSB|| B.PASSC) AS PASSA, 
       		SUBSTR(B.PASSA,3,6)||'-'||B.PASSB || REPEAT('0', 6-length(trim(char(B.PASSC)))) || B.PASSC AS PASSA,
       		B.ENDAT, B.CNDCD, B.CNDAT, B.DPTCD, B.CUADR, C.SABUN, C.PTJYM, C.CHGAD, 
       		C.IJJWN, C.BDMTR, C.BDYT1, C.BDYT2, C.WFBCD, C.CHBCD, C.PTBCD, C.KYBCA, C.KYBCB, C.TRBCD, C.BUBCD, C.SOSCD, 
       		C.CBUCD, C.BYFL1, C.BYFL2, C.POFL1, C.POFL2, C.PGPPC, C.PGPRC, C.PHOSA, C.PHOSB, C.PEDUA, C.PEDUB, C.PNHOU, 
       		C.PNMOU, C.PNHU1, C.PNHU2, C.PNHU3, C.PNHU4, C.WDISA, C.KIBMA, C.KIBMB, C.KIBMC, C.KIBMD, 
       		C.SOFL1, C.SOFL2, C.YUNG1, C.YUNG2, C.JUNTJ, C.SINYN, C.CASHN, C.JIGBN, C.JIRON, C.SPFCD,
       		C.KITA1, C.KITA2, C.TJMON, C.THMON, C.TGMON, C.JENGN, C.KIBUA, C.TOBM1, C.TOBM2, C.RPNM1, 
       		(C.RNOA1||'-'||C.RNOB1||'-'||C.RNOC1) AS RNOA1, C.ERILM,
       		C.RPAT1, C.RBAT1, C.RGB11, C.RT1X1, C.RT1X2, C.RT1X3, C.RG1P1, C.RG1P2, C.RG1P3, C.RG1P4, 
       		C.RGB12, C.RPNM2, (C.RNOA2||'-'||C.RNOB2||'-'||C.RNOC2) AS RNOA2, 
       		C.RPAT2, C.RBAT2, C.RGB21, C.RT2X1, C.RT2X2, C.RT2X3, C.RG2P1, 
       		C.RG2P2, C.RG2P3, C.RG2P4, C.RGB22, C.SIDAT, C.SSDAT, D.DPCONM, D.DPSQNO 
    FROM 
       		$LIB3$.HAY081PF A INNER JOIN  $LIB3$.HMD020PF B ON A.SABUN = B.SABUN 
		    				  INNER JOIN  $LIB3$.HAY011PF C ON A.SABUN = C.SABUN 
		       				  INNER JOIN  $LIB2$.MST650PF D ON B.DPTCD = D.DPCODE
		       				  INNER JOIN  PSZDBLIB.M_USR_TID E ON A.SABUN = E.TEL_NO1 
   WHERE 
    		D.DPCOMP = #COMPS# AND E.USER_ID = #USER_ID# 
   ORDER  BY 
   			A.PTJYM, B.FORCD, D.DPSQNO, B.DPTCD, B.SEXCD DESC, A.SABUN
	</select>
	
	<select id="selectHAY200_1" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
 			A.SABUN, A.PTJYM, A.ZZ001, A.ZZ002, A.ZZ003, A.ZZ004, A.ZY001, A.ZY002, A.ZY003, A.ZY004, A.ZY005, 
      		A.ZY006, A.ZZ005, A.ZZ006, A.ZZ007, A.ZZ008, A.ZZ009, A.ZZ010, A.ZZ011, A.ZZ012, A.ZZ013, A.ZZ014, A.ZZ018, 
       		A.ZZ019, A.ZZ020, A.ZZ021, A.ZZ022, A.ZZ028, A.ZZ029, A.ZZ030, A.ZZ031, A.ZZ032, A.ZZ033, A.ZZ034, A.ZZ035, 
       		A.ZZ036, A.ZZ037, A.ZZ038, A.ZZ039, A.ZZ040, A.ZZ041, A.ZZ042, A.ZZ043, A.ZZ044, A.ZZ048, A.ZZ049, A.ZZ050, 
       		A.ZZ050A, A.ZZ050B, A.ZZ055A, A.ZZ055B, A.ZZ055C, A.ZZ055M, A.ZZ055N, A.ZZ051, A.ZZ052, A.ZZ053, A.ZZ054, 
      		A.ZZ055, A.ZZ056, A.ZZ057, A.ZZ058, A.ZZ059, A.ZZ060, A.ZZ061, A.ZZ062,  A.ZZ062A, A.ZZ062B, A.ZZ062C, 
       		A.ZZ063, A.ZZ064, A.ZZ065, A.ZZ070, A.ZZ071, A.ZZ071A, A.ZZ071B, A.ZZ071C, A.ZZ071D, A.ZZ072, 
       		A.ZZ073, A.ZZ074, A.ZZ075, A.ZZ076, A.ZZ077, A.ZZ078, A.ZZ079, A.ZZ080, A.ZZ081, A.ZZ082, A.ZZ090, A.ZZ091, 
       		A.ZZ092, A.ZZ093, A.ZZ094, A.ZZ097, A.ZZ100, A.ZZ101, A.ZZ110, A.ZZ111, A.ZZ112, A.ZZ113, A.ZZ114, A.ZZ115, 
       		A.ZZ119, A.ZZ130, A.ZZ131, A.ZZ132, A.ZZ133, A.ZZ134, A.ZZ135, A.ZZ139, B.SABUN, TRIM(B.KORNM) AS KORNM, B.FORCD,  
			//(SUBSTR(B.PASSA,3,6)||'-'||B.PASSB|| B.PASSC) AS PASSA, 
       		SUBSTR(B.PASSA,3,6)||'-'||B.PASSB || REPEAT('0', 6-length(trim(char(B.PASSC)))) || B.PASSC AS PASSA,
       		B.ENDAT, B.CNDCD, B.CNDAT, B.DPTCD, B.CUADR, C.SABUN, C.PTJYM, C.CHGAD, 
       		C.IJJWN, C.BDMTR, C.BDYT1, C.BDYT2, C.WFBCD, C.CHBCD, C.PTBCD, C.KYBCA, C.KYBCB, C.TRBCD, C.BUBCD, C.SOSCD, 
       		C.CBUCD, C.BYFL1, C.BYFL2, C.POFL1, C.POFL2, C.PGPPC, C.PGPRC, C.PHOSA, C.PHOSB, C.PEDUA, C.PEDUB, C.PNHOU, 
       		C.PNMOU, C.PNHU1, C.PNHU2, C.PNHU3, C.PNHU4, C.WDISA, C.KIBMA, C.KIBMB, C.KIBMC, C.KIBMD, 
       		C.SOFL1, C.SOFL2, C.YUNG1, C.YUNG2, C.JUNTJ, C.SINYN, C.CASHN, C.JIGBN, C.JIRON, 
       		C.KITA1, C.KITA2, C.TJMON, C.THMON, C.TGMON, C.JENGN, C.KIBUA, C.TOBM1, C.TOBM2, C.RPNM1, 
       		(C.RNOA1||'-'||C.RNOB1||'-'||C.RNOC1) AS RNOA1, 
       		C.RPAT1, C.RBAT1, C.RGB11, C.RT1X1, C.RT1X2, C.RT1X3, C.RG1P1, C.RG1P2, C.RG1P3, C.RG1P4, 
       		C.RGB12, C.RPNM2, (C.RNOA2||'-'||C.RNOB2||'-'||C.RNOC2) AS RNOA2, 
       		C.RPAT2, C.RBAT2, C.RGB21, C.RT2X1, C.RT2X2, C.RT2X3, C.RG2P1, 
       		C.RG2P2, C.RG2P3, C.RG2P4, C.RGB22, C.SIDAT, C.SSDAT, D.DPCONM, D.DPSQNO
	FROM 
			$LIB3$.HAY200PF A INNER JOIN $LIB3$.HMD020PF B ON A.SABUN = B.SABUN 
                              INNER JOIN $LIB3$.HAY100PF C ON A.SABUN = C.SABUN AND A.PTJYM = C.PTJYM
			                  INNER JOIN $LIB2$.MST650PF D ON B.DPTCD = D.DPCODE 
			                  INNER JOIN  PSZDBLIB.M_USR_TID E ON A.SABUN = E.TEL_NO1 
	WHERE
			A.PTJYM = $PTJYM$ AND D.DPCOMP = #COMPS# AND E.USER_ID = #USER_ID# 
	ORDER BY 
			A.PTJYM, B.FORCD, D.DPSQNO, B.DPTCD, B.SEXCD DESC, A.SABUN
	</select>
	
	<select id="selectHAY021_1" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
			A.SABUN, TRIM(A.RELNM) AS RELNM, A.RELNO, A.KIBCD, A.KYBNO, A.BTPNO, A.PGPSK, A.SPFCD, A.KIBCU,
			A.PHOSK, A.PEDSK, A.PSISK, A.JIGBK, A.CJANU, A.KIBAK, A.KIBAU, A.KIBCK, 
			SUBSTR(A.KORNO,7,1) AS KORNO, TRIM((SUBSTR(A.KORNO,1,6)||'-'||SUBSTR(A.KORNO,7,13))) AS KORNO1, 
			A.BUBNO, A.TRBNO, A.CBUNO, A.PGPSU, A.PHOSU, A.KIBCK, 
			A.PEDSU, A.PSISU, A.JIKBU, A.KIBBK, A.KIBBU, A.KIBDK, A.KIBDU, A.JIROU, A.CSHSU,
			A.CSHSK, A.CJANK, A.CJANU, A.PBTSK, A.PBTSU,
			(SELECT COUNT(TRBNO) FROM $LIB3$.HAY021PF WHERE TRBNO > 0 AND SABUN = A.SABUN) AS TRBNO1	
	FROM 
			$LIB3$.HAY021PF A INNER JOIN $LIB3$.HAY011PF B ON A.SABUN = B.SABUN
							  INNER JOIN PSZDBLIB.M_USR_TID C ON A.SABUN = C.TEL_NO1 
	WHERE	
			C.USER_ID = #USER_ID# 
	ORDER BY A.RELNO
	</select>
-->
	<select id="selectHMP100" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
			A.SABUN, A.SEXCDN, B.KORNM, A.GRADEN, A.JICCDN,
			(SELECT TRIM(PCONT) FROM PSCDBLIB.HUM010PF WHERE PCODE = 'ODCD' || A.GRADEN) AS GRADNAME,
			(SELECT TRIM(PCONT) FROM PSCDBLIB.HUM010PF WHERE PCODE = 'JCCD' || A.JICCDN) AS JICNAME,
			'' AS HUJIC, '' AS BUDGET, A.PYTCDN, A.PY1CDN, A.PY2CDN, A.PY3CDN, A.FOKCDN, A.FORCTN
	FROM 
			PSCDBLIB.HMP100PF A INNER JOIN PSCDBLIB.HMD020PF B ON A.SABUN = B.SABUN
	WHERE
			A.COMPS='C1' AND
			A.KDYYM=201403 
		 	<isNotEmpty prepend="AND" property="SABUN">
				A.SABUN=$SABUN$
			</isNotEmpty>	
	</select>
	
	<select id="selectCODE1" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
			RIGHT(TRIM(PCODE),2) AS PCODE, TRIM(PCONT) AS PCONT
	FROM 
			PSCDBLIB.HUM010PF
	WHERE 
			PCODE LIKE 'ODCD%'
	ORDER BY PCODE
	</select>
	
	<select id="selectCODE2" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
			RIGHT(TRIM(PCODE),2) AS PCODE, TRIM(PCONT) AS PCONT
	FROM 
			PSCDBLIB.HUM010PF
	WHERE 
			PCODE LIKE 'JCCD%'
	ORDER BY PCODE
	</select>
	
	<select id="selectNewGateAccessData" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	<!-- 2015.07.03 수정 : FLAG오류
	SELECT 
			DISTINCT B.SABUN, A.ACKTIME, A.EQCODE, A.FLAG1
	FROM 
			T_SECOM_ALARM A LEFT JOIN T_SECOM_PERSON B ON A.CARDNO = B.CARDNO
	WHERE
			SUBSTRING(A.ACKTIME,0,9) = #ACKTIME# AND
			B.SABUN <![CDATA[<>]]> '0' AND B.SABUN <![CDATA[<>]]> '' AND
			B.EMPLOYTYPE = '0' AND B.TEAM <![CDATA[<>]]> '000' 
	-->
	SELECT 
			DISTINCT B.SABUN, A.ACKTIME, A.EQCODE, A.FLAG1,
			CASE WHEN 
			A.FLAG1=2 THEN 3 WHEN A.FLAG1=3 THEN 7 WHEN A.FLAG1=4 THEN 6 WHEN A.FLAG1=5 THEN 2 ELSE A.FLAG1 END FLAG_NEW
	FROM 
			<!-- 2017.02.02 DIKR(006)/DNKA(005) 사용자 제외
			T_SECOM_ALARM A LEFT JOIN T_SECOM_PERSON B ON A.CARDNO = B.CARDNO
			-->
			T_SECOM_ALARM A LEFT JOIN T_SECOM_PERSON B ON A.CARDNO = B.CARDNO AND B.TEAM NOT IN ('006','005')
	WHERE
			SUBSTRING(A.ACKTIME,0,9) = #ACKTIME# AND
			B.SABUN <![CDATA[<>]]> '0' AND B.SABUN <![CDATA[<>]]> '' AND
			B.EMPLOYTYPE = '0' AND B.TEAM <![CDATA[<>]]> '000' 	

	</select>
	
	<select id="selectNewGateAccessData_Check" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
			COUNT(*) CNT 
	FROM
			PSEDBLIB.HWB032PF
	WHERE 
			IDNBR = #SABUN# AND TRF02 = #TRF02# AND TRF06 = #TRF06#
	</select>
	
	<insert id="insertNewGateAccessData" parameterClass="java.util.HashMap" >
	
	INSERT INTO PSEDBLIB.HWB032PF (IDNBR, TRF01, TRF02, TRF03, TRF04, TRF05, TRF06, TRF07, TRF08, TRF09, TRF10)
	VALUES (#IDNBR#, '0', #TRF02#, #TRF03#, '', '100', #TRF06#, 
			REPLACE(CHAR(DATE(current date), ISO), '-', ''), 
			REPLACE(CHAR(time(current time), ISO), '.', ':'), '', 
			REPLACE(CHAR(DATE(current date), ISO), '-', ''))
	
	</insert>
	
	<delete id="deleteNewGateAccessData" parameterClass="java.util.HashMap" >
	
	DELETE FROM PSEDBLIB.HWB032PF WHERE IDNBR = #SABUN# AND TRF02 = #TRF02# AND TRF06 = #TRF06#
	
	</delete>
	
	<select id="selectHMDZ200" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
		DIGITS(A.SABUN) AS SABUN, A.ESDAT, A.EEDAT, A.EDTCD, TRIM(A.EDTPL) AS EDTPL,
		TRIM(A.EDTNM) AS EDTNM, A.EDPOT, A.EDCLS, A.EDBCD,
		TRIM(B.KORNM) AS KORNM,
		C.DPSQNO, B.DPTCD, TRIM(C.DPCONM) AS DPCONM, TRIM(C.DPDPNM) AS DPDPNM
	FROM 
		$LIB3$.HMD200PF A
		LEFT OUTER JOIN $LIB3$.HMD020PF B ON A.SABUN=B.SABUN
		LEFT OUTER JOIN $LIB2$.MST650PF C ON B.DPTCD=C.DPCODE AND C.DPCOMP=#COMPS#
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="SABUN">
				A.SABUN =  $SABUN$
			</isNotEmpty>
			<isEqual prepend="AND" property="CNDCD" compareValue="0">
				B.CNDCD != 'R'
			</isEqual>
		</dynamic>
	ORDER BY C.DPSQNO, B.DPTCD, SABUN, A.ESDAT
	</select>
	<select id="selectHMDZ200_Check" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
			COUNT(*) CNT 
	FROM
			$LIB3$.HMD200PF
	WHERE 
			SABUN = $SABUN$ AND ESDAT = $OLD_ESDAT$ AND EEDAT = $OLD_EEDAT$ AND EDTCD = $OLD_EDTCD$
	</select>
	<insert id="insertHMDZ200" parameterClass="java.util.HashMap" >
		INSERT INTO $LIB3$.HMD200PF (SABUN, ESDAT, EEDAT, EDTCD, EDTPL, EDTNM, EDPOT, EDCLS, EDBCD)
		VALUES ($SABUN$, $ESDAT$, $EEDAT$, $EDTCD$, #EDTPL#, #EDTNM#, $EDPOT$, $EDCLS$, #EDBCD#)
	
	</insert>
	<update id="updateHMDZ200" parameterClass="java.util.HashMap" >
	UPDATE $LIB3$.HMD200PF
	SET
		ESDAT=$ESDAT$,
		EEDAT=$EEDAT$,
		EDTCD=$EDTCD$,
		EDTPL=#EDTPL#,
		EDTNM=#EDTNM#,
		EDPOT=$EDPOT$,
		EDCLS=$EDCLS$
	WHERE
		SABUN = $SABUN$ AND ESDAT = $OLD_ESDAT$ AND EEDAT = $OLD_EEDAT$ AND EDTCD = $OLD_EDTCD$
	</update>
	<delete id="deleteHMDZ200" parameterClass="java.util.HashMap" >
	DELETE FROM $LIB3$.HMD200PF
		WHERE SABUN = $SABUN$ AND ESDAT = $OLD_ESDAT$ AND EEDAT = $OLD_EEDAT$ AND EDTCD = $OLD_EDTCD$
	</delete>

	<select id="selectDIONEUSER" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	<!--
	SELECT
		A.SABUN, A.KORNM, A.DPTCD, B.DPCODE, B.DPPAT1, B.DPPAT2, B.DPPAT3
	FROM
		$LIB3$.HMD020PF A
		LEFT OUTER JOIN $LIB2$.MST650PF B ON B.DPCOMP=#COMPS# AND A.DPTCD=B.DPCODE
	WHERE
		A.SABUN =$SABUN$
	 -->
	SELECT 
		TRIM(A.USER_ID) AS DIOID, B.SABUN, B.KORNM, B.DPTCD, B.DPCODE,
		B.DPPAT1, B.DPPAT2, B.DPPAT3, B.PCONT, B.DPDPNM1, B.DPDPNM2
	FROM
		PSZDBLIB.M_USR_TID A,
		(
		SELECT
			CASE WHEN '$COMPS$' !='E1' THEN 
			REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN 
			ELSE REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,		
			A.KORNM, A.DPTCD, B.DPCODE, B.DPPAT1, B.DPPAT2, B.DPPAT3,
			(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'ODCD' || A.GRADE) AS PCONT,
			TRIM(B.DPDPNM) AS DPDPNM1, TRIM(C.DPDPNM) AS DPDPNM2
		FROM
			$LIB3$.HMD020PF A
			LEFT OUTER JOIN $LIB2$.MST650PF B ON B.DPCOMP=#COMPS# AND A.DPTCD=B.DPCODE
			LEFT OUTER JOIN $LIB2$.MST650PF C ON C.DPCOMP=#COMPS# AND B.DPPAT1=C.DPCODE
		WHERE
			A.SABUN =$SABUN$) B
	WHERE
		A.PLANT_CD=#COMPS#
		AND A.TEL_NO1=B.SABUN
		</select>
	 
	<select id="selectHASS04" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		A.COMPS,
		CASE WHEN A.COMPS !='E1' THEN 
				REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN 
				ELSE REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,
		TRIM(A.DIOID) AS DIOID, TRIM(A.BIGO1) AS BIGO1, TRIM(B.KORNM) AS KORNM,
		(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'ODCD' || B.GRADE) AS PCONT,
		B.DPTCD, C.DPPAT1, TRIM(C.DPDPNM) AS DPDPNM1, TRIM(D.DPDPNM) AS DPDPNM2,
		A.MENU_ID, A.USER_YN, C.DPCODE, C.DPPAT2, C.DPPAT3, 
		A.INPDT, A.INPTM, A.INPMN, A.CHGDT, A.CHGTM, A.CHGMN
	FROM
		$LIB2$.HUM090PF A
		LEFT OUTER JOIN $LIB3$.HMD020PF B ON A.SABUN=B.SABUN
		LEFT OUTER JOIN $LIB2$.MST650PF C ON A.COMPS=C.DPCOMP AND B.DPTCD=C.DPCODE
		LEFT OUTER JOIN $LIB2$.MST650PF D ON A.COMPS=D.DPCOMP AND C.DPPAT1=D.DPCODE
	WHERE
		A.COMPS=#COMPS#
		<isNotEmpty prepend="AND" property="DIOID">
		A.DIOID=#DIOID#
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="USER_YN">
		A.USER_YN=#USER_YN#
		</isNotEmpty>
	</select>
	<select id="selectHASS04_Check" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
		COUNT(*) CNT 
	FROM
		$LIB2$.HUM090PF
	WHERE 
		COMPS = #COMPS#
		AND SABUN = $SABUN$
		AND DIOID = #DIOID#
		AND INPDT = $INPDT$
		AND INPTM = $INPTM$
	</select>
	<insert id="insertHASS04" parameterClass="java.util.HashMap" >
	INSERT INTO $LIB2$.HUM090PF (COMPS, SABUN, DIOID, MENU_ID, USER_YN, BIGO1, INPDT, INPTM, INPMN, CHGDT, CHGTM, CHGMN)
	VALUES (#COMPS#, $SABUN$, #DIOID#, #MENU_ID#, #USER_YN#, #BIGO1#, $INPDT$, $INPTM$, #INPMN#,0,0,'')
	 </insert>
	<update id="updateHASS04" parameterClass="java.util.HashMap" >
	UPDATE $LIB2$.HUM090PF
	SET
		USER_YN=#USER_YN#,
		BIGO1=#BIGO1#,
		CHGDT=REPLACE(CHAR(DATE(current date), ISO), '-', ''),
		CHGTM=REPLACE(CHAR(time(current time), ISO), '.', ''),
		CHGMN=#CHGMN#		
	WHERE
		COMPS = #COMPS#
		AND SABUN = $SABUN$
		AND DIOID = #DIOID#
		AND INPDT = $INPDT$
		AND INPTM = $INPTM$
	</update>
	<!-- 
	<delete id="deleteHASS04" parameterClass="java.util.HashMap" >
	DELETE FROM PSDIOLIB.HUM090PF
	WHERE
		COMPS = #COMPS#
		AND DIOID = #DIOID#
	</delete>
	 -->

	<delete id="deleteHAY011UC" parameterClass="java.util.HashMap">
	DELETE 
	FROM
		$LIB3$.HAY011PF
	WHERE 
		SABUN = $SABUN$
		AND PTJYM = $PTJYM$	
	</delete>
	<delete id="deleteHAY021UC" parameterClass="java.util.HashMap">
	DELETE FROM 
		$LIB3$.HAY021PF
	WHERE 
		SABUN = $SABUN$
	</delete>
	<delete id="deleteHAY041UC" parameterClass="java.util.HashMap">
	DELETE FROM 
		$LIB3$.HAY041PF
	WHERE 
		SABUN = $SABUN$	
	</delete>
	<delete id="deleteHAY061UC" parameterClass="java.util.HashMap">
	DELETE FROM 
		$LIB3$.HAY061PF
	WHERE 
		SABUN = $SABUN$	
	</delete>
	<delete id="deleteHAY063UC" parameterClass="java.util.HashMap">
	DELETE FROM 
		$LIB3$.HAY063PF
	WHERE 
		SABUN = $SABUN$	
	</delete>

	<insert id="insertHAY011UC" parameterClass="java.util.HashMap">
	INSERT INTO $LIB3$.HAY011PF
			(SABUN, PTJYM, CHGAD, FORTY, IJJWN, KRWTX, FCWTX, TX1AD, TX3AD, BDMTR, FCWTF, BDYT1, BDYT2, WFBCD, CHBCD,
			 PTBCD, KYBCA, KYBCB, TRBCD, BUBCD, SOSCD, CBUCD, BYFL1, BYFL2, POFL1, POFL2, PGPPC, PGPRC, PHOSA, PHOSB,
			 PEDUA, PEDUB, PNHOU, PNMOU, PNHU1, PNHUA, PNHUM, PNHU2, PNHU3, PNHU4, PNHU5, PNHU6, PNHU7, PNHU8, PNHU9,
			 WDISA, KIBMA, KIBMB, KIBMC, KIBMD, KIBME, KIBOA, KIBOB, KIBOC, KIBOD, KIBOE, SOFL1, SOFL2, YUNG1, YUNG2,
			 JUNTJ, SINYN, CASHN, JIGBN, CJANG, JIRON, HUSA1, HUSA2, HUSA3, HUSA4, KITA1, KITA2, KITA3, KITA4, KITA5,
			 TJMON, THMON, TGMON, JENGN, KIBUA, TOBM1, TOBM2, RPNM1, RNOA1, RNOB1, RNOC1, RDTS1, RDTE1, RPAT1, RBAT1,
			 RGB11, RT1X1, RT1X2, RT1X3, RG1P1, RG1P2, RG1P3, RG1P4, RGB12, RPNM2, RNOA2, RNOB2, RNOC2, RDTS2, RDTE2,
			 RPAT2, RBAT2, RGB21, RT2X1, RT2X2, RT2X3, RG2P1, RG2P2, RG2P3, RG2P4, RGB22, SIDAT, SSDAT, SPFCD, PBTSN,
			 LGSTK, AYSNI, AYSYA, BYSYI, BYSYA,
			 <!-- 2015년도추가 -->
			 CYSYI, CYSYA, DYSYI, DYSYA, EYSYI, EYSYA, PNHU10, PNHU11, PNHU12, PNHU13, KIBPA, KIBPB, KIBPC, KIBPD, KIBPE,
			 <!-- 2016년도추가 -->
			 SNDCD, SMCCD
			 )
	VALUES
			($SABUN$, $PTJYM$, #CHGAD#, $FORTY$, $IJJWN$, $KRWTX$, $FCWTX$, $TX1AD$, $TX3AD$, $BDMTR$, $FCWTF$, $BDYT1$, $BDYT2$, $WFBCD$, $CHBCD$,
			 $PTBCD$, $KYBCA$, $KYBCB$, $TRBCD$, $BUBCD$, $SOSCD$, $CBUCD$, $BYFL1$, $BYFL2$, $POFL1$, $POFL2$, $PGPPC$, $PGPRC$, $PHOSA$, $PHOSB$,
			 $PEDUA$, $PEDUB$, $PNHOU$, $PNMOU$, $PNHU1$, $PNHUA$, $PNHUM$, $PNHU2$, $PNHU3$, $PNHU4$, $PNHU5$, $PNHU6$, $PNHU7$, $PNHU8$, $PNHU9$,
			 $WDISA$, $KIBMA$, $KIBMB$, $KIBMC$, $KIBMD$, $KIBME$, $KIBOA$, $KIBOB$, $KIBOC$, $KIBOD$, $KIBOE$, $SOFL1$, $SOFL2$, $YUNG1$, $YUNG2$,
			 $JUNTJ$, $SINYN$, $CASHN$, $JIGBN$, $CJANG$, $JIRON$, $HUSA1$, $HUSA2$, $HUSA3$, $HUSA4$, $KITA1$, $KITA2$, $KITA3$, $KITA4$, $KITA5$,
			 $TJMON$, $THMON$, $TGMON$, $JENGN$, $KIBUA$, $TOBM1$, $TOBM2$, #RPNM1#, $RNOA1$, $RNOB1$, $RNOC1$, $RDTS1$, $RDTE1$, $RPAT1$, $RBAT1$,
			 $RGB11$, $RT1X1$, $RT1X2$, $RT1X3$, $RG1P1$, $RG1P2$, $RG1P3$, $RG1P4$, $RGB12$, #RPNM2#, $RNOA2$, $RNOB2$, $RNOC2$, $RDTS2$, $RDTE2$,
			 $RPAT2$, $RBAT2$, $RGB21$, $RT2X1$, $RT2X2$, $RT2X3$, $RG2P1$, $RG2P2$, $RG2P3$, $RG2P4$, $RGB22$, $SIDAT$, $SSDAT$, $SPFCD$, $PBTSN$,
			 $LGSTK$, $AYSNI$, $AYSYA$, $BYSYI$, $BYSYA$,
 			 <!-- 2015년도추가 -->
			 $CYSYI$, $CYSYA$, $DYSYI$, $DYSYA$, $EYSYI$, $EYSYA$, $PNHU10$, $PNHU11$, $PNHU12$, $PNHU13$, $KIBPA$, $KIBPB$, $KIBPC$, $KIBPD$, $KIBPE$,
			 <!-- 2016년도추가 -->
			 $SNDCD$, 0
			  )
	</insert>
	<insert id="insertHAY021UC" parameterClass="java.util.HashMap">
	INSERT INTO $LIB3$.HAY021PF
			(SABUN, RELCD, RELNO, RELNM, KORNO, KOCHK, LIVCD, KIBCD, KYANO, KYBNO, TRBNO, BUBNO, CBUNO, BTPNO, CYFL1,
			 CYFL2, CYFL3, PGPCD, PGPSK, PGPSU, PHOCD, PHOSK, PHOSU, PEDCD, PEDSK, PEDSU, PSICD, PSISK, PSISU, CSHSK,
			 CSHSU, JIGCD, JIGBK, JIKBU, CJANU, JIROU, KIBAK, KIBAU, KIBBK, KIBBU, KIBCK, KIBCU, KIBDK, KIBDU, EFL1K,
			 EFL1U, EFL2K, EFL2U, EFL3K, EFL3U, SPFCD, CJANK, PBTSK, PBTSU,
			 AYSIK, AYSIU, AYSAK, AYSAU, BYSIK, BYSIU, BYSAK, BYSAU,
			 <!-- 2015년도추가 -->
			 CYSIK, CYSIU, CYSAK, CYSAU, DYSIK, DYSIU, DYSAK, DYSAU, EYSIK, EYSIU, EYSAK, EYSAU
			 )
	VALUES
			($SABUN$, $RELCD$, $RELNO$, #RELNM#, #KORNO#, #KOCHK#, #LIVCD#, $KIBCD$, $KYANO$, $KYBNO$, $TRBNO$, $BUBNO$, $CBUNO$, $BTPNO$, $CYFL1$,
			 $CYFL2$, $CYFL3$, $PGPCD$, $PGPSK$, $PGPSU$, $PHOCD$, $PHOSK$, $PHOSU$, $PEDCD$, $PEDSK$, $PEDSU$, $PSICD$, $PSISK$, $PSISU$, $CSHSK$,
			 $CSHSU$, $JIGCD$, $JIGBK$, $JIKBU$, $CJANU$, $JIROU$, $KIBAK$, $KIBAU$, $KIBBK$, $KIBBU$, $KIBCK$, $KIBCU$, $KIBDK$, $KIBDU$, $EFL1K$,
			 $EFL1U$, $EFL2K$, $EFL2U$, $EFL3K$, $EFL3U$, $SPFCD$, $CJANK$, $PBTSK$, $PBTSU$,
			 $AYSIK$, $AYSIU$, $AYSAK$, $AYSAU$, $BYSIK$, $BYSIU$, $BYSAK$, $BYSAU$,
			 <!-- 2015년도추가 -->
			 $CYSIK$, $CYSIU$, $CYSAK$, $CYSAU$, $DYSIK$, $DYSIU$, $DYSAK$, $DYSAU$, $EYSIK$, $EYSIU$, $EYSAK$, $EYSAU$
			 )
	</insert>	
	<insert id="insertHAY041UC" parameterClass="java.util.HashMap">
	INSERT INTO $LIB3$.HAY041PF
			(SABUN, INCCD, BNKCD, BNKNM, GJBNB, PAYYN, PAYTT, PAYTM)
	VALUES
			($SABUN$, $INCCD$, #BNKCD#, #BNKNM#, #GJBNB#, #PAYYN#, $PAYTT$, $PAYTM$)
	</insert>
	<insert id="insertHAY061UC" parameterClass="java.util.HashMap">
	INSERT INTO $LIB3$.HAY061PF
			(SABUN, KORNO, FORCDA, KORNM, HOPNO, HOPNM, HOPCD, HOPCNT, HOPMON, APPNO, FORCDB, APPCD, DFFCD)
	VALUES
			($SABUN$, #KORNO#, $FORCDA$, #KORNM#, #HOPNO#, #HOPNM#, #HOPCD#, $HOPCNT$, $HOPMON$, #APPNO#, $FORCDB$, #APPCD#, #DFFCD#)
	</insert>
	<insert id="insertHAY063UC" parameterClass="java.util.HashMap">
	INSERT INTO $LIB3$.HAY063PF
			(SABUN, KORNO, FORCDA, KORNM, KIBNO, KIBNM, KIBCDA, KIBCDB, KIBCNT, KIBMON, RELNO, FORCDB, APPNM, APPNO)
	VALUES
			($SABUN$, #KORNO#, $FORCDA$, #KORNM#, #KIBNO#, #KIBNM#, #KIBCDA#, #KIBCDB#, $KIBCNT$, $KIBMON$, #RELNO#, $FORCDB$, #APPNM#, #APPNO#)
	</insert>
<!--
	<select id="selectHAY004UC_Check" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
			COUNT(*) CNT 
	FROM
			PSDIOLIB.HAY004PF
	WHERE 
			SABUN = $SABUN$
	</select>
	<insert id="insertHAY004UC" parameterClass="java.util.HashMap">
	INSERT INTO PSDIOLIB.HAY004PF
			(SABUN, INCNM, INCCD, BNKCD, BNKNM, GJBNB, PAYYN, PAYTT, PAYTM)
	VALUES
			($SABUN$, #INCNM#, $INCCD$, #BNKCD#, #BNKNM#, #GJBNB#, #PAYYN#, $PAYTT$, $PAYTM$)
	</insert>
	<delete id="deleteHAY004UC" parameterClass="java.util.HashMap">
	DELETE FROM 
		PSDIOLIB.HAY004PF
	WHERE 
		SABUN = $SABUN$
		AND INCCD = #INCCD#
		AND BNKCD = #BNKCD#
		AND BNKNM = #BNKNM#		
	</delete>

  -->
  	<select id="selectHAYZ011Q_A" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		C.DPSQNO, B.DPTCD, TRIM(C.DPDPNM) AS DPDPNM,
		CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
		ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,	
		TRIM(B.KORNM) AS KORNM, B.PAYCD,
		SUBSTR(DIGITS(B.PASSA),3,6) || '-' || DIGITS(B.PASSB) || DIGITS(B.PASSC) AS JUMIN,
		A.CHGAD, DIGITS(A.WFBCD) || DIGITS(A.CHBCD) ||
		DIGITS(A.PTBCD) || DIGITS(A.TRBCD) ||
		DIGITS(A.KYBCA) ||DIGITS(A.KYBCB) || DIGITS(A.BUBCD) || DIGITS(A.CBUCD) ||
		DIGITS(A.SOSCD) || DIGITS(A.POFL1) || DIGITS(A.SPFCD) AS ALLCD,
	
		A.PGPPC, A.PGPRC, A.PHOSA, A.PHOSB, A.PEDUA, A.PEDUB, A.PNHOU, A.PNMOU,
		A.PNHU1, A.PNHUA, A.PNHUM, A.PNHU2, A.PNHU3, A.PNHU4, A.PNHU5, A.PNHU6,
		A.PNHU7, A.PNHU8, A.PNHU9,
		A.PNHU10, A.PNHU11, A.PNHU12, A.PNHU13,		
		A.WDISA, A.KIBMA, A.KIBMB, A.KIBMC, A.KIBMD,
		A.KIBME, A.KIBOA, A.KIBOB, A.KIBOC, A.KIBOD, A.KIBOE, A.SOFL1, A.SOFL2,
		A.YUNG1, A.YUNG2, A.JUNTJ, A.SINYN, A.CASHN, A.JIGBN, A.CJANG, A.JIRON,
		A.PBTSN, A.AYSNI, A.AYSYA, A.BYSYI, A.BYSYA,
		A.CYSYI, A.CYSYA, A.DYSYI, A.DYSYA, A.EYSYI, A.EYSYA,
		A.HUSA1, A.HUSA2, A.HUSA3,
		A.HUSA4, A.KITA1, A.KITA2, A.KITA3, A.KITA4, A.KITA5, A.TJMON, A.THMON,
		A.TGMON, A.JENGN, A.KIBUA, A.LGSTK, A.TOBM1, A.TOBM2,
		A.RPNM1, A.RPAT1, A.RBAT1, A.RT1X1, A.RT1X3, A.RG1P1, A.RG1P2, A.RG1P3,
		A.RG1P4, A.RGB12,
		A.RPNM2, A.RPAT2, A.RBAT2, A.RT2X1, A.RT2X3, A.RG2P1, A.RG2P2, A.RG2P3,
		A.RG2P4, A.RGB22
	FROM
		$LIB3$.HAY011PF A, $LIB3$.HMD020PF B, $LIB2$.MST650PF C
	WHERE
	<!-- 
		A.PTJYM = 201613 AND 
	 -->
		A.SABUN = B.SABUN
		AND	B.DPTCD = C.DPCODE
		AND C.DPCOMP = #COMPS#
	ORDER BY B.DPTCD, SABUN
	</select> 
	<select id="selectHAYZ011Q_B" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		C.DPSQNO, B.DPTCD, TRIM(C.DPDPNM) AS DPDPNM,
		CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
		ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,	
		B.PAYCD, A.RELCD,
		E.PCONT, A.RELNM, SUBSTR(A.KORNO,1,6)||'-'||SUBSTR(A.KORNO,7,7) AS JUMIN,
		A.KIBCD, A.KYANO, A.KYBNO, A.TRBNO, A.BUBNO, A.SPFCD, A.CBUNO, A.BTPNO,
		A.PGPSK, A.PGPSU, A.PHOSK, A.PHOSU, A.PEDSK, A.PEDSU, A.PSISK, A.PSISU, A.CSHSK, A.CSHSU,
		A.JIGBK, A.JIKBU, A.CJANK, A.CJANU, A.JIROU, A.PBTSK, A.PBTSU, A.AYSIK,
		A.AYSIU, A.AYSAK, A.AYSAU, A.BYSIK, A.BYSIU, A.BYSAK, A.BYSAU,
		A.CYSIK, A.CYSIU, A.CYSAK, A.CYSAU, A.DYSIK, A.DYSIU, A.DYSAK,
		A.DYSAU, A.EYSIK, A.EYSIU, A.EYSAK, A.EYSAU,		
		A.KIBAK, A.KIBAU, A.KIBBK, A.KIBBU, A.KIBCK, A.KIBCU, A.KIBDK, A.KIBDU
	FROM
		$LIB3$.HAY021PF A, $LIB3$.HMD020PF B, $LIB2$.MST650PF C,
		$LIB3$.HAY011PF D, $LIB3$.HUM010PF E
	WHERE
		A.SABUN = B.SABUN
		AND B.DPTCD = C.DPCODE
		AND C.DPCOMP = #COMPS#
		AND A.SABUN = D.SABUN
		AND E.PCODE = 'FMCD'||DIGITS(A.RELCD)
	ORDER BY B.DPTCD, SABUN, B.PAYCD
	</select> 
	<select id="selectHAYZ011Q_C" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		C.DPSQNO, B.DPTCD, TRIM(C.DPDPNM) AS DPDPNM,
		CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
		ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,
		TRIM(B.KORNM) AS KORNM, B.PAYCD,
		A.INCCD, A.BNKCD, TRIM(A.BNKNM) AS BNKNM, TRIM(A.GJBNB) AS GJBNB, TRIM(A.PAYYN) AS PAYYN, A.PAYTT, A.PAYTM
	FROM
		$LIB3$.HAY041PF A, $LIB3$.HMD020PF B, $LIB2$.MST650PF C
	WHERE
		A.SABUN=B.SABUN
		AND B.DPTCD=C.DPCODE
		AND C.DPCOMP=#COMPS#
	</select> 
  	<select id="selectHAYZ011Q_D" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		B.DPTCD, TRIM(C.DPDPNM) AS DPDPNM,
		CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
		ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,
		TRIM(B.KORNM) AS KORNM,
		A.ZZ003, A.ZZ004, A.ZY001, A.ZY002, A.ZY003, A.ZY004,
		A.ZZ003+A.ZZ004+ A.ZY001+A.ZY002+A.ZY003+A.ZY004 AS TOT
	FROM
		$LIB3$.HAY081PF A, $LIB3$.HMD020PF B, $LIB2$.MST650PF C, $LIB3$.HAY011PF D
	WHERE
		A.SABUN = B.SABUN
		AND B.DPTCD = C.DPCODE
		AND C.DPCOMP = #COMPS#
		AND A.SABUN = D.SABUN
	ORDER BY B.DPTCD, KORNM
	</select>
	<select id="selectHAYZ011Q_E" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		B.DPTCD, TRIM(C.DPDPNM) AS DPDPNM,
		CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
		ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,
		TRIM(B.KORNM) AS KORNM, A.ZZ018
	FROM
		$LIB3$.HAY081PF A, $LIB3$.HMD020PF B, $LIB2$.MST650PF C, $LIB3$.HAY011PF D
	WHERE
		A.SABUN = B.SABUN
		AND B.DPTCD = C.DPCODE
	    AND C.DPCOMP = #COMPS#
	    AND A.SABUN = D.SABUN
	 ORDER BY B.DPTCD, KORNM
	</select>
	<select id="selectHAYZ011Q_F" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		B.DPTCD, TRIM(C.DPDPNM) AS DPDPNM,
		CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
		ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,
		TRIM(B.KORNM) AS KORNM,
		SUBSTR(DIGITS(B.PASSA),3,6) || '-' || DIGITS(B.PASSB) || DIGITS(B.PASSC) AS JUMIN,
		D.PHOSA, D.PHOSB, A.ZZ051, A.ZZ052, A.ZX010, A.ZX011, C.DPSQNO, A.PTJYM
	FROM
		$LIB3$.HAY081PF A,  $LIB3$.HMD020PF B, $LIB2$.MST650PF C, $LIB3$.HAY011PF D
	WHERE
		A.SABUN = B.SABUN
		AND B.DPTCD = C.DPCODE
		AND C.DPCOMP = #COMPS#
		AND A.SABUN = D.SABUN
	ORDER BY D.PHOSA, B.DPTCD
	</select>
	<select id="selectHAYZ011Q_G" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		C.DPSQNO, B.DPTCD, TRIM(C.DPDPNM) AS DPDPNM,
		CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
		ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,
		TRIM(B.KORNM) AS KORNM,
		SUBSTR(DIGITS(B.PASSA),3,6) || '-' || DIGITS(B.PASSB) || DIGITS(B.PASSC) AS JUMIN,
		D.KIBMA, D.KIBMB, D.KIBMC, D.KIBMD, D.KIBOA, D.KIBOB, D.KIBOC, D.KIBOD, 
		D.KIBPA, D.KIBPB, D.KIBPC, D.KIBPD,
		A.ZZ018,
		A.ZZ056, A.ZZ057,A.ZZ063, A.ZX018, A.ZX019, A.ZX020, A.ZX021, A.ZX026, A.ZX027
	FROM
		$LIB3$.HAY081PF A, $LIB3$.HMD020PF B, $LIB2$.MST650PF C, $LIB3$.HAY011PF D
	WHERE
		A.SABUN = B.SABUN
		AND B.DPTCD = C.DPCODE
		AND C.DPCOMP = #COMPS#
		AND A.SABUN = D.SABUN
	ORDER BY D.KIBMC, C.DPSQNO, B.DPTCD
	</select>
	<select id="selectHAYZ011Q_H" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		B.DPTCD, TRIM(C.DPDPNM) AS DPDPNM,
		CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
		ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,
		TRIM(B.KORNM) AS KORNM,
		D.PNHUM, A.ZX102, A.ZX103
	FROM
		$LIB3$.HAY081PF A, $LIB3$.HMD020PF B, $LIB2$.MST650PF C, $LIB3$.HAY011PF D
	WHERE
		A.SABUN = B.SABUN
		AND B.DPTCD = C.DPCODE
		AND C.DPCOMP = #COMPS#
		AND A.SABUN = D.SABUN
		AND D.PNHUM != 0
	ORDER BY B.DPTCD, KORNM	
	</select>	
	<select id="selectPCODE" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
			RIGHT(TRIM(PCODE),2) AS PCODE, RIGHT(TRIM(PCODE),2)||' '||TRIM(PCONT) AS PCONT
	FROM 
			$LIB3$.HUM010PF
	WHERE 
			PCODE LIKE #PCODE#
	ORDER BY PCODE
	</select>	
	<select id="selectHAYZ011_HAY011" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
		A.SABUN, A.PTJYM, TRIM(A.CHGAD) AS CHGAD, A.FORTY, A.IJJWN, A.ERILM, A.KRWTX, A.FCWTX, A.TX1AD, A.TX3AD, A.BDMTR, A.FCWTF,
		A.BDYT1, A.BDYT2, A.WFBCD, A.CHBCD, A.PTBCD, A.KYBCA, A.KYBCB, A.TRBCD, A.BUBCD, A.SPFCD, A.SOSCD, A.CBUCD,
		A.BYFL1, A.BYFL2, A.POFL1, A.POFL2, A.PGPPC, A.PGPRC, A.PHOSA, A.PHOSB, A.PEDUA, A.PEDUB, A.PNHOU, A.PNMOU,
		A.PNHU1, A.PNHUA, A.PNHUM, A.PNHU2, A.PNHU3, A.PNHU4, A.PNHU5, A.PNHU6, A.PNHU7, A.PNHU8, A.PNHU9, A.WDISA,
		A.KIBMA, A.KIBMB, A.KIBMC, A.KIBMD, A.KIBME, A.KIBOA, A.KIBOB, A.KIBOC, A.KIBOD, A.KIBOE, A.SOFL1, A.SOFL2,
		A.YUNG1, A.YUNG2, A.JUNTJ, A.SINYN, A.CASHN, A.JIGBN, A.CJANG, A.JIRON, A.PBTSN, A.AYSNI, A.AYSYA, A.BYSYI,
		A.BYSYA, A.HUSA1, A.HUSA2, A.HUSA3, A.HUSA4, A.KITA1, A.KITA2, A.KITA3, A.KITA4, A.KITA5, A.TJMON, A.THMON,
		A.TGMON, A.JENGN, A.KIBUA, A.LGSTK, A.TOBM1, A.TOBM2, TRIM(A.RPNM1) AS RPNM1, A.RNOA1, A.RNOB1, A.RNOC1,
		A.RDTS1, A.RDTE1, A.RPAT1, A.RBAT1, A.RGB11, A.RT1X1, A.RT1X2, A.RT1X3, A.RG1P1, A.RG1P2, A.RG1P3, A.RG1P4,
		A.RGB12, TRIM(A.RPNM2) AS RPNM2, A.RNOA2, A.RNOB2, A.RNOC2, A.RDTS2, A.RDTE2, A.RPAT2, A.RBAT2, A.RGB21,
		A.RT2X1, A.RT2X2, A.RT2X3, A.RG2P1, A.RG2P2, A.RG2P3, A.RG2P4, A.RGB22, A.SIDAT, A.SSDAT,
		 <!-- 2015년도추가 -->
		A.CYSYI, A.CYSYA, A.DYSYI, A.DYSYA, A.EYSYI, A.EYSYA, A.PNHU10, A.PNHU11, A.PNHU12, A.PNHU13,
		A.KIBPA, A.KIBPB, A.KIBPC, A.KIBPD, A.KIBPE,
		 <!-- 2016년도추가 -->
		A.SNDCD, A.SMCCD
	FROM
		$LIB3$.HAY011PF A
	<dynamic prepend="WHERE">
		<isNotEmpty prepend="AND" property="SABUN">
			A.SABUN = $SABUN$
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="PTJYM">
			A.PTJYM = $PTJYM$
		</isNotEmpty>
	</dynamic>
	</select>
	<select id="selectHAYZ011_HAY011_Check" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
		COUNT(*) CNT 
	FROM
		$LIB3$.HAY011PF
	WHERE 
		SABUN=$SABUN$
		<!--2015.06.22적용 
 		<isNotEmpty prepend="AND" property="PTJYM">
			PTJYM = $PTJYM$
		</isNotEmpty>
		-->
	</select>
	<insert id="insertHAYZ011_HAY011" parameterClass="java.util.HashMap" >
	<!-- 2014 추가 항목 : BDYT1-중소기업청년감면  -->
	INSERT INTO $LIB3$.HAY011PF
	 (SABUN, PTJYM, CHGAD, IJJWN, ERILM, KRWTX, FCWTX, TX1AD, TX3AD, BDMTR,
	  FCWTF, BDYT1, WFBCD, CHBCD, PTBCD, KYBCA, KYBCB, TRBCD, BUBCD, SPFCD, CBUCD,
	  BYFL2, POFL1, PGPPC, PGPRC, PHOSA, PHOSB, PEDUA, PEDUB, PNHU1, PNHUA,
	  PNHUM, PNHU2, PNHU3, PNHU4, PNHU6, PNHU7, KIBMA, KIBMB, KIBMC, KIBMD,
	  KIBOA, KIBOB, KIBOC, KIBOD, SOFL1, YUNG1, YUNG2, SINYN, CASHN, JIGBN,
	  CJANG, JIRON, PBTSN, AYSNI, AYSYA, BYSYI, BYSYA, HUSA1, HUSA2, HUSA3,
	  HUSA4, KITA1, KITA2, KITA3, TGMON, KIBUA, LGSTK, TOBM1, RPNM1, RNOA1,
	  RNOB1, RNOC1, RDTS1, RDTE1, RPAT1, RBAT1, RT1X1, RT1X3, RG1P1, RG1P2,
	  RG1P3, RG1P4, RGB12, RPNM2, RNOA2, RNOB2, RNOC2, RDTS2, RDTE2, RPAT2,
	  RBAT2, RT2X1, RT2X3, RG2P1, RG2P2, RG2P3, RG2P4, RGB22, SIDAT, SSDAT,
	  <!-- 2015년도추가 -->
	  CYSYI, CYSYA, DYSYI, DYSYA, EYSYI, EYSYA, PNHU10, PNHU11, PNHU12, PNHU13,
	  KIBPA, KIBPB, KIBPC, KIBPD,
	  <!-- 2016년도추가 1.외국법인소속 파견근로자여부, 2.중소기업감면코드, 3.국외근로비과세(기존COLUME사용)-->
	  SNDCD, SMCCD, RGB11)
	  <!-- VB 입력/처리일자 등록내용 없음 -->
	VALUES
	 ($SABUN$, $PTJYM$, #CHGAD#, $IJJWN$, $ERILM$, $KRWTX$, $FCWTX$, $TX1AD$, $TX3AD$, $BDMTR$,
	  $FCWTF$, $BDYT1$, $WFBCD$, $CHBCD$, $PTBCD$, $KYBCA$, $KYBCB$, $TRBCD$, $BUBCD$, $SPFCD$, $CBUCD$,
	  $BYFL2$, $POFL1$, $PGPPC$, $PGPRC$, $PHOSA$, $PHOSB$, $PEDUA$, $PEDUB$, $PNHU1$, $PNHUA$,
	  $PNHUM$, $PNHU2$, $PNHU3$, $PNHU4$, $PNHU6$, $PNHU7$, $KIBMA$, $KIBMB$, $KIBMC$, $KIBMD$,
	  $KIBOA$, $KIBOB$, $KIBOC$, $KIBOD$, $SOFL1$, $YUNG1$, $YUNG2$, $SINYN$, $CASHN$, $JIGBN$,
	  $CJANG$, $JIRON$, $PBTSN$, $AYSNI$, $AYSYA$, $BYSYI$, $BYSYA$, $HUSA1$, $HUSA2$, $HUSA3$,
	  $HUSA4$, $KITA1$, $KITA2$, $KITA3$, $TGMON$, $KIBUA$, $LGSTK$, $TOBM1$, #RPNM1#, $RNOA1$,
	  $RNOB1$, $RNOC1$, $RDTS1$, $RDTE1$, $RPAT1$, $RBAT1$, $RT1X1$, $RT1X3$, $RG1P1$, $RG1P2$,
	  $RG1P3$, $RG1P4$, $RGB12$, #RPNM2#, $RNOA2$, $RNOB2$, $RNOC2$, $RDTS2$, $RDTE2$, $RPAT2$,
	  $RBAT2$, $RT2X1$, $RT2X3$, $RG2P1$, $RG2P2$, $RG2P3$, $RG2P4$, $RGB22$,
	  REPLACE(CHAR(DATE(current date), ISO), '-', ''), REPLACE(CHAR(DATE(current date), ISO), '-', ''),
	  <!-- 2015년도추가 -->
	  $CYSYI$, $CYSYA$, $DYSYI$, $DYSYA$, $EYSYI$, $EYSYA$, $PNHU10$, $PNHU11$, $PNHU12$, $PNHU13$,
	  $KIBPA$, $KIBPB$, $KIBPC$, $KIBPD$,
	  <!-- 2016년도추가 1.외국법인소속 파견근로자여부, 2.중소기업감면코드, 3.국외근로비과세(기존COLUME사용)-->
	  $SNDCD$, $SMCCD$, $RGB11$)
<!-- 
	INSERT INTO PSDIOLIB.HAY011PF
	 (SABUN, PTJYM, CHGAD, FORTY, IJJWN, ERILM, KRWTX, FCWTX, TX1AD, TX3AD, BDMTR,
	  FCWTF, BDYT1, BDYT2, WFBCD, CHBCD, PTBCD, KYBCA, KYBCB, TRBCD, BUBCD, SPFCD,
	  SOSCD, CBUCD, BYFL1, BYFL2, POFL1, POFL2, PGPPC, PGPRC, PHOSA, PHOSB, PEDUA,
	  PEDUB, PNHOU, PNMOU, PNHU1, PNHUA, PNHUM, PNHU2, PNHU3, PNHU4, PNHU5, PNHU6,
	  PNHU7, PNHU8, PNHU9, WDISA, KIBMA, KIBMB, KIBMC, KIBMD, KIBME, KIBOA, KIBOB,
	  KIBOC, KIBOD, KIBOE, SOFL1, SOFL2, YUNG1, YUNG2, JUNTJ, SINYN, CASHN, JIGBN,
	  CJANG, JIRON, PBTSN, AYSNI, AYSYA, BYSYI, BYSYA, HUSA1, HUSA2, HUSA3, HUSA4,
	  KITA1, KITA2, KITA3, KITA4, KITA5, TJMON, THMON, TGMON, JENGN, KIBUA, LGSTK,
	  TOBM1, TOBM2, RPNM1, RNOA1, RNOB1, RNOC1, RDTS1, RDTE1, RPAT1, RBAT1, RGB11,
	  RT1X1, RT1X2, RT1X3, RG1P1, RG1P2, RG1P3, RG1P4, RGB12, RPNM2, RNOA2, RNOB2,
	  RNOC2, RDTS2, RDTE2, RPAT2, RBAT2, RGB21, RT2X1, RT2X2, RT2X3, RG2P1, RG2P2,
	  RG2P3, RG2P4, RGB22, SIDAT, SSDAT)
	VALUES
	 ($SABUN$, $PTJYM$, #CHGAD#, $FORTY$, $IJJWN$, $ERILM$, $KRWTX$, $FCWTX$, $TX1AD$, $TX3AD$, $BDMTR$,
	  $FCWTF$, $BDYT1$, $BDYT2$, $WFBCD$, $CHBCD$, $PTBCD$, $KYBCA$, $KYBCB$, $TRBCD$, $BUBCD$, $SPFCD$,
	  $SOSCD$, $CBUCD$, $BYFL1$, $BYFL2$, $POFL1$, $POFL2$, $PGPPC$, $PGPRC$, $PHOSA$, $PHOSB$, $PEDUA$,
	  $PEDUB$, $PNHOU$, $PNMOU$, $PNHU1$, $PNHUA$, $PNHUM$, $PNHU2$, $PNHU3$, $PNHU4$, $PNHU5$, $PNHU6$,
	  $PNHU7$, $PNHU8$, $PNHU9$, $WDISA$, $KIBMA$, $KIBMB$, $KIBMC$, $KIBMD$, $KIBME$, $KIBOA$, $KIBOB$,
	  $KIBOC$, $KIBOD$, $KIBOE$, $SOFL1$, $SOFL2$, $YUNG1$, $YUNG2$, $JUNTJ$, $SINYN$, $CASHN$, $JIGBN$,
	  $CJANG$, $JIRON$, $PBTSN$, $AYSNI$, $AYSYA$, $BYSYI$, $BYSYA$, $HUSA1$, $HUSA2$, $HUSA3$, $HUSA4$,
	  $KITA1$, $KITA2$, $KITA3$, $KITA4$, $KITA5$, $TJMON$, $THMON$, $TGMON$, $JENGN$, $KIBUA$, $LGSTK$,
	  $TOBM1$, $TOBM2$, #RPNM1#, $RNOA1$, $RNOB1$, $RNOC1$, $RDTS1$, $RDTE1$, $RPAT1$, $RBAT1$, $RGB11$,
	  $RT1X1$, $RT1X2$, $RT1X3$, $RG1P1$, $RG1P2$, $RG1P3$, $RG1P4$, $RGB12$, #RPNM2#, $RNOA2$, $RNOB2$,
	  $RNOC2$, $RDTS2$, $RDTE2$, $RPAT2$, $RBAT2$, $RGB21$, $RT2X1$, $RT2X2$, $RT2X3$, $RG2P1$, $RG2P2$,
	  $RG2P3$, $RG2P4$, $RGB22$, $SIDAT$, $SSDAT$)
 -->	  
	</insert>
	<update id="updateHAYZ011_HAY011" parameterClass="java.util.HashMap" >
	UPDATE $LIB3$.HAY011PF
	SET
		PTJYM=$PTJYM$, CHGAD=#CHGAD#, IJJWN=$IJJWN$, ERILM=$ERILM$, KRWTX=$KRWTX$, FCWTX=$FCWTX$,
		TX1AD=$TX1AD$, TX3AD=$TX3AD$, BDMTR=$BDMTR$, FCWTF=$FCWTF$,	BDYT1=$BDYT1$, WFBCD=$WFBCD$, CHBCD=$CHBCD$,
		PTBCD=$PTBCD$, KYBCA=$KYBCA$, KYBCB=$KYBCB$, TRBCD=$TRBCD$, BUBCD=$BUBCD$, SPFCD=$SPFCD$,
		CBUCD=$CBUCD$, BYFL2=$BYFL2$, POFL1=$POFL1$, PGPPC=$PGPPC$, PGPRC=$PGPRC$, PHOSA=$PHOSA$,
		PHOSB=$PHOSB$, PEDUA=$PEDUA$, PEDUB=$PEDUB$, PNHU1=$PNHU1$, PNHUA=$PNHUA$, PNHUM=$PNHUM$,
		PNHU2=$PNHU2$, PNHU3=$PNHU3$, PNHU4=$PNHU4$, PNHU6=$PNHU6$, PNHU7=$PNHU7$, KIBMA=$KIBMA$,
		KIBMB=$KIBMB$, KIBMC=$KIBMC$, KIBMD=$KIBMD$, KIBOA=$KIBOA$,	KIBOB=$KIBOB$, KIBOC=$KIBOC$,
		KIBOD=$KIBOD$, SOFL1=$SOFL1$, YUNG1=$YUNG1$, YUNG2=$YUNG2$, SINYN=$SINYN$, CASHN=$CASHN$,
		JIGBN=$JIGBN$, CJANG=$CJANG$, JIRON=$JIRON$, PBTSN=$PBTSN$, AYSNI=$AYSNI$, AYSYA=$AYSYA$,
		BYSYI=$BYSYI$, BYSYA=$BYSYA$, HUSA1=$HUSA1$, HUSA2=$HUSA2$,	HUSA3=$HUSA3$, HUSA4=$HUSA4$,
		KITA1=$KITA1$, KITA2=$KITA2$, KITA3=$KITA3$, TGMON=$TGMON$,	KIBUA=$KIBUA$, LGSTK=$LGSTK$,
		TOBM1=$TOBM1$, RPNM1=#RPNM1#, RNOA1=$RNOA1$, RNOB1=$RNOB1$, RNOC1=$RNOC1$, RDTS1=$RDTS1$,
		RDTE1=$RDTE1$, RPAT1=$RPAT1$, RBAT1=$RBAT1$, RT1X1=$RT1X1$, RT1X3=$RT1X3$, RG1P1=$RG1P1$,
		RG1P2=$RG1P2$, RG1P3=$RG1P3$, RG1P4=$RG1P4$, RGB12=$RGB12$, RPNM2=#RPNM2#, RNOA2=$RNOA2$,
		RNOB2=$RNOB2$, RNOC2=$RNOC2$, RDTS2=$RDTS2$, RDTE2=$RDTE2$, RPAT2=$RPAT2$, RBAT2=$RBAT2$,
		RT2X1=$RT2X1$, RT2X3=$RT2X3$, RG2P1=$RG2P1$, RG2P2=$RG2P2$, RG2P3=$RG2P3$, RG2P4=$RG2P4$,
		RGB22=$RGB22$, SSDAT=REPLACE(CHAR(DATE(current date), ISO), '-', ''),
		<!-- 2015년도추가 -->
		CYSYI=$CYSYI$, CYSYA=$CYSYA$, DYSYI=$DYSYI$, DYSYA=$DYSYA$, EYSYI=$EYSYI$, EYSYA=$EYSYA$,
		PNHU10=$PNHU10$, PNHU11=$PNHU11$, PNHU12=$PNHU12$, PNHU13=$PNHU13$,
		KIBPA=$KIBPA$, KIBPB=$KIBPB$, KIBPC=$KIBPC$, KIBPD=$KIBPD$,
	  <!-- 2016년도추가 1.외국법인소속 파견근로자여부, 2.중소기업감면코드, 3.국외근로비과세(기존COLUME사용)-->
		SNDCD=$SNDCD$, SMCCD=$SMCCD$, RGB11=$RGB11$
		
	<!-- 
		SABUN=$SABUN$, PTJYM=$PTJYM$, CHGAD=$CHGAD$, FORTY=$FORTY$, IJJWN=$IJJWN$, ERILM=$ERILM$,
		KRWTX=$KRWTX$, FCWTX=$FCWTX$, TX1AD=$TX1AD$, TX3AD=$TX3AD$, BDMTR=$BDMTR$, FCWTF=$FCWTF$,
		BDYT1=$BDYT1$, BDYT2=$BDYT2$, WFBCD=$WFBCD$, CHBCD=$CHBCD$, PTBCD=$PTBCD$, KYBCA=$KYBCA$,
		KYBCB=$KYBCB$, TRBCD=$TRBCD$, BUBCD=$BUBCD$, SPFCD=$SPFCD$, SOSCD=$SOSCD$, CBUCD=$CBUCD$,
		BYFL1=$BYFL1$, BYFL2=$BYFL2$, POFL1=$POFL1$, POFL2=$POFL2$, PGPPC=$PGPPC$, PGPRC=$PGPRC$,
		PHOSA=$PHOSA$, PHOSB=$PHOSB$, PEDUA=$PEDUA$, PEDUB=$PEDUB$, PNHOU=$PNHOU$, PNMOU=$PNMOU$,
		PNHU1=$PNHU1$, PNHUA=$PNHUA$, PNHUM=$PNHUM$, PNHU2=$PNHU2$, PNHU3=$PNHU3$, PNHU4=$PNHU4$,
		PNHU5=$PNHU5$, PNHU6=$PNHU6$, PNHU7=$PNHU7$, PNHU8=$PNHU8$, PNHU9=$PNHU9$, WDISA=$WDISA$,
		KIBMA=$KIBMA$, KIBMB=$KIBMB$, KIBMC=$KIBMC$, KIBMD=$KIBMD$, KIBME=$KIBME$, KIBOA=$KIBOA$,
		KIBOB=$KIBOB$, KIBOC=$KIBOC$, KIBOD=$KIBOD$, KIBOE=$KIBOE$, SOFL1=$SOFL1$, SOFL2=$SOFL2$,
		YUNG1=$YUNG1$, YUNG2=$YUNG2$, JUNTJ=$JUNTJ$, SINYN=$SINYN$, CASHN=$CASHN$, JIGBN=$JIGBN$,
		CJANG=$CJANG$, JIRON=$JIRON$, PBTSN=$PBTSN$, AYSNI=$AYSNI$, AYSYA=$AYSYA$, BYSYI=$BYSYI$,
		BYSYA=$BYSYA$, HUSA1=$HUSA1$, HUSA2=$HUSA2$, HUSA3=$HUSA3$,	HUSA4=$HUSA4$, KITA1=$KITA1$,
		KITA2=$KITA2$, KITA3=$KITA3$, KITA4=$KITA4$, KITA5=$KITA5$,	TJMON=$TJMON$, THMON=$THMON$,
		TGMON=$TGMON$, JENGN=$JENGN$, KIBUA=$KIBUA$, LGSTK=$LGSTK$, TOBM1=$TOBM1$, TOBM2=$TOBM2$,
		RPNM1=$RPNM1$, RNOA1=$RNOA1$, RNOB1=$RNOB1$, RNOC1=$RNOC1$, RDTS1=$RDTS1$, RDTE1=$RDTE1$,
		RPAT1=$RPAT1$, RBAT1=$RBAT1$, RGB11=$RGB11$, RT1X1=$RT1X1$, RT1X2=$RT1X2$, RT1X3=$RT1X3$,
		RG1P1=$RG1P1$, RG1P2=$RG1P2$, RG1P3=$RG1P3$, RG1P4=$RG1P4$, RGB12=$RGB12$, RPNM2=$RPNM2$,
		RNOA2=$RNOA2$, RNOB2=$RNOB2$, RNOC2=$RNOC2$, RDTS2=$RDTS2$, RDTE2=$RDTE2$, RPAT2=$RPAT2$,
		RBAT2=$RBAT2$, RGB21=$RGB21$, RT2X1=$RT2X1$, RT2X2=$RT2X2$, RT2X3=$RT2X3$, RG2P1=$RG2P1$,
		RG2P2=$RG2P2$, RG2P3=$RG2P3$, RG2P4=$RG2P4$, RGB22=$RGB22$, SIDAT=$SIDAT$, SSDAT=$SSDAT$
 -->
	WHERE
		SABUN = $SABUN$
		AND PTJYM = $PTJYM$
	</update>
	<delete id="deleteHAYZ011_HAY011" parameterClass="java.util.HashMap" >
	DELETE FROM $LIB3$.HAY011PF
	WHERE
		SABUN=$SABUN$
		AND PTJYM = $PTJYM$
	</delete>

	<select id="selectHAYZ011_HAY021" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
		A.SABUN,
		TRIM(CASE WHEN length(trim(char(A.RELCD)))=1 THEN '0'|| char(A.RELCD) ELSE char(A.RELCD) END) AS RELCD,
		A.RELNO, TRIM(A.RELNM) AS RELNM, A.KORNO, TRIM(A.KOCHK) AS KOCHK, TRIM(A.LIVCD) AS LIVCD,
		A.KIBCD, A.KYANO, A.KYBNO, A.TRBNO,	A.BUBNO, A.SPFCD, A.CBUNO, A.BTPNO, A.CYFL1, A.CYFL2, A.CYFL3, A.PGPCD,
		A.PGPSK, A.PGPSU, A.PHOCD, A.PHOSK, A.PHOSU, A.PEDCD, A.PEDSK, A.PEDSU, A.PSICD, A.PSISK, A.PSISU, A.CSHSK,
		A.CSHSU, A.JIGCD, A.JIGBK, A.JIKBU, A.CJANK, A.CJANU, A.JIROU, A.PBTSK, A.PBTSU, 
		A.AYSIK, A.AYSIU, A.AYSAK, A.AYSAU, A.BYSIK, A.BYSIU, A.BYSAK, A.BYSAU,
		A.KIBAK, A.KIBAU, A.KIBBK, A.KIBBU, A.KIBCK, A.KIBCU, A.KIBDK, A.KIBDU, A.EFL1K,
		A.EFL1U, A.EFL2K, A.EFL2U, A.EFL3K, A.EFL3U, B.PCONT,
		<!-- 2015년 추가 -->
		A.CYSIK, A.CYSIU, A.CYSAK, A.CYSAU, A.DYSIK, A.DYSIU, A.DYSAK, A.DYSAU, A.EYSIK, A.EYSIU, A.EYSAK, A.EYSAU		
	FROM $LIB3$.HAY021PF A
	LEFT OUTER JOIN $LIB3$.HUM010PF B ON 'FMCD'||TRIM(A.RELCD) = B.PCODE
	WHERE
		A.SABUN=$SABUN$
	ORDER BY A.RELCD
	</select>
	<select id="selectHAYZ011_HAY021_Check" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
		COUNT(*) CNT 
	FROM
		$LIB3$.HAY021PF
	WHERE 
		SABUN = $SABUN$
		AND KORNO=#KORNO#
	</select>
	<insert id="insertHAYZ011_HAY021" parameterClass="java.util.HashMap" >
	INSERT INTO $LIB3$.HAY021PF
	(SABUN, RELCD, RELNO, RELNM, KORNO, KOCHK, LIVCD, KIBCD, KYANO, KYBNO, TRBNO, BUBNO, SPFCD, CBUNO, BTPNO,
	 PGPCD, PGPSK, PGPSU, PHOCD, PHOSK, PHOSU, PEDCD, PEDSK, PEDSU, PSICD, PSISK, PSISU,
	 CSHSK, JIGBK, JIKBU, CJANK, CJANU, JIROU, PBTSK, PBTSU,
	 AYSIK, AYSIU, AYSAK, AYSAU, BYSIK, BYSIU, BYSAK, BYSAU,
	 KIBAK, KIBAU, KIBBK, KIBBU, KIBCK, KIBCU, KIBDK, KIBDU,
	  <!-- 2015년도추가 -->
	 CYSIK, CYSIU, CYSAK, CYSAU, DYSIK, DYSIU, DYSAK, DYSAU, EYSIK, EYSIU, EYSAK, EYSAU)
	VALUES
	 ($SABUN$, $RELCD$, $RELNO$, #RELNM#, #KORNO#, #KOCHK#, #LIVCD#, $KIBCD$, $KYANO$, $KYBNO$, $TRBNO$, $BUBNO$, $SPFCD$, $CBUNO$, $BTPNO$,
	 $PGPCD$, $PGPSK$, $PGPSU$, $PHOCD$, $PHOSK$, $PHOSU$, $PEDCD$, $PEDSK$, $PEDSU$, $PSICD$, $PSISK$, $PSISU$,
	 $CSHSK$, $JIGBK$, $JIKBU$, $CJANK$, $CJANU$, $JIROU$, $PBTSK$, $PBTSU$,
	 $AYSIK$, $AYSIU$, $AYSAK$, $AYSAU$, $BYSIK$, $BYSIU$, $BYSAK$, $BYSAU$,
	 $KIBAK$, $KIBAU$, $KIBBK$, $KIBBU$, $KIBCK$, $KIBCU$, $KIBDK$, $KIBDU$,
	 <!-- 2015년도추가 -->
	 $CYSIK$, $CYSIU$, $CYSAK$, $CYSAU$, $DYSIK$, $DYSIU$, $DYSAK$, $DYSAU$, $EYSIK$, $EYSIU$, $EYSAK$, $EYSAU$
	 )
<!--
	INSERT INTO PSDIOLIB.HAY021PF
	(SABUN, RELCD, RELNO, RELNM, KORNO, KOCHK, LIVCD, KIBCD, KYANO, KYBNO, TRBNO, BUBNO, SPFCD, CBUNO, BTPNO,
	 CYFL1, CYFL2, CYFL3, PGPCD, PGPSK, PGPSU, PHOCD, PHOSK, PHOSU, PEDCD, PEDSK, PEDSU,
	 PSICD, PSISK, PSISU, CSHSK, CSHSU, JIGCD, JIGBK, JIKBU, CJANK, CJANU, JIROU, PBTSK, PBTSU, 
 	 AYSIK, AYSIU, AYSAK, AYSAU, BYSIK, BYSIU, BYSAK, BYSAU,
	 KIBAK, KIBAU, KIBBK, KIBBU, KIBCK, KIBCU, KIBDK, KIBDU)
	VALUES
	 ($SABUN$, $RELCD$, $RELNO$, #RELNM#, #KORNO#, #KOCHK#, #LIVCD#, $KIBCD$, $KYANO$, $KYBNO$, $TRBNO$, $BUBNO$, $SPFCD$, $CBUNO$, $BTPNO$,
	 $CYFL1$, $CYFL2$, $CYFL3$, $PGPCD$, $PGPSK$, $PGPSU$, $PHOCD$, $PHOSK$, $PHOSU$, $PEDCD$, $PEDSK$, $PEDSU$, 
	 $PSICD$, $PSISK$, $PSISU$, $CSHSK$, $CSHSU$, $JIGCD$, $JIGBK$, $JIKBU$, $CJANK$, $CJANU$, $JIROU$, $PBTSK$, $PBTSU$,
 	 $AYSIK$, $AYSIU$, $AYSAK$, $AYSAU$, $BYSIK$, $BYSIU$, $BYSAK$, $BYSAU$,
 	 $KIBAK$, $KIBAU$, $KIBBK$, $KIBBU$, $KIBCK$, $KIBCU$, $KIBDK$, $KIBDU$)
  -->
	 </insert>
	<update id="updateHAYZ011_HAY021" parameterClass="java.util.HashMap" >
	UPDATE $LIB3$.HAY021PF
	SET
		RELCD= $RELCD$, RELNO= $RELNO$, RELNM= #RELNM#, KORNO= #KORNO#, KOCHK= #KOCHK#,	LIVCD= #LIVCD#,
		KIBCD= $KIBCD$, KYANO= $KYANO$, KYBNO= $KYBNO$, TRBNO= $TRBNO$, BUBNO= $BUBNO$,	SPFCD= $SPFCD$,
		CBUNO= $CBUNO$, BTPNO= $BTPNO$,	PGPCD= $PGPCD$, PGPSK= $PGPSK$, PGPSU= $PGPSU$,	PHOCD= $PHOCD$,
		PHOSK= $PHOSK$, PHOSU= $PHOSU$,	PEDCD= $PEDCD$, PEDSK= $PEDSK$, PEDSU= $PEDSU$,	PSICD= $PSICD$,
		PSISK= $PSISK$, PSISU= $PSISU$,	CSHSK= $CSHSK$, JIGBK= $JIGBK$, JIKBU= $JIKBU$,	CJANK= $CJANK$,
		CJANU= $CJANU$, JIROU= $JIROU$, PBTSK= $PBTSK$, PBTSU= $PBTSU$, 
		AYSIK= $AYSIK$, AYSIU= $AYSIU$, AYSAK= $AYSAK$, AYSAU= $AYSAU$, BYSIK= $BYSIK$, BYSIU= $BYSIU$,
		BYSAK= $BYSAK$, BYSAU= $BYSAU$,
		KIBAK= $KIBAK$,	KIBAU= $KIBAU$,
		KIBBK= $KIBBK$, KIBBU= $KIBBU$, KIBCK= $KIBCK$, KIBCU= $KIBCU$, KIBDK= $KIBDK$,	KIBDU= $KIBDU$,
		<!-- 2015년 추가 -->
		CYSIK= $CYSIK$, CYSIU= $CYSIU$, CYSAK= $CYSAK$, CYSAU= $CYSAU$, DYSIK= $DYSIK$,	DYSIU= $DYSIU$,
		DYSAK= $DYSAK$, DYSAU= $DYSAU$, EYSIK= $EYSIK$, EYSIU= $EYSIU$, EYSAK= $EYSAK$,	EYSAU= $EYSAU$
		
<!-- 	SABUN= $SABUN$, RELCD= $RELCD$, RELNO= $RELNO$, RELNM= #RELNM#, KORNO= #KORNO#, KOCHK= #KOCHK#,
		LIVCD= #LIVCD#, KIBCD= $KIBCD$, KYANO= $KYANO$, KYBNO= $KYBNO$, TRBNO= $TRBNO$, BUBNO= $BUBNO$,
		SPFCD= $SPFCD$, CBUNO= $CBUNO$, BTPNO= $BTPNO$, CYFL1= $CYFL1$, CYFL2= $CYFL2$, CYFL3= $CYFL3$,
		PGPCD= $PGPCD$, PGPSK= $PGPSK$, PGPSU= $PGPSU$, PHOCD= $PHOCD$, PHOSK= $PHOSK$, PHOSU= $PHOSU$,
		PEDCD= $PEDCD$, PEDSK= $PEDSK$, PEDSU= $PEDSU$, PSICD= $PSICD$, PSISK= $PSISK$, PSISU= $PSISU$,
		CSHSK= $CSHSK$, CSHSU= $CSHSU$, JIGCD= $JIGCD$, JIGBK= $JIGBK$, JIKBU= $JIKBU$, CJANK= $CJANK$,
		CJANU= $CJANU$, JIROU= $JIROU$, PBTSK= $PBTSK$, PBTSU= $PBTSU$,
		AYSIK= $AYSIK$, AYSIU= $AYSIU$, AYSAK= $AYSAK$, AYSAU= $AYSAU$, BYSIK= $BYSIK$, BYSIU= $BYSIU$,
		BYSAK= $BYSAK$, BYSAU= $BYSAU$,
		KIBAK= $KIBAK$, KIBAU= $KIBAU$,
		KIBBK= $KIBBK$, KIBBU= $KIBBU$, KIBCK= $KIBCK$, KIBCU= $KIBCU$, KIBDK= $KIBDK$, KIBDU= $KIBDU$,
		EFL1K= $EFL1K$, EFL1U= $EFL1U$, EFL2K= $EFL2K$, EFL2U= $EFL2U$, EFL3K= $EFL3K$, EFL3U= $EFL3U$ -->
	WHERE
		SABUN=$SABUN$
		AND KORNO=#KORNO#
	</update>
	<delete id="deleteHAYZ011_HAY021" parameterClass="java.util.HashMap" >
	DELETE FROM $LIB3$.HAY021PF
	WHERE
		SABUN=$SABUN$
		AND KORNO=#KORNO#
	</delete>
	
	<select id="selectHAYZ011_HAY041" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
		A.SABUN, A.INCCD, A.BNKCD, TRIM(A.BNKNM) AS BNKNM, A.GJBNB, A.PAYYN, A.PAYTT, A.PAYTM
	FROM
		$LIB3$.HAY041PF A
	WHERE
		A.SABUN=$SABUN$
	ORDER BY A.INCCD
	</select>	
	<select id="selectHAYZ011_HAY041_Check" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
		COUNT(*) CNT 
	FROM
		$LIB3$.HAY041PF
	WHERE 
		SABUN = $SABUN$
		AND INCCD = $INCCD$
		AND BNKCD = #BNKCD#
		AND GJBNB = #GJBNB#
		AND PAYYN = #PAYYN#
	</select>
	<insert id="insertHAYZ011_HAY041" parameterClass="java.util.HashMap" >
	INSERT INTO $LIB3$.HAY041PF (SABUN, INCCD, BNKCD, BNKNM, GJBNB, PAYYN, PAYTT, PAYTM)
	VALUES ($SABUN$, $INCCD$, #BNKCD#, #BNKNM#, #GJBNB#, #PAYYN#, $PAYTT$, $PAYTM$)
	 </insert>
	<update id="updateHAYZ011_HAY041" parameterClass="java.util.HashMap" >
	UPDATE $LIB3$.HAY041PF
	SET
		BNKNM = #BNKNM#,
		PAYTT = $PAYTT$,
		PAYTM = $PAYTM$	
	WHERE
		SABUN = $SABUN$
		AND INCCD = $INCCD$
		AND BNKCD = #BNKCD#
		AND GJBNB = #GJBNB#
		AND PAYYN = #PAYYN#
	</update>
	<delete id="deleteHAYZ011_HAY041" parameterClass="java.util.HashMap" >
	DELETE FROM $LIB3$.HAY041PF
	WHERE
		SABUN = $SABUN$
		AND INCCD = $INCCD$
		AND BNKCD = #BNKCD#
		AND GJBNB = #GJBNB#
		AND PAYYN = #PAYYN#
	</delete>

	<delete id="deleteHAYZ012C_HAY011PF" parameterClass="java.util.HashMap" >
	DELETE FROM $LIB3$.HAY011PF
	</delete>
	
	<delete id="deleteHAYZ012C_HAY071PF" parameterClass="java.util.HashMap" >
	DELETE FROM $LIB3$.HAY071PF
	</delete>
	
	<delete id="deleteHAYZ012C_HAY081PF" parameterClass="java.util.HashMap" >
	DELETE FROM $LIB3$.HAY081PF
	</delete>
	
	<select id="selectHAYZ012C_HMD020PF" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		SABUN, WFBCD, CHBCD, PTBCD, TRBCD, KYBCD, BYFL1, BUBCD, SOSCD, PMWCD, BYFL2
	FROM
		$LIB3$.HMD020PF
	WHERE
		CNDAT BETWEEN $CNDAT_FR$ AND $CNDAT_TO$
	</select>

	<insert id="insertHAYZ012C_HAY011PF" parameterClass="java.util.HashMap" >
	INSERT INTO $LIB3$.HAY011PF (SABUN, PTJYM, WFBCD, CHBCD, PTBCD, TRBCD, KYBCA, KYBCB, BUBCD, SOSCD, CBUCD, BYFL2)
	(
		SELECT
			SABUN, SUBSTR($CNDAT_TO$,1,6), WFBCD, CHBCD, PTBCD, TRBCD, KYBCD, BYFL1, BUBCD, SOSCD, PMWCD, BYFL2
		FROM
			$LIB3$.HMD020PF
		WHERE
			CNDAT BETWEEN $CNDAT_FR$ AND $CNDAT_TO$
	 )
	 </insert>
	 
	<delete id="deleteHAYZ072C" parameterClass="java.util.HashMap" >
	DELETE FROM $LIB3$.HAY071PF
	</delete>
	<select id="selectHAYZ072C" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
		A.SABUN, A.TOTYM, <!--  A.IJJWN, A.SOFL1, A.KRWTX, A.FCWTX, A.ERILM, -->
		A.TDP01+COALESCE(B.YYAMT,0) AS TDP01, A.TDP02, A.TDP03, A.TDP04, A.TDP05, A.TDP06, A.TDP07, A.TDP08, A.TDP09, A.TDP10, A.TDP11, A.TDP12,
		A.TPA01, A.TPA02, A.TPA03, A.TPA04, A.TPA05, A.TPA06, A.TPA07, A.TPA08, A.TPA09, A.TPA10, A.TPA11, A.TPA12,
		A.EDT01, A.EDT02, A.EDT03, A.EDT04, A.EDT05, A.EDT06, A.EDT07, A.EDT08, A.EDT09, A.EDT10, A.EDT11, A.EDT12,
		A.BDT01, A.BDT02, A.BDT03, A.BDT04, A.BDT05, A.BDT06, A.BDT07, A.BDT08, A.BDT09, A.BDT10, A.BDT11, A.BDT12,
		A.TX101+COALESCE(B.TAX1S,0) AS TX101, A.TX102, A.TX103, A.TX104, A.TX105, A.TX106, A.TX107, A.TX108, A.TX109, A.TX110, A.TX111, (A.TX112 + A.TX1AD) AS TX112,
		A.TX301+COALESCE(B.TAX3S,0) AS TX301, A.TX302, A.TX303, A.TX304, A.TX305, A.TX306, A.TX307, A.TX308, A.TX309, A.TX310, A.TX311, (A.TX312 + A.TX3AD) AS TX312,
		A.B1T01+COALESCE(B.GOBOH,0) AS B1T01, A.B1T02, A.B1T03, A.B1T04, A.B1T05, A.B1T06, A.B1T07, A.B1T08, A.B1T09, A.B1T10, A.B1T11, A.B1T12,
		A.JMN01, A.JMN02, A.JMN03, A.JMN04, A.JMN05, A.JMN06, A.JMN07, A.JMN08, A.JMN09, A.JMN10, A.JMN11, A.JMN12,
		A.CHL01, A.CHL02, A.CHL03, A.CHL04, A.CHL05, A.CHL06, A.CHL07, A.CHL08, A.CHL09, A.CHL10, A.CHL11, A.CHL12,
		A.BGP01, A.BGP02, A.BGP03, A.BGP04, A.BGP05, A.BGP06, A.BGP07, A.BGP08, A.BGP09, A.BGP10, A.BGP11, A.BGP12,
		A.GYP01, A.GYP02, A.GYP03, A.GYP04, A.GYP05, A.GYP06, A.GYP07, A.GYP08, A.GYP09, A.GYP10, A.GYP11, A.GYP12,
		A.GSB01, A.GSB02, A.GSB03, A.GSB04, A.GSB05, A.GSB06, A.GSB07, A.GSB08, A.GSB09, A.GSB10, A.GSB11, A.GSB12,
		A.LAB01, A.LAB02, A.LAB03, A.LAB04, A.LAB05, A.LAB06, A.LAB07, A.LAB08, A.LAB09, A.LAB10, A.LAB11, A.LAB12,
		A.TTB01, A.TTB02, A.TTB03, A.TTB04, A.TTB05, A.TTB06, A.TTB07, A.TTB08, A.TTB09, A.TTB10,
		(A.TTB11 + A.KRWTX + A.FCWTX) AS TTB11, (A.TTB12 + A.IJJWN + A.SOFL1 + A.ERILM) AS TTB12
	FROM(
		SELECT
			A.SABUN, A.PTJYM AS TOTYM, MAX(A.IJJWN) AS IJJWN, MAX(A.SOFL1) AS SOFL1, MAX(A.KRWTX) AS KRWTX, MAX(A.FCWTX) AS FCWTX, MAX(A.ERILM) AS ERILM,
			MAX(A.TX1AD) AS TX1AD, MAX(A.TX3AD) AS TX3AD,
			SUM(A.TDP01) AS TDP01, SUM(A.TDP02) AS TDP02, SUM(A.TDP03) AS TDP03, SUM(A.TDP04) AS TDP04, SUM(A.TDP05) AS TDP05, SUM(A.TDP06) AS TDP06,
			SUM(A.TDP07) AS TDP07, SUM(A.TDP08) AS TDP08, SUM(A.TDP09) AS TDP09, SUM(A.TDP10) AS TDP10, SUM(A.TDP11) AS TDP11, SUM(A.TDP12) AS TDP12,
			SUM(A.TPA01) AS TPA01, SUM(A.TPA02) AS TPA02, SUM(A.TPA03) AS TPA03, SUM(A.TPA04) AS TPA04, SUM(A.TPA05) AS TPA05, SUM(A.TPA06) AS TPA06,
			SUM(A.TPA07) AS TPA07, SUM(A.TPA08) AS TPA08, SUM(A.TPA09) AS TPA09, SUM(A.TPA10) AS TPA10, SUM(A.TPA11) AS TPA11, SUM(A.TPA12) AS TPA12,
			SUM(A.EDT01) AS EDT01, SUM(A.EDT02) AS EDT02, SUM(A.EDT03) AS EDT03, SUM(A.EDT04) AS EDT04, SUM(A.EDT05) AS EDT05, SUM(A.EDT06) AS EDT06,
			SUM(A.EDT07) AS EDT07, SUM(A.EDT08) AS EDT08, SUM(A.EDT09) AS EDT09, SUM(A.EDT10) AS EDT10, SUM(A.EDT11) AS EDT11, SUM(A.EDT12) AS EDT12,
			SUM(A.BDT01) AS BDT01, SUM(A.BDT02) AS BDT02, SUM(A.BDT03) AS BDT03, SUM(A.BDT04) AS BDT04, SUM(A.BDT05) AS BDT05, SUM(A.BDT06) AS BDT06,
			SUM(A.BDT07) AS BDT07, SUM(A.BDT08) AS BDT08, SUM(A.BDT09) AS BDT09, SUM(A.BDT10) AS BDT10, SUM(A.BDT11) AS BDT11, SUM(A.BDT12) AS BDT12,
			SUM(A.TX101) AS TX101, SUM(A.TX102) AS TX102, SUM(A.TX103) AS TX103, SUM(A.TX104) AS TX104, SUM(A.TX105) AS TX105, SUM(A.TX106) AS TX106,
			SUM(A.TX107) AS TX107, SUM(A.TX108) AS TX108, SUM(A.TX109) AS TX109, SUM(A.TX110) AS TX110, SUM(A.TX111) AS TX111, SUM(A.TX112) AS TX112,
			SUM(A.TX301) AS TX301, SUM(A.TX302) AS TX302, SUM(A.TX303) AS TX303, SUM(A.TX304) AS TX304, SUM(A.TX305) AS TX305, SUM(A.TX306) AS TX306,
			SUM(A.TX307) AS TX307, SUM(A.TX308) AS TX308, SUM(A.TX309) AS TX309, SUM(A.TX310) AS TX310, SUM(A.TX311) AS TX311, SUM(A.TX312) AS TX312,
			SUM(A.B1T01) AS B1T01, SUM(A.B1T02) AS B1T02, SUM(A.B1T03) AS B1T03, SUM(A.B1T04) AS B1T04, SUM(A.B1T05) AS B1T05, SUM(A.B1T06) AS B1T06,
			SUM(A.B1T07) AS B1T07, SUM(A.B1T08) AS B1T08, SUM(A.B1T09) AS B1T09, SUM(A.B1T10) AS B1T10, SUM(A.B1T11) AS B1T11, SUM(A.B1T12) AS B1T12,
			SUM(A.JMN01) AS JMN01, SUM(A.JMN02) AS JMN02, SUM(A.JMN03) AS JMN03, SUM(A.JMN04) AS JMN04, SUM(A.JMN05) AS JMN05, SUM(A.JMN06) AS JMN06,
			SUM(A.JMN07) AS JMN07, SUM(A.JMN08) AS JMN08, SUM(A.JMN09) AS JMN09, SUM(A.JMN10) AS JMN10, SUM(A.JMN11) AS JMN11, SUM(A.JMN12) AS JMN12,
			SUM(A.CHL01) AS CHL01, SUM(A.CHL02) AS CHL02, SUM(A.CHL03) AS CHL03, SUM(A.CHL04) AS CHL04, SUM(A.CHL05) AS CHL05, SUM(A.CHL06) AS CHL06,
			SUM(A.CHL07) AS CHL07, SUM(A.CHL08) AS CHL08, SUM(A.CHL09) AS CHL09, SUM(A.CHL10) AS CHL10, SUM(A.CHL11) AS CHL11, SUM(A.CHL12) AS CHL12,
			SUM(A.BGP01) AS BGP01, SUM(A.BGP02) AS BGP02, SUM(A.BGP03) AS BGP03, SUM(A.BGP04) AS BGP04, SUM(A.BGP05) AS BGP05, SUM(A.BGP06) AS BGP06,
			SUM(A.BGP07) AS BGP07, SUM(A.BGP08) AS BGP08, SUM(A.BGP09) AS BGP09, SUM(A.BGP10) AS BGP10, SUM(A.BGP11) AS BGP11, SUM(A.BGP12) AS BGP12,
			SUM(A.GYP01) AS GYP01, SUM(A.GYP02) AS GYP02, SUM(A.GYP03) AS GYP03, SUM(A.GYP04) AS GYP04, SUM(A.GYP05) AS GYP05, SUM(A.GYP06) AS GYP06,
			SUM(A.GYP07) AS GYP07, SUM(A.GYP08) AS GYP08, SUM(A.GYP09) AS GYP09, SUM(A.GYP10) AS GYP10, SUM(A.GYP11) AS GYP11, SUM(A.GYP12) AS GYP12,
			SUM(A.GSB01) AS GSB01, SUM(A.GSB02) AS GSB02, SUM(A.GSB03) AS GSB03, SUM(A.GSB04) AS GSB04, SUM(A.GSB05) AS GSB05, SUM(A.GSB06) AS GSB06,
			SUM(A.GSB07) AS GSB07, SUM(A.GSB08) AS GSB08, SUM(A.GSB09) AS GSB09, SUM(A.GSB10) AS GSB10, SUM(A.GSB11) AS GSB11, SUM(A.GSB12) AS GSB12,
			SUM(A.LAB01) AS LAB01, SUM(A.LAB02) AS LAB02, SUM(A.LAB03) AS LAB03, SUM(A.LAB04) AS LAB04, SUM(A.LAB05) AS LAB05, SUM(A.LAB06) AS LAB06,
			SUM(A.LAB07) AS LAB07, SUM(A.LAB08) AS LAB08, SUM(A.LAB09) AS LAB09, SUM(A.LAB10) AS LAB10, SUM(A.LAB11) AS LAB11, SUM(A.LAB12) AS LAB12,
			SUM(A.TTB01) AS TTB01, SUM(A.TTB02) AS TTB02, SUM(A.TTB03) AS TTB03, SUM(A.TTB04) AS TTB04, SUM(A.TTB05) AS TTB05, SUM(A.TTB06) AS TTB06,
			SUM(A.TTB07) AS TTB07, SUM(A.TTB08) AS TTB08, SUM(A.TTB09) AS TTB09, SUM(A.TTB10) AS TTB10, SUM(A.TTB11) AS TTB11, SUM(A.TTB12) AS TTB12
		
		FROM(
			SELECT 
				A.SABUN, A.PTJYM, A.IJJWN, A.SOFL1, A.KRWTX, A.FCWTX, A.ERILM, A.TX1AD, A.TX3AD, SUBSTR(B.PTYPE,1,1) AS TMPTY, B.KNYYM, B.TDPTMP,
				<!-- 과세총액 -->
				<!-- 출향자 급여계산시 처리된 30%비과세 B.BDP01P 포함 -->
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'01' THEN B.TDPTMP-(B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP)+B.BDP01P ELSE 0 END AS TDP01,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'02' THEN B.TDPTMP-(B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP)+B.BDP01P ELSE 0 END AS TDP02,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'03' THEN B.TDPTMP-(B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP)+B.BDP01P ELSE 0 END AS TDP03,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'04' THEN B.TDPTMP-(B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP)+B.BDP01P ELSE 0 END AS TDP04,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'05' THEN B.TDPTMP-(B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP)+B.BDP01P ELSE 0 END AS TDP05,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'06' THEN B.TDPTMP-(B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP)+B.BDP01P ELSE 0 END AS TDP06,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'07' THEN B.TDPTMP-(B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP)+B.BDP01P ELSE 0 END AS TDP07,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'08' THEN B.TDPTMP-(B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP)+B.BDP01P ELSE 0 END AS TDP08,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'09' THEN B.TDPTMP-(B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP)+B.BDP01P ELSE 0 END AS TDP09,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'10' THEN B.TDPTMP-(B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP)+B.BDP01P ELSE 0 END AS TDP10,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'11' THEN B.TDPTMP-(B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP)+B.BDP01P ELSE 0 END AS TDP11,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'12' THEN B.TDPTMP-(B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP)+B.BDP01P ELSE 0 END AS TDP12,
				<!-- 과세총액중 월고정 급여 -->
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'01' THEN B.JKSUDP+B.TESUDP+B.QLSUDP+B.BJSUDP+B.GSSUDP+B.WHSUDP+B.CJSUDP+B.JMSUDP+B.WFSUDP+B.YHSUDP+B.DOSUDP+B.GTSUDP+B.HASUDP+B.TQSUDP+B.FILL1P+B.FILL3P+B.KIBONP+B.YCSUDP+B.UCSUDP+B.SLSUDP+B.EDUCMP+B.PMKJMP+B.OTSUDP
				 ELSE 0 END AS TPA01,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'02' THEN B.JKSUDP+B.TESUDP+B.QLSUDP+B.BJSUDP+B.GSSUDP+B.WHSUDP+B.CJSUDP+B.JMSUDP+B.WFSUDP+B.YHSUDP+B.DOSUDP+B.GTSUDP+B.HASUDP+B.TQSUDP+B.FILL1P+B.FILL3P+B.KIBONP+B.YCSUDP+B.UCSUDP+B.SLSUDP+B.EDUCMP+B.PMKJMP+B.OTSUDP
				 ELSE 0 END AS TPA02,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'03' THEN B.JKSUDP+B.TESUDP+B.QLSUDP+B.BJSUDP+B.GSSUDP+B.WHSUDP+B.CJSUDP+B.JMSUDP+B.WFSUDP+B.YHSUDP+B.DOSUDP+B.GTSUDP+B.HASUDP+B.TQSUDP+B.FILL1P+B.FILL3P+B.KIBONP+B.YCSUDP+B.UCSUDP+B.SLSUDP+B.EDUCMP+B.PMKJMP+B.OTSUDP
				 ELSE 0 END AS TPA03,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'04' THEN B.JKSUDP+B.TESUDP+B.QLSUDP+B.BJSUDP+B.GSSUDP+B.WHSUDP+B.CJSUDP+B.JMSUDP+B.WFSUDP+B.YHSUDP+B.DOSUDP+B.GTSUDP+B.HASUDP+B.TQSUDP+B.FILL1P+B.FILL3P+B.KIBONP+B.YCSUDP+B.UCSUDP+B.SLSUDP+B.EDUCMP+B.PMKJMP+B.OTSUDP
				 ELSE 0 END AS TPA04,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'05' THEN B.JKSUDP+B.TESUDP+B.QLSUDP+B.BJSUDP+B.GSSUDP+B.WHSUDP+B.CJSUDP+B.JMSUDP+B.WFSUDP+B.YHSUDP+B.DOSUDP+B.GTSUDP+B.HASUDP+B.TQSUDP+B.FILL1P+B.FILL3P+B.KIBONP+B.YCSUDP+B.UCSUDP+B.SLSUDP+B.EDUCMP+B.PMKJMP+B.OTSUDP
				 ELSE 0 END AS TPA05,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'06' THEN B.JKSUDP+B.TESUDP+B.QLSUDP+B.BJSUDP+B.GSSUDP+B.WHSUDP+B.CJSUDP+B.JMSUDP+B.WFSUDP+B.YHSUDP+B.DOSUDP+B.GTSUDP+B.HASUDP+B.TQSUDP+B.FILL1P+B.FILL3P+B.KIBONP+B.YCSUDP+B.UCSUDP+B.SLSUDP+B.EDUCMP+B.PMKJMP+B.OTSUDP
				 ELSE 0 END AS TPA06,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'07' THEN B.JKSUDP+B.TESUDP+B.QLSUDP+B.BJSUDP+B.GSSUDP+B.WHSUDP+B.CJSUDP+B.JMSUDP+B.WFSUDP+B.YHSUDP+B.DOSUDP+B.GTSUDP+B.HASUDP+B.TQSUDP+B.FILL1P+B.FILL3P+B.KIBONP+B.YCSUDP+B.UCSUDP+B.SLSUDP+B.EDUCMP+B.PMKJMP+B.OTSUDP
				 ELSE 0 END AS TPA07,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'08' THEN B.JKSUDP+B.TESUDP+B.QLSUDP+B.BJSUDP+B.GSSUDP+B.WHSUDP+B.CJSUDP+B.JMSUDP+B.WFSUDP+B.YHSUDP+B.DOSUDP+B.GTSUDP+B.HASUDP+B.TQSUDP+B.FILL1P+B.FILL3P+B.KIBONP+B.YCSUDP+B.UCSUDP+B.SLSUDP+B.EDUCMP+B.PMKJMP+B.OTSUDP
				 ELSE 0 END AS TPA08,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'09' THEN B.JKSUDP+B.TESUDP+B.QLSUDP+B.BJSUDP+B.GSSUDP+B.WHSUDP+B.CJSUDP+B.JMSUDP+B.WFSUDP+B.YHSUDP+B.DOSUDP+B.GTSUDP+B.HASUDP+B.TQSUDP+B.FILL1P+B.FILL3P+B.KIBONP+B.YCSUDP+B.UCSUDP+B.SLSUDP+B.EDUCMP+B.PMKJMP+B.OTSUDP
				 ELSE 0 END AS TPA09,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'10' THEN B.JKSUDP+B.TESUDP+B.QLSUDP+B.BJSUDP+B.GSSUDP+B.WHSUDP+B.CJSUDP+B.JMSUDP+B.WFSUDP+B.YHSUDP+B.DOSUDP+B.GTSUDP+B.HASUDP+B.TQSUDP+B.FILL1P+B.FILL3P+B.KIBONP+B.YCSUDP+B.UCSUDP+B.SLSUDP+B.EDUCMP+B.PMKJMP+B.OTSUDP
				 ELSE 0 END AS TPA10,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'11' THEN B.JKSUDP+B.TESUDP+B.QLSUDP+B.BJSUDP+B.GSSUDP+B.WHSUDP+B.CJSUDP+B.JMSUDP+B.WFSUDP+B.YHSUDP+B.DOSUDP+B.GTSUDP+B.HASUDP+B.TQSUDP+B.FILL1P+B.FILL3P+B.KIBONP+B.YCSUDP+B.UCSUDP+B.SLSUDP+B.EDUCMP+B.PMKJMP+B.OTSUDP
				 ELSE 0 END AS TPA11,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'12' THEN B.JKSUDP+B.TESUDP+B.QLSUDP+B.BJSUDP+B.GSSUDP+B.WHSUDP+B.CJSUDP+B.JMSUDP+B.WFSUDP+B.YHSUDP+B.DOSUDP+B.GTSUDP+B.HASUDP+B.TQSUDP+B.FILL1P+B.FILL3P+B.KIBONP+B.YCSUDP+B.UCSUDP+B.SLSUDP+B.EDUCMP+B.PMKJMP+B.OTSUDP
				 ELSE 0 END AS TPA12,
				<!-- 심야연장휴일 과세금액 집게 -->
				<!-- 과세총애=심야연장휴일과세율-  -->
				<!-- ETBFF=B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP --> 
				<!-- 
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'01' THEN (B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP) ELSE 0 END AS EDT01,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'02' THEN (B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP) ELSE 0 END AS EDT02,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'03' THEN (B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP) ELSE 0 END AS EDT03,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'04' THEN (B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP) ELSE 0 END AS EDT04,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'05' THEN (B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP) ELSE 0 END AS EDT05,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'06' THEN (B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP) ELSE 0 END AS EDT06,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'07' THEN (B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP) ELSE 0 END AS EDT07,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'08' THEN (B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP) ELSE 0 END AS EDT08,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'09' THEN (B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP) ELSE 0 END AS EDT09,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'10' THEN (B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP) ELSE 0 END AS EDT10,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'11' THEN (B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP) ELSE 0 END AS EDT11,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'12' THEN (B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP) ELSE 0 END AS EDT12,
				 -->
				 <!-- 0으로 초기화 -->
				0 AS EDT01, 0 AS EDT02, 0 AS EDT03, 0 AS EDT04, 0 AS EDT05, 0 AS EDT06, 0 AS EDT07, 0 AS EDT08, 0 AS EDT09, 0 AS EDT10, 0 AS EDT11, 0 AS EDT12,
				<!-- 심야연장휴일  -->
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'01' THEN (B.OVSBIP+B.ANSBIP+B.HKSBIP+B.PMKBMP+B.YUSBIP+B.ORSBIP)+(B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP) ELSE 0 END AS BDT01,	
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'02' THEN (B.OVSBIP+B.ANSBIP+B.HKSBIP+B.PMKBMP+B.YUSBIP+B.ORSBIP)+(B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP) ELSE 0 END AS BDT02,	
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'03' THEN (B.OVSBIP+B.ANSBIP+B.HKSBIP+B.PMKBMP+B.YUSBIP+B.ORSBIP)+(B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP) ELSE 0 END AS BDT03,	
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'04' THEN (B.OVSBIP+B.ANSBIP+B.HKSBIP+B.PMKBMP+B.YUSBIP+B.ORSBIP)+(B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP) ELSE 0 END AS BDT04,	
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'05' THEN (B.OVSBIP+B.ANSBIP+B.HKSBIP+B.PMKBMP+B.YUSBIP+B.ORSBIP)+(B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP) ELSE 0 END AS BDT05,	
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'06' THEN (B.OVSBIP+B.ANSBIP+B.HKSBIP+B.PMKBMP+B.YUSBIP+B.ORSBIP)+(B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP) ELSE 0 END AS BDT06,	
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'07' THEN (B.OVSBIP+B.ANSBIP+B.HKSBIP+B.PMKBMP+B.YUSBIP+B.ORSBIP)+(B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP) ELSE 0 END AS BDT07,	
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'08' THEN (B.OVSBIP+B.ANSBIP+B.HKSBIP+B.PMKBMP+B.YUSBIP+B.ORSBIP)+(B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP) ELSE 0 END AS BDT08,	
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'09' THEN (B.OVSBIP+B.ANSBIP+B.HKSBIP+B.PMKBMP+B.YUSBIP+B.ORSBIP)+(B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP) ELSE 0 END AS BDT09,	
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'10' THEN (B.OVSBIP+B.ANSBIP+B.HKSBIP+B.PMKBMP+B.YUSBIP+B.ORSBIP)+(B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP) ELSE 0 END AS BDT10,	
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'11' THEN (B.OVSBIP+B.ANSBIP+B.HKSBIP+B.PMKBMP+B.YUSBIP+B.ORSBIP)+(B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP) ELSE 0 END AS BDT11,	
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'12' THEN (B.OVSBIP+B.ANSBIP+B.HKSBIP+B.PMKBMP+B.YUSBIP+B.ORSBIP)+(B.OVSGAP+B.ANSGAP+B.HKSGAP+B.YUSGAP+B.ORSGAP) ELSE 0 END AS BDT12,	
				<!-- 년차세금 갑근세  -->
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'01' THEN B.TAX1MP ELSE 0 END AS TX101,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'02' THEN B.TAX1MP ELSE 0 END AS TX102,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'03' THEN B.TAX1MP ELSE 0 END AS TX103,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'04' THEN B.TAX1MP ELSE 0 END AS TX104,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'05' THEN B.TAX1MP ELSE 0 END AS TX105,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'06' THEN B.TAX1MP ELSE 0 END AS TX106,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'07' THEN B.TAX1MP ELSE 0 END AS TX107,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'08' THEN B.TAX1MP ELSE 0 END AS TX108,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'09' THEN B.TAX1MP ELSE 0 END AS TX109,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'10' THEN B.TAX1MP ELSE 0 END AS TX110,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'11' THEN B.TAX1MP ELSE 0 END AS TX111,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'12' THEN B.TAX1MP ELSE 0 END AS TX112,
				<!-- 년차세금 주민세  -->
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'01' THEN B.TAX3MP ELSE 0 END AS TX301,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'02' THEN B.TAX3MP ELSE 0 END AS TX302,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'03' THEN B.TAX3MP ELSE 0 END AS TX303,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'04' THEN B.TAX3MP ELSE 0 END AS TX304,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'05' THEN B.TAX3MP ELSE 0 END AS TX305,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'06' THEN B.TAX3MP ELSE 0 END AS TX306,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'07' THEN B.TAX3MP ELSE 0 END AS TX307,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'08' THEN B.TAX3MP ELSE 0 END AS TX308,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'09' THEN B.TAX3MP ELSE 0 END AS TX309,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'10' THEN B.TAX3MP ELSE 0 END AS TX310,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'11' THEN B.TAX3MP ELSE 0 END AS TX311,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'12' THEN B.TAX3MP ELSE 0 END AS TX312,
				<!-- 년 급여상여 고용보험  -->
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'01' THEN (B.TAX4MP+B.PMTX4P) 
				WHEN SUBSTR(B.PTYPE,1,1)='C' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'01' THEN B.TAX4MP ELSE 0 END AS B1T01,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'02' THEN (B.TAX4MP+B.PMTX4P)
				WHEN SUBSTR(B.PTYPE,1,1)='C' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'02' THEN B.TAX4MP ELSE 0 END AS B1T02,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'03' THEN (B.TAX4MP+B.PMTX4P)
				WHEN SUBSTR(B.PTYPE,1,1)='C' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'03' THEN B.TAX4MP ELSE 0 END AS B1T03,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'04' THEN (B.TAX4MP+B.PMTX4P)
				WHEN SUBSTR(B.PTYPE,1,1)='C' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'04' THEN B.TAX4MP ELSE 0 END AS B1T04,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'05' THEN (B.TAX4MP+B.PMTX4P)
				WHEN SUBSTR(B.PTYPE,1,1)='C' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'05' THEN B.TAX4MP ELSE 0 END AS B1T05,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'06' THEN (B.TAX4MP+B.PMTX4P)
				WHEN SUBSTR(B.PTYPE,1,1)='C' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'06' THEN B.TAX4MP ELSE 0 END AS B1T06,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'07' THEN (B.TAX4MP+B.PMTX4P)
				WHEN SUBSTR(B.PTYPE,1,1)='C' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'07' THEN B.TAX4MP ELSE 0 END AS B1T07,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'08' THEN (B.TAX4MP+B.PMTX4P)
				WHEN SUBSTR(B.PTYPE,1,1)='C' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'08' THEN B.TAX4MP ELSE 0 END AS B1T08,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'09' THEN (B.TAX4MP+B.PMTX4P)
				WHEN SUBSTR(B.PTYPE,1,1)='C' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'09' THEN B.TAX4MP ELSE 0 END AS B1T09,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'10' THEN (B.TAX4MP+B.PMTX4P)
				WHEN SUBSTR(B.PTYPE,1,1)='C' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'10' THEN B.TAX4MP ELSE 0 END AS B1T10,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'11' THEN (B.TAX4MP+B.PMTX4P)
				WHEN SUBSTR(B.PTYPE,1,1)='C' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'11' THEN B.TAX4MP ELSE 0 END AS B1T11,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'12' THEN (B.TAX4MP+B.PMTX4P)
				WHEN SUBSTR(B.PTYPE,1,1)='C' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'12' THEN B.TAX4MP ELSE 0 END AS B1T12,
				<!-- 년급여 재형저축  -->
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'01' THEN B.JMON1P ELSE 0 END AS JMN01,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'02' THEN B.JMON1P ELSE 0 END AS JMN02,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'03' THEN B.JMON1P ELSE 0 END AS JMN03,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'04' THEN B.JMON1P ELSE 0 END AS JMN04,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'05' THEN B.JMON1P ELSE 0 END AS JMN05,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'06' THEN B.JMON1P ELSE 0 END AS JMN06,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'07' THEN B.JMON1P ELSE 0 END AS JMN07,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'08' THEN B.JMON1P ELSE 0 END AS JMN08,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'09' THEN B.JMON1P ELSE 0 END AS JMN09,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'10' THEN B.JMON1P ELSE 0 END AS JMN10,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'11' THEN B.JMON1P ELSE 0 END AS JMN11,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'12' THEN B.JMON1P ELSE 0 END AS JMN12,
				<!-- 년 급여 재형기금  -->
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'01' THEN B.CHU1MP ELSE 0 END AS CHL01,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'02' THEN B.CHU1MP ELSE 0 END AS CHL02,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'03' THEN B.CHU1MP ELSE 0 END AS CHL03,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'04' THEN B.CHU1MP ELSE 0 END AS CHL04,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'05' THEN B.CHU1MP ELSE 0 END AS CHL05,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'06' THEN B.CHU1MP ELSE 0 END AS CHL06,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'07' THEN B.CHU1MP ELSE 0 END AS CHL07,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'08' THEN B.CHU1MP ELSE 0 END AS CHL08,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'09' THEN B.CHU1MP ELSE 0 END AS CHL09,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'10' THEN B.CHU1MP ELSE 0 END AS CHL10,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'11' THEN B.CHU1MP ELSE 0 END AS CHL11,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'12' THEN B.CHU1MP ELSE 0 END AS CHL12,
				<!-- 년급여 의료보험  -->
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'01' THEN (B.BGPPCP+B.PMBGCP) ELSE 0 END AS BGP01,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'02' THEN (B.BGPPCP+B.PMBGCP) ELSE 0 END AS BGP02,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'03' THEN (B.BGPPCP+B.PMBGCP) ELSE 0 END AS BGP03,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'04' THEN (B.BGPPCP+B.PMBGCP) ELSE 0 END AS BGP04,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'05' THEN (B.BGPPCP+B.PMBGCP) ELSE 0 END AS BGP05,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'06' THEN (B.BGPPCP+B.PMBGCP) ELSE 0 END AS BGP06,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'07' THEN (B.BGPPCP+B.PMBGCP) ELSE 0 END AS BGP07,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'08' THEN (B.BGPPCP+B.PMBGCP) ELSE 0 END AS BGP08,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'09' THEN (B.BGPPCP+B.PMBGCP) ELSE 0 END AS BGP09,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'10' THEN (B.BGPPCP+B.PMBGCP) ELSE 0 END AS BGP10,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'11' THEN (B.BGPPCP+B.PMBGCP) ELSE 0 END AS BGP11,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'12' THEN (B.BGPPCP+B.PMBGCP) ELSE 0 END AS BGP12,
				<!-- 년급여 연금보험  -->
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'01' THEN (B.GYPPCP+B.PMGYCP) ELSE 0 END AS GYP01,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'02' THEN (B.GYPPCP+B.PMGYCP) ELSE 0 END AS GYP02,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'03' THEN (B.GYPPCP+B.PMGYCP) ELSE 0 END AS GYP03,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'04' THEN (B.GYPPCP+B.PMGYCP) ELSE 0 END AS GYP04,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'05' THEN (B.GYPPCP+B.PMGYCP) ELSE 0 END AS GYP05,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'06' THEN (B.GYPPCP+B.PMGYCP) ELSE 0 END AS GYP06,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'07' THEN (B.GYPPCP+B.PMGYCP) ELSE 0 END AS GYP07,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'08' THEN (B.GYPPCP+B.PMGYCP) ELSE 0 END AS GYP08,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'09' THEN (B.GYPPCP+B.PMGYCP) ELSE 0 END AS GYP09,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'10' THEN (B.GYPPCP+B.PMGYCP) ELSE 0 END AS GYP10,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'11' THEN (B.GYPPCP+B.PMGYCP) ELSE 0 END AS GYP11,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'12' THEN (B.GYPPCP+B.PMGYCP) ELSE 0 END AS GYP12,
				<!-- 년급여상여근로소득공  -->
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'01' THEN B.GSSGMP ELSE 0 END AS GSB01,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'02' THEN B.GSSGMP ELSE 0 END AS GSB02,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'03' THEN B.GSSGMP ELSE 0 END AS GSB03,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'04' THEN B.GSSGMP ELSE 0 END AS GSB04,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'05' THEN B.GSSGMP ELSE 0 END AS GSB05,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'06' THEN B.GSSGMP ELSE 0 END AS GSB06,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'07' THEN B.GSSGMP ELSE 0 END AS GSB07,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'08' THEN B.GSSGMP ELSE 0 END AS GSB08,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'09' THEN B.GSSGMP ELSE 0 END AS GSB09,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'10' THEN B.GSSGMP ELSE 0 END AS GSB10,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'11' THEN B.GSSGMP ELSE 0 END AS GSB11,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='P' OR SUBSTR(B.PTYPE,1,1)='B') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'12' THEN B.GSSGMP ELSE 0 END AS GSB12,
				<!-- 년급여 노조비  -->
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'01' THEN B.LABOMP ELSE 0 END AS LAB01,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'02' THEN B.LABOMP ELSE 0 END AS LAB02,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'03' THEN B.LABOMP ELSE 0 END AS LAB03,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'04' THEN B.LABOMP ELSE 0 END AS LAB04,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'05' THEN B.LABOMP ELSE 0 END AS LAB05,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'06' THEN B.LABOMP ELSE 0 END AS LAB06,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'07' THEN B.LABOMP ELSE 0 END AS LAB07,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'08' THEN B.LABOMP ELSE 0 END AS LAB08,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'09' THEN B.LABOMP ELSE 0 END AS LAB09,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'10' THEN B.LABOMP ELSE 0 END AS LAB10,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'11' THEN B.LABOMP ELSE 0 END AS LAB11,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'12' THEN B.LABOMP ELSE 0 END AS LAB12,
				<!-- 출향자 급여계산시 처리된 30%비과세 B.BDP01P 포함 -->
				<!-- 
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'01' THEN B.BDP01P ELSE 0 END AS BPA01,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'02' THEN B.BDP01P ELSE 0 END AS BPA02,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'03' THEN B.BDP01P ELSE 0 END AS BPA03,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'04' THEN B.BDP01P ELSE 0 END AS BPA04,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'05' THEN B.BDP01P ELSE 0 END AS BPA05,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'06' THEN B.BDP01P ELSE 0 END AS BPA06,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'07' THEN B.BDP01P ELSE 0 END AS BPA07,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'08' THEN B.BDP01P ELSE 0 END AS BPA08,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'09' THEN B.BDP01P ELSE 0 END AS BPA09,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'10' THEN B.BDP01P ELSE 0 END AS BPA10,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'11' THEN B.BDP01P ELSE 0 END AS BPA11,
				CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'12' THEN B.BDP01P ELSE 0 END AS BPA12,
				 -->
				<!-- 상여집계  -->
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'01' THEN B.TDPTMP ELSE 0 END AS TTB01,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'02' THEN B.TDPTMP ELSE 0 END AS TTB02,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'03' THEN B.TDPTMP ELSE 0 END AS TTB03,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'04' THEN B.TDPTMP ELSE 0 END AS TTB04,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'05' THEN B.TDPTMP ELSE 0 END AS TTB05,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'06' THEN B.TDPTMP ELSE 0 END AS TTB06,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'07' THEN B.TDPTMP ELSE 0 END AS TTB07,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'08' THEN B.TDPTMP ELSE 0 END AS TTB08,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'09' THEN B.TDPTMP ELSE 0 END AS TTB09,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'10' THEN B.TDPTMP ELSE 0 END AS TTB10,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'11' THEN B.TDPTMP ELSE 0 END AS TTB11,
				CASE WHEN (SUBSTR(B.PTYPE,1,1)='B' OR SUBSTR(B.PTYPE,1,1)='C') AND B.KNYYM=SUBSTR(A.PTJYM,1,4)||'12' THEN B.TDPTMP ELSE 0 END AS TTB12
			FROM(
				SELECT
					A.SABUN, A.PTJYM, A.IJJWN, A.SOFL1, A.KRWTX, A.FCWTX, A.ERILM, A.TX1AD, A.TX3AD
				<!-- 이주지원금, 상품반지대, 국내근로과세, 국외근로과세, 임원퇴직소득한도, 추가갑근세, 추가주민세-->
				FROM
					$LIB3$.HAY011PF A, $LIB3$.HMD020PF B
				WHERE
					A.SABUN=B.SABUN ) A
			LEFT OUTER JOIN $LIB3$.HPC200PF B ON A.SABUN=B.SABUN AND B.KNYYM BETWEEN SUBSTR(A.PTJYM,1,4)||'01' AND SUBSTR(A.PTJYM,1,4)||'12')A
		GROUP BY A.SABUN, A.PTJYM )A
	<isEqual property="COMPS" compareValue="E1">
	LEFT OUTER JOIN $LIB3$.HPM100PF B ON A.SABUN=B.SABUN AND SUBSTR(A.TOTYM,1,4)=B.YYEAR
	</isEqual>
	<isNotEqual property="COMPS" compareValue="E1">
	LEFT OUTER JOIN $LIB3$.HPM100PF B ON A.SABUN=B.SABUN AND SUBSTR(A.TOTYM,1,4)-1=B.YYEAR
	</isNotEqual>
	</select>
	<insert id="insertHAYZ072C" parameterClass="java.util.HashMap" >
	INSERT INTO $LIB3$.HAY071PF 
		(SABUN, TOTYM, TDP01, TDP02, TDP03, TDP04, TDP05, TDP06, TDP07, TDP08, TDP09, TDP10, TDP11, TDP12, 
		TPA01, TPA02, TPA03, TPA04, TPA05, TPA06, TPA07, TPA08, TPA09, TPA10, TPA11, TPA12,
		EDT01, EDT02, EDT03, EDT04, EDT05, EDT06, EDT07, EDT08, EDT09, EDT10, EDT11, EDT12,
		BDT01, BDT02, BDT03, BDT04, BDT05, BDT06, BDT07, BDT08, BDT09, BDT10, BDT11, BDT12,
		TX101, TX102, TX103, TX104, TX105, TX106, TX107, TX108, TX109, TX110, TX111, TX112,
		TX301, TX302, TX303, TX304, TX305, TX306, TX307, TX308, TX309, TX310, TX311, TX312,
		B1T01, B1T02, B1T03, B1T04, B1T05, B1T06, B1T07, B1T08, B1T09, B1T10, B1T11, B1T12,
		JMN01, JMN02, JMN03, JMN04, JMN05, JMN06, JMN07, JMN08, JMN09, JMN10, JMN11, JMN12,
		CHL01, CHL02, CHL03, CHL04, CHL05, CHL06, CHL07, CHL08, CHL09, CHL10, CHL11, CHL12,
		BGP01, BGP02, BGP03, BGP04, BGP05, BGP06, BGP07, BGP08, BGP09, BGP10, BGP11, BGP12,
		GYP01, GYP02, GYP03, GYP04, GYP05, GYP06, GYP07, GYP08, GYP09, GYP10, GYP11, GYP12,
		GSB01, GSB02, GSB03, GSB04, GSB05, GSB06, GSB07, GSB08, GSB09, GSB10, GSB11, GSB12,
		LAB01, LAB02, LAB03, LAB04, LAB05, LAB06, LAB07, LAB08, LAB09, LAB10, LAB11, LAB12,
		TTB01, TTB02, TTB03, TTB04, TTB05, TTB06, TTB07, TTB08, TTB09, TTB10, TTB11, TTB12)
	VALUES
		($SABUN$, $TOTYM$, $TDP01$, $TDP02$, $TDP03$, $TDP04$, $TDP05$, $TDP06$, $TDP07$, $TDP08$, $TDP09$, $TDP10$, $TDP11$, $TDP12$,
		$TPA01$, $TPA02$, $TPA03$, $TPA04$, $TPA05$, $TPA06$, $TPA07$, $TPA08$, $TPA09$, $TPA10$, $TPA11$, $TPA12$,
		$EDT01$, $EDT02$, $EDT03$, $EDT04$, $EDT05$, $EDT06$, $EDT07$, $EDT08$, $EDT09$, $EDT10$, $EDT11$, $EDT12$,
		$BDT01$, $BDT02$, $BDT03$, $BDT04$, $BDT05$, $BDT06$, $BDT07$, $BDT08$, $BDT09$, $BDT10$, $BDT11$, $BDT12$,
		$TX101$, $TX102$, $TX103$, $TX104$, $TX105$, $TX106$, $TX107$, $TX108$, $TX109$, $TX110$, $TX111$, $TX112$,
		$TX301$, $TX302$, $TX303$, $TX304$, $TX305$, $TX306$, $TX307$, $TX308$, $TX309$, $TX310$, $TX311$, $TX312$,
		$B1T01$, $B1T02$, $B1T03$, $B1T04$, $B1T05$, $B1T06$, $B1T07$, $B1T08$, $B1T09$, $B1T10$, $B1T11$, $B1T12$,
		$JMN01$, $JMN02$, $JMN03$, $JMN04$, $JMN05$, $JMN06$, $JMN07$, $JMN08$, $JMN09$, $JMN10$, $JMN11$, $JMN12$,
		$CHL01$, $CHL02$, $CHL03$, $CHL04$, $CHL05$, $CHL06$, $CHL07$, $CHL08$, $CHL09$, $CHL10$, $CHL11$, $CHL12$,
		$BGP01$, $BGP02$, $BGP03$, $BGP04$, $BGP05$, $BGP06$, $BGP07$, $BGP08$, $BGP09$, $BGP10$, $BGP11$, $BGP12$,
		$GYP01$, $GYP02$, $GYP03$, $GYP04$, $GYP05$, $GYP06$, $GYP07$, $GYP08$, $GYP09$, $GYP10$, $GYP11$, $GYP12$,
		$GSB01$, $GSB02$, $GSB03$, $GSB04$, $GSB05$, $GSB06$, $GSB07$, $GSB08$, $GSB09$, $GSB10$, $GSB11$, $GSB12$,
		$LAB01$, $LAB02$, $LAB03$, $LAB04$, $LAB05$, $LAB06$, $LAB07$, $LAB08$, $LAB09$, $LAB10$, $LAB11$, $LAB12$,
		$TTB01$, $TTB02$, $TTB03$, $TTB04$, $TTB05$, $TTB06$, $TTB07$, $TTB08$, $TTB09$, $TTB10$, $TTB11$, $TTB12$)
	</insert>
	<select id="selectHAYZ071" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	<!--
	급여과세, 상여과세, 과세, 비과세, 외국인비과세, 국외근로수당, 그밖의비과세, 갑근세, 주민세, 의료보험, 국민연금, 세액공제, 고용보험, 노조회비
	 -->
	SELECT
		A.SABUN, A.TOTYM,
		A.TDP01, A.TDP02, A.TDP03, A.TDP04, A.TDP05, A.TDP06, A.TDP07, A.TDP08, A.TDP09, A.TDP10, A.TDP11, A.TDP12,
		A.TTB01, A.TTB02, A.TTB03, A.TTB04, A.TTB05, A.TTB06, A.TTB07, A.TTB08, A.TTB09, A.TTB10, A.TTB11, A.TTB12,
		A.EDT01, A.EDT02, A.EDT03, A.EDT04, A.EDT05, A.EDT06, A.EDT07, A.EDT08, A.EDT09, A.EDT10, A.EDT11, A.EDT12,
		A.BDT01, A.BDT02, A.BDT03, A.BDT04, A.BDT05, A.BDT06, A.BDT07, A.BDT08, A.BDT09, A.BDT10, A.BDT11, A.BDT12,
		A.BPA01, A.BPA02, A.BPA03, A.BPA04, A.BPA05, A.BPA06, A.BPA07, A.BPA08, A.BPA09, A.BPA10, A.BPA11, A.BPA12,
		A.BPT01, A.BPT02, A.BPT03, A.BPT04, A.BPT05, A.BPT06, A.BPT07, A.BPT08, A.BPT09, A.BPT10, A.BPT11, A.BPT12,
		A.BPG01, A.BPG02, A.BPG03, A.BPG04, A.BPG05, A.BPG06, A.BPG07, A.BPG08, A.BPG09, A.BPG10, A.BPG11, A.BPG12,
		A.TX101, A.TX102, A.TX103, A.TX104, A.TX105, A.TX106, A.TX107, A.TX108, A.TX109, A.TX110, A.TX111, A.TX112,
		A.TX301, A.TX302, A.TX303, A.TX304, A.TX305, A.TX306, A.TX307, A.TX308, A.TX309, A.TX310, A.TX311, A.TX312,
		A.BGP01, A.BGP02, A.BGP03, A.BGP04, A.BGP05, A.BGP06, A.BGP07, A.BGP08, A.BGP09, A.BGP10, A.BGP11, A.BGP12,
		A.GYP01, A.GYP02, A.GYP03, A.GYP04, A.GYP05, A.GYP06, A.GYP07, A.GYP08, A.GYP09, A.GYP10, A.GYP11, A.GYP12,
		A.GSB01, A.GSB02, A.GSB03, A.GSB04, A.GSB05, A.GSB06, A.GSB07, A.GSB08, A.GSB09, A.GSB10, A.GSB11, A.GSB12,
		A.B1T01, A.B1T02, A.B1T03, A.B1T04, A.B1T05, A.B1T06, A.B1T07, A.B1T08, A.B1T09, A.B1T10, A.B1T11, A.B1T12,
		A.LAB01, A.LAB02, A.LAB03, A.LAB04, A.LAB05, A.LAB06, A.LAB07, A.LAB08, A.LAB09, A.LAB10, A.LAB11, A.LAB12
	<!--
		A.SABUN, A.TOTYM,
		A.TDP01, A.TDP02, A.TDP03, A.TDP04, A.TDP05, A.TDP06, A.TDP07, A.TDP08, A.TDP09, A.TDP10, A.TDP11, A.TDP12,
		A.TTB01, A.TTB02, A.TTB03, A.TTB04, A.TTB05, A.TTB06, A.TTB07, A.TTB08, A.TTB09, A.TTB10, A.TTB11, A.TTB12,
		A.EDT01, A.EDT02, A.EDT03, A.EDT04, A.EDT05, A.EDT06, A.EDT07, A.EDT08, A.EDT09, A.EDT10, A.EDT11, A.EDT12,
		A.BDT01, A.BDT02, A.BDT03, A.BDT04, A.BDT05, A.BDT06, A.BDT07, A.BDT08, A.BDT09, A.BDT10, A.BDT11, A.BDT12,
		A.BPA01, A.BPA02, A.BPA03, A.BPA04, A.BPA05, A.BPA06, A.BPA07, A.BPA08, A.BPA09, A.BPA10, A.BPA11, A.BPA12,
		A.BPT01, A.BPT02, A.BPT03, A.BPT04, A.BPT05, A.BPT06, A.BPT07, A.BPT08, A.BPT09, A.BPT10, A.BPT11, A.BPT12,
		A.BPG01, A.BPG02, A.BPG03, A.BPG04, A.BPG05, A.BPG06, A.BPG07, A.BPG08, A.BPG09, A.BPG10, A.BPG11, A.BPG12,
		A.TX101, A.TX102, A.TX103, A.TX104, A.TX105, A.TX106, A.TX107, A.TX108, A.TX109, A.TX110, A.TX111, A.TX112,
		A.TX201, A.TX202, A.TX203, A.TX204, A.TX205, A.TX206, A.TX207, A.TX208, A.TX209, A.TX210, A.TX211, A.TX212,
		A.TX301, A.TX302, A.TX303, A.TX304, A.TX305, A.TX306, A.TX307, A.TX308, A.TX309, A.TX310, A.TX311, A.TX312,
		A.JMN01, A.JMN02, A.JMN03, A.JMN04, A.JMN05, A.JMN06, A.JMN07, A.JMN08, A.JMN09, A.JMN10, A.JMN11, A.JMN12,
		A.CHL01, A.CHL02, A.CHL03, A.CHL04, A.CHL05, A.CHL06, A.CHL07, A.CHL08, A.CHL09, A.CHL10, A.CHL11, A.CHL12,
		A.BGP01, A.BGP02, A.BGP03, A.BGP04, A.BGP05, A.BGP06, A.BGP07, A.BGP08, A.BGP09, A.BGP10, A.BGP11, A.BGP12,
		A.GYP01, A.GYP02, A.GYP03, A.GYP04, A.GYP05, A.GYP06, A.GYP07, A.GYP08, A.GYP09, A.GYP10, A.GYP11, A.GYP12,
		A.GSB01, A.GSB02, A.GSB03, A.GSB04, A.GSB05, A.GSB06, A.GSB07, A.GSB08, A.GSB09, A.GSB10, A.GSB11, A.GSB12,
		A.B1T01, A.B1T02, A.B1T03, A.B1T04, A.B1T05, A.B1T06, A.B1T07, A.B1T08, A.B1T09, A.B1T10, A.B1T11, A.B1T12,
		A.LAB01, A.LAB02, A.LAB03, A.LAB04, A.LAB05, A.LAB06, A.LAB07, A.LAB08, A.LAB09, A.LAB10, A.LAB11, A.LAB12,
		A.TPA01, A.TPA02, A.TPA03, A.TPA04, A.TPA05, A.TPA06, A.TPA07, A.TPA08, A.TPA09, A.TPA10, A.TPA11, A.TPA12 
	 -->
	FROM
		$LIB3$.HAY071PF A
	<dynamic prepend="WHERE">
		<isNotEmpty prepend="AND" property="SABUN">
			A.SABUN = $SABUN$
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="TOTYM">
			A.TOTYM=$TOTYM$
		</isNotEmpty>
	</dynamic>
	</select>
	<select id="selectHAYZ071_Check" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
		COUNT(*) CNT 
	FROM
		$LIB3$.HAY071PF
	WHERE 
		SABUN = #SABUN#
		AND TOTYM = $TOTYM$
	</select>
	<insert id="insertHAYZ071" parameterClass="java.util.HashMap" >
	INSERT INTO $LIB3$.HAY071PF(
		SABUN, TOTYM,
		TDP01, TDP02, TDP03, TDP04, TDP05, TDP06, TDP07, TDP08, TDP09, TDP10, TDP11, TDP12,
		TTB01, TTB02, TTB03, TTB04, TTB05, TTB06, TTB07, TTB08, TTB09, TTB10, TTB11, TTB12,
		EDT01, EDT02, EDT03, EDT04, EDT05, EDT06, EDT07, EDT08, EDT09, EDT10, EDT11, EDT12,
		BDT01, BDT02, BDT03, BDT04, BDT05, BDT06, BDT07, BDT08, BDT09, BDT10, BDT11, BDT12,
		BPA01, BPA02, BPA03, BPA04, BPA05, BPA06, BPA07, BPA08, BPA09, BPA10, BPA11, BPA12,
		BPT01, BPT02, BPT03, BPT04, BPT05, BPT06, BPT07, BPT08, BPT09, BPT10, BPT11, BPT12,
		BPG01, BPG02, BPG03, BPG04, BPG05, BPG06, BPG07, BPG08, BPG09, BPG10, BPG11, BPG12,
		TX101, TX102, TX103, TX104, TX105, TX106, TX107, TX108, TX109, TX110, TX111, TX112,
		TX301, TX302, TX303, TX304, TX305, TX306, TX307, TX308, TX309, TX310, TX311, TX312,
		BGP01, BGP02, BGP03, BGP04, BGP05, BGP06, BGP07, BGP08, BGP09, BGP10, BGP11, BGP12,
		GYP01, GYP02, GYP03, GYP04, GYP05, GYP06, GYP07, GYP08, GYP09, GYP10, GYP11, GYP12,
		GSB01, GSB02, GSB03, GSB04, GSB05, GSB06, GSB07, GSB08, GSB09, GSB10, GSB11, GSB12,
		B1T01, B1T02, B1T03, B1T04, B1T05, B1T06, B1T07, B1T08, B1T09, B1T10, B1T11, B1T12,
		LAB01, LAB02, LAB03, LAB04, LAB05, LAB06, LAB07, LAB08, LAB09, LAB10, LAB11, LAB12)
	VALUES (
		$SABUN$, $TOTYM$,
		$TDP01$, $TDP02$, $TDP03$, $TDP04$, $TDP05$, $TDP06$, $TDP07$, $TDP08$, $TDP09$, $TDP10$, $TDP11$, $TDP12$,
		$TTB01$, $TTB02$, $TTB03$, $TTB04$, $TTB05$, $TTB06$, $TTB07$, $TTB08$, $TTB09$, $TTB10$, $TTB11$, $TTB12$,
		$EDT01$, $EDT02$, $EDT03$, $EDT04$, $EDT05$, $EDT06$, $EDT07$, $EDT08$, $EDT09$, $EDT10$, $EDT11$, $EDT12$,
		$BDT01$, $BDT02$, $BDT03$, $BDT04$, $BDT05$, $BDT06$, $BDT07$, $BDT08$, $BDT09$, $BDT10$, $BDT11$, $BDT12$,
		$BPA01$, $BPA02$, $BPA03$, $BPA04$, $BPA05$, $BPA06$, $BPA07$, $BPA08$, $BPA09$, $BPA10$, $BPA11$, $BPA12$,
		$BPT01$, $BPT02$, $BPT03$, $BPT04$, $BPT05$, $BPT06$, $BPT07$, $BPT08$, $BPT09$, $BPT10$, $BPT11$, $BPT12$,
		$BPG01$, $BPG02$, $BPG03$, $BPG04$, $BPG05$, $BPG06$, $BPG07$, $BPG08$, $BPG09$, $BPG10$, $BPG11$, $BPG12$,
		$TX101$, $TX102$, $TX103$, $TX104$, $TX105$, $TX106$, $TX107$, $TX108$, $TX109$, $TX110$, $TX111$, $TX112$,
		$TX301$, $TX302$, $TX303$, $TX304$, $TX305$, $TX306$, $TX307$, $TX308$, $TX309$, $TX310$, $TX311$, $TX312$,
		$BGP01$, $BGP02$, $BGP03$, $BGP04$, $BGP05$, $BGP06$, $BGP07$, $BGP08$, $BGP09$, $BGP10$, $BGP11$, $BGP12$,
		$GYP01$, $GYP02$, $GYP03$, $GYP04$, $GYP05$, $GYP06$, $GYP07$, $GYP08$, $GYP09$, $GYP10$, $GYP11$, $GYP12$,
		$GSB01$, $GSB02$, $GSB03$, $GSB04$, $GSB05$, $GSB06$, $GSB07$, $GSB08$, $GSB09$, $GSB10$, $GSB11$, $GSB12$,
		$B1T01$, $B1T02$, $B1T03$, $B1T04$, $B1T05$, $B1T06$, $B1T07$, $B1T08$, $B1T09$, $B1T10$, $B1T11$, $B1T12$,
		$LAB01$, $LAB02$, $LAB03$, $LAB04$, $LAB05$, $LAB06$, $LAB07$, $LAB08$, $LAB09$, $LAB10$, $LAB11$, $LAB12$)
	 </insert>
	<update id="updateHAYZ071" parameterClass="java.util.HashMap" >
	UPDATE $LIB3$.HAY071PF
	SET
		TDP01=$TDP01$, TDP02=$TDP02$, TDP03=$TDP03$, TDP04=$TDP04$, TDP05=$TDP05$, TDP06=$TDP06$,
		TDP07=$TDP07$, TDP08=$TDP08$, TDP09=$TDP09$, TDP10=$TDP10$, TDP11=$TDP11$, TDP12=$TDP12$,
		TTB01=$TTB01$, TTB02=$TTB02$, TTB03=$TTB03$, TTB04=$TTB04$, TTB05=$TTB05$, TTB06=$TTB06$,
		TTB07=$TTB07$, TTB08=$TTB08$, TTB09=$TTB09$, TTB10=$TTB10$, TTB11=$TTB11$, TTB12=$TTB12$,
		EDT01=$EDT01$, EDT02=$EDT02$, EDT03=$EDT03$, EDT04=$EDT04$, EDT05=$EDT05$, EDT06=$EDT06$,
		EDT07=$EDT07$, EDT08=$EDT08$, EDT09=$EDT09$, EDT10=$EDT10$, EDT11=$EDT11$, EDT12=$EDT12$,
		BDT01=$BDT01$, BDT02=$BDT02$, BDT03=$BDT03$, BDT04=$BDT04$, BDT05=$BDT05$, BDT06=$BDT06$,
		BDT07=$BDT07$, BDT08=$BDT08$, BDT09=$BDT09$, BDT10=$BDT10$, BDT11=$BDT11$, BDT12=$BDT12$,
		BPA01=$BPA01$, BPA02=$BPA02$, BPA03=$BPA03$, BPA04=$BPA04$, BPA05=$BPA05$, BPA06=$BPA06$,
		BPA07=$BPA07$, BPA08=$BPA08$, BPA09=$BPA09$, BPA10=$BPA10$, BPA11=$BPA11$, BPA12=$BPA12$,
		BPT01=$BPT01$, BPT02=$BPT02$, BPT03=$BPT03$, BPT04=$BPT04$, BPT05=$BPT05$, BPT06=$BPT06$,
		BPT07=$BPT07$, BPT08=$BPT08$, BPT09=$BPT09$, BPT10=$BPT10$, BPT11=$BPT11$, BPT12=$BPT12$,
		BPG01=$BPG01$, BPG02=$BPG02$, BPG03=$BPG03$, BPG04=$BPG04$, BPG05=$BPG05$, BPG06=$BPG06$,
		BPG07=$BPG07$, BPG08=$BPG08$, BPG09=$BPG09$, BPG10=$BPG10$, BPG11=$BPG11$, BPG12=$BPG12$,
		TX101=$TX101$, TX102=$TX102$, TX103=$TX103$, TX104=$TX104$, TX105=$TX105$, TX106=$TX106$,
		TX107=$TX107$, TX108=$TX108$, TX109=$TX109$, TX110=$TX110$, TX111=$TX111$, TX112=$TX112$,
		TX301=$TX301$, TX302=$TX302$, TX303=$TX303$, TX304=$TX304$, TX305=$TX305$, TX306=$TX306$,
		TX307=$TX307$, TX308=$TX308$, TX309=$TX309$, TX310=$TX310$, TX311=$TX311$, TX312=$TX312$,
		BGP01=$BGP01$, BGP02=$BGP02$, BGP03=$BGP03$, BGP04=$BGP04$, BGP05=$BGP05$, BGP06=$BGP06$,
		BGP07=$BGP07$, BGP08=$BGP08$, BGP09=$BGP09$, BGP10=$BGP10$, BGP11=$BGP11$, BGP12=$BGP12$,
		GYP01=$GYP01$, GYP02=$GYP02$, GYP03=$GYP03$, GYP04=$GYP04$, GYP05=$GYP05$, GYP06=$GYP06$,
		GYP07=$GYP07$, GYP08=$GYP08$, GYP09=$GYP09$, GYP10=$GYP10$, GYP11=$GYP11$, GYP12=$GYP12$,
		GSB01=$GSB01$, GSB02=$GSB02$, GSB03=$GSB03$, GSB04=$GSB04$, GSB05=$GSB05$, GSB06=$GSB06$,
		GSB07=$GSB07$, GSB08=$GSB08$, GSB09=$GSB09$, GSB10=$GSB10$, GSB11=$GSB11$, GSB12=$GSB12$,
		B1T01=$B1T01$, B1T02=$B1T02$, B1T03=$B1T03$, B1T04=$B1T04$, B1T05=$B1T05$, B1T06=$B1T06$,
		B1T07=$B1T07$, B1T08=$B1T08$, B1T09=$B1T09$, B1T10=$B1T10$, B1T11=$B1T11$, B1T12=$B1T12$,
		LAB01=$LAB01$, LAB02=$LAB02$, LAB03=$LAB03$, LAB04=$LAB04$, LAB05=$LAB05$, LAB06=$LAB06$,
		LAB07=$LAB07$, LAB08=$LAB08$, LAB09=$LAB09$, LAB10=$LAB10$, LAB11=$LAB11$, LAB12=$LAB12$
	WHERE
		SABUN = #SABUN#
		AND TOTYM = $TOTYM$
	</update>
	<delete id="deleteHAYZ071" parameterClass="java.util.HashMap" >
	DELETE FROM $LIB3$.HAY071PF
	WHERE
		SABUN = #SABUN#
		AND TOTYM = $TOTYM$
	</delete>
	<select id="selectHAYZ081Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		*
	FROM
		$LIB3$.HAY081PF
	</select>
<!-- 2013년도 정산내역조회
	<select id="selectHAYZ082Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		A.SABUN, A.TOTYM,
		정산급여내역조회
		GRID 
		급여과세, 상여과세, 비과세, 과세, 갑근세, 주민세, 의료보험, 국민연금, 고용보험, 노조회비
		A.TDP01, A.TDP02, A.TDP03, A.TDP04, A.TDP05, A.TDP06, A.TDP07, A.TDP08, A.TDP09, A.TDP10, A.TDP11, A.TDP12,
		A.TTB01, A.TTB02, A.TTB03, A.TTB04, A.TTB05, A.TTB06, A.TTB07, A.TTB08, A.TTB09, A.TTB10, A.TTB11, A.TTB12,
		(A.BDT01 + A.BPA01) AS BDT01, (A.BDT02 + A.BPA02) AS BDT02, (A.BDT03 + A.BPA03) AS BDT03, (A.BDT04 + A.BPA04) AS BDT04,
		(A.BDT05 + A.BPA05) AS BDT05, (A.BDT06 + A.BPA06) AS BDT06, (A.BDT07 + A.BPA07) AS BDT07, (A.BDT08 + A.BPA08) AS BDT08,
		(A.BDT09 + A.BPA09) AS BDT09, (A.BDT10 + A.BPA10) AS BDT10, (A.BDT11 + A.BPA11) AS BDT11, (A.BDT12 + A.BPA12) AS BDT12,
		A.EDT01, A.EDT02, A.EDT03, A.EDT04, A.EDT05, A.EDT06, A.EDT07, A.EDT08, A.EDT09, A.EDT10, A.EDT11, A.EDT12,
		A.TX101, A.TX102, A.TX103, A.TX104, A.TX105, A.TX106, A.TX107, A.TX108, A.TX109, A.TX110, A.TX111, A.TX112,
		A.TX301, A.TX302, A.TX303, A.TX304, A.TX305, A.TX306, A.TX307, A.TX308, A.TX309, A.TX310, A.TX311, A.TX312,
		A.BGP01, A.BGP02, A.BGP03, A.BGP04, A.BGP05, A.BGP06, A.BGP07, A.BGP08, A.BGP09, A.BGP10, A.BGP11, A.BGP12,
		A.GYP01, A.GYP02, A.GYP03, A.GYP04, A.GYP05, A.GYP06, A.GYP07, A.GYP08, A.GYP09, A.GYP10, A.GYP11, A.GYP12,
		A.B1T01, A.B1T02, A.B1T03, A.B1T04, A.B1T05, A.B1T06, A.B1T07, A.B1T08, A.B1T09, A.B1T10, A.B1T11, A.B1T12,
		A.LAB01, A.LAB02, A.LAB03, A.LAB04, A.LAB05, A.LAB06, A.LAB07, A.LAB08, A.LAB09, A.LAB10, A.LAB11, A.LAB12,
		전근무지 급여총액, 상여총액, 소득세, 주민세, 의료보험,  국민연금, 고용보험, 노조회비 
		B.RPAT1 + B.RPAT2 AS TDP13, B.RBAT1 + B.RBAT2 AS TTB13, 0 AS BDT13, 0 AS EDT13, B.RT1X1 + B.RT2X1 AS TX113,
		B.RT1X3 + B.RT2X3 AS TX313, B.RG1P1 + B.RG2P1 AS BGP13, B.RG1P3 + B.RG2P3 AS GYP13, B.RG1P2 + B.RG2P2 AS B1T13,
		B.RG1P4 + B.RG2P4 AS LAB13,
		LABEL
		보험, 장애인보험, 경로자의료비, 기타의료비, 교육비합, 주택임차기관, 주택임차거주,월세액, 장기차입(10), 장기차입(15), 장기차입(30), 12년상환대출,
		12년기타대출, 정치자금세액, 주식형저축, 법정기부, 특례기부, 지정+종교, 이월법정, 이월특례, 이월지정+종교, 개인견금, 연금저축, 퇴직연금,
		주택저축청약, 주택저축장마, 주택저축근로, 주택저축종합, 장기집합증권, 신용카드, 현금영수증, 전통시장, 본인신용, 하반기본인제외, 전년도본인, 전년도본인제외
		 
		B.PGPPC, B.PGPRC, B.PHOSB, B.PHOSA, (B.PEDUA+B.PEDUB) AS PEDUAB, B.PNHU1, B.PNHUA, B.PNHUM, B.PNHU2, B.PNHU3, B.PNHU4, B.PNHU6,
		B.PNHU7, B.KIBUA, B.TGMON, B.KIBMA, B.KIBMC, (B.KIBMB+B.KIBMD) AS KIBMBD, B.KIBOA, B.KIBOC, (B.KIBOB+B.KIBOD) AS KIBOBD, B.YUNG1, B.YUNG2, B.KITA3,
		B.HUSA1, B.HUSA2, B.HUSA4, B.HUSA3, B.LGSTK,	(B.SINYN+B.JIGBN) AS CARD, B.CASHN, B.CJANG, B.AYSNI, B.AYSYA, B.BYSYI, B.BYSYA,
		 배우자/20세이하/60이상/장애/경로65/경로70/부녀자,자녀양육/한부모 
		B.WFBCD, B.CHBCD, B.PTBCD, B.TRBCD, B.KYBCA, B.KYBCB, B.BUBCD, B.CBUCD, B.SPFCD,
		B.WFBCD||B.CHBCD||B.PTBCD||B.TRBCD||B.KYBCA||B.KYBCB||B.BUBCD||B.CBUCD||B.SPFCD AS EXECD,
		
		소득총액, 근로소득공제, 근로소득, 기초, 배우자, 부양가족, 장애자, 경로우대, 부녀자, 자녀양육, 다자녀, 한부모, 인적공제계(기본+추가)
		국민연금, 퇴직연금, 보험료, 의료비, 교육비,
		장기주택저당차입금 이자상환, 주택차입금 원리금상환액-기관, 주택차입금 원리금상환액-거주자, 월세액, 기부금,
		개인연금, 연금저축, 주택처축청약, 주택저축근로, 주택저축종합, 주택저축장마, 주식형저축, 표준공제, 특별공제, 카드등공제,
		과세표준, 산출세액, 세액감변계, 소득세액, 주택임차차입, 세액공제계, 결정소득, 결정주민, 결정농특, 결정총액,
		기납소득, 기납주민, 기납총액, 징수소득, 징수주민, 징수농특, 징수총액, 환급소득, 환급주민, 환급총액
		
		C.ZZ020, C.ZZ021, C.ZZ022, C.ZZ030, C.ZZ031, (C.ZZ032+C.ZZ033) AS ZZ03233, C.ZZ037, (C.ZZ036+C.ZZ048) AS ZZ03648, C.ZZ038, C.ZZ040, C.ZZ034, C.ZZ042, (C.ZZ035+C.ZZ049) AS ZZ03549,
		C.ZZ014, C.ZZ064, C.ZZ050, (C.ZZ051+C.ZZ052) AS ZZ05152, (C.ZZ053+C.ZZ054) AS ZZ05354,
		(C.ZZ055A+C.ZZ055B+C.ZZ055C+C.ZZ055M+C.ZZ055N) AS ZZ055TOT, C.ZZ062A, C.ZZ062B, C.ZZ062C, (C.ZZ056+C.ZZ057) AS ZZ05657,
		C.ZZ075, COALESCE(C.ZZ074,0) AS ZZ074, C.ZZ071A, C.ZZ071D, C.ZZ071C, C.ZZ071B, C.ZZ079, C.ZZ058, C.ZZ059, C.ZZ077, 
		C.ZZ080, C.ZZ082, C.ZZ101, C.ZZ090, C.ZZ092, C.ZZ100, C.ZZ110, C.ZZ112, C.ZZ114, C.ZZ119,
		C.ZZ005, C.ZZ007, C.ZZ010,  
		CASE WHEN C.ZZ130 > 0 THEN C.ZZ130 ELSE 0 END ZZ130_LEV,
		CASE WHEN C.ZZ130 <![CDATA[<]]> 0 THEN C.ZZ130 ELSE 0 END ZZ130_RE,
		CASE WHEN C.ZZ130 > 0 THEN C.ZZ132 ELSE 0 END ZZ132_LEV,
		CASE WHEN C.ZZ130 <![CDATA[<]]> 0 THEN C.ZZ132 ELSE 0 END ZZ132_RE,
		C.ZZ134,
		CASE WHEN C.ZZ130 > 0 THEN C.ZZ139 ELSE 0 END ZZ139_LEV,
		CASE WHEN C.ZZ130 <![CDATA[<]]> 0 THEN C.ZZ139 ELSE 0 END ZZ139_RE
	FROM
		<isEqual property="MAGAM" compareValue="1">
		$LIB3$.HAY150PF A
		LEFT OUTER JOIN $LIB3$.HAY100PF B ON A.SABUN=B.SABUN AND A.TOTYM=B.PTJYM
		LEFT OUTER JOIN $LIB3$.HAY200PF C ON A.SABUN=C.SABUN AND A.TOTYM=C.PTJYM
		</isEqual>
		<isNotEqual property="MAGAM" compareValue="1">
		$LIB3$.HAY071PF A
		LEFT OUTER JOIN $LIB3$.HAY011PF B ON A.SABUN=B.SABUN AND A.TOTYM=B.PTJYM		
		LEFT OUTER JOIN $LIB3$.HAY081PF C ON A.SABUN=C.SABUN AND A.TOTYM=C.PTJYM
		</isNotEqual>
	WHERE
		A.SABUN=$SABUN$
		AND A.TOTYM=$TOTYM$
	</select>
  -->	
	<select id="selectHAYZ082Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		A.SABUN, A.TOTYM,
		<!-- 정산급여내역조회 -->
		<!-- GRID -->
		<!-- 급여과세, 상여과세, 비과세, 과세, 갑근세, 주민세, 의료보험, 국민연금, 고용보험, 노조회비 -->
		A.TDP01, A.TDP02, A.TDP03, A.TDP04, A.TDP05, A.TDP06, A.TDP07, A.TDP08, A.TDP09, A.TDP10, A.TDP11, A.TDP12,
		A.TTB01, A.TTB02, A.TTB03, A.TTB04, A.TTB05, A.TTB06, A.TTB07, A.TTB08, A.TTB09, A.TTB10, A.TTB11, A.TTB12,
		(A.BDT01 + A.BPA01) AS BDT01, (A.BDT02 + A.BPA02) AS BDT02, (A.BDT03 + A.BPA03) AS BDT03, (A.BDT04 + A.BPA04) AS BDT04,
		(A.BDT05 + A.BPA05) AS BDT05, (A.BDT06 + A.BPA06) AS BDT06, (A.BDT07 + A.BPA07) AS BDT07, (A.BDT08 + A.BPA08) AS BDT08,
		(A.BDT09 + A.BPA09) AS BDT09, (A.BDT10 + A.BPA10) AS BDT10, (A.BDT11 + A.BPA11) AS BDT11, (A.BDT12 + A.BPA12) AS BDT12,
		A.EDT01, A.EDT02, A.EDT03, A.EDT04, A.EDT05, A.EDT06, A.EDT07, A.EDT08, A.EDT09, A.EDT10, A.EDT11, A.EDT12,
		A.TX101, A.TX102, A.TX103, A.TX104, A.TX105, A.TX106, A.TX107, A.TX108, A.TX109, A.TX110, A.TX111, A.TX112,
		A.TX301, A.TX302, A.TX303, A.TX304, A.TX305, A.TX306, A.TX307, A.TX308, A.TX309, A.TX310, A.TX311, A.TX312,
		A.BGP01, A.BGP02, A.BGP03, A.BGP04, A.BGP05, A.BGP06, A.BGP07, A.BGP08, A.BGP09, A.BGP10, A.BGP11, A.BGP12,
		A.GYP01, A.GYP02, A.GYP03, A.GYP04, A.GYP05, A.GYP06, A.GYP07, A.GYP08, A.GYP09, A.GYP10, A.GYP11, A.GYP12,
		A.B1T01, A.B1T02, A.B1T03, A.B1T04, A.B1T05, A.B1T06, A.B1T07, A.B1T08, A.B1T09, A.B1T10, A.B1T11, A.B1T12,
		A.LAB01, A.LAB02, A.LAB03, A.LAB04, A.LAB05, A.LAB06, A.LAB07, A.LAB08, A.LAB09, A.LAB10, A.LAB11, A.LAB12,
		<!-- 전근무지 급여총액, 상여총액, 소득세, 주민세, 의료보험,  국민연금, 고용보험, 노조회비 -->
		<!-- 전근무지 비과세 수정 2017.02.07
		B.RPAT1 + B.RPAT2 AS TDP13, B.RBAT1 + B.RBAT2 AS TTB13, 0 AS BDT13, 0 AS EDT13, B.RT1X1 + B.RT2X1 AS TX113,
		B.RT1X3 + B.RT2X3 AS TX313, B.RG1P1 + B.RG2P1 AS BGP13, B.RG1P3 + B.RG2P3 AS GYP13, B.RG1P2 + B.RG2P2 AS B1T13,
		B.RG1P4 + B.RG2P4 AS LAB13,
		 -->
		B.RPAT1 + B.RPAT2 AS TDP13, B.RBAT1 + B.RBAT2 AS TTB13, B.RGB12 + B.RGB22 + B.RGB11 AS BDT13, 0 AS EDT13, B.RT1X1 + B.RT2X1 AS TX113,
		B.RT1X3 + B.RT2X3 AS TX313, B.RG1P1 + B.RG2P1 AS BGP13, B.RG1P3 + B.RG2P3 AS GYP13, B.RG1P2 + B.RG2P2 AS B1T13,
		B.RG1P4 + B.RG2P4 AS LAB13,
		<!-- LABEL
		보험, 장애인보험, 경로자의료비, 기타의료비, 교육비합, 주택임차기관, 주택임차거주,월세액, 장기차입(10), 장기차입(15), 장기차입(30), 12년상환대출,
		12년기타대출, 정치자금세액, 주식형저축, 법정기부, 특례기부, 지정+종교, 이월법정, 이월특례, 이월지정+종교, 개인견금, 연금저축, 퇴직연금,
		주택저축청약, 주택저축장마, 주택저축근로, 주택저축종합, 장기집합증권, 신용카드, 현금영수증, 전통시장, 대중교통, 본인신용, 하반기본인제외, 전년도본인, 전년도본인제외
		 -->
		<!-- 2016연말정산 지정기부분리-->
		<!-- 
		B.PGPPC, B.PGPRC, B.PHOSB, B.PHOSA, (B.PEDUA+B.PEDUB) AS PEDUAB, B.PNHU1, B.PNHUA, B.PNHUM, B.PNHU2, B.PNHU3, B.PNHU4, B.PNHU6,
		B.PNHU7, B.KIBUA, B.TGMON, B.KIBMA, B.KIBMC, (B.KIBMB+B.KIBMD) AS KIBMBD, B.KIBOA, B.KIBOC, (B.KIBOB+B.KIBOD) AS KIBOBD, B.YUNG1, B.YUNG2, B.KITA3,
		B.HUSA1, B.HUSA2, B.HUSA4, B.HUSA3, B.LGSTK, (B.SINYN+B.JIGBN) AS CARD, B.CASHN, B.CJANG, B.PBTSN, B.AYSNI, B.AYSYA, B.BYSYI, B.BYSYA, 
		 -->
		B.PGPPC, B.PGPRC, B.PHOSB, B.PHOSA, (B.PEDUA+B.PEDUB) AS PEDUAB, B.PNHU1, B.PNHUA, B.PNHUM, B.PNHU2, B.PNHU3, B.PNHU4, B.PNHU6,
		B.PNHU7, B.KIBUA, B.TGMON, B.KIBMA, B.KIBMC, B.KIBMB, B.KIBMD, (B.KIBMB+B.KIBMD) AS KIBMBD, B.KIBOA, B.KIBOC, 
		B.KIBOB, B.KIBOD, (B.KIBOB+B.KIBOD) AS KIBOBD, B.YUNG1, B.YUNG2, B.KITA3,
		B.HUSA1, B.HUSA2, B.HUSA4, B.HUSA3, B.LGSTK, (B.SINYN+B.JIGBN) AS CARD, B.CASHN, B.CJANG, B.PBTSN, B.AYSNI, B.AYSYA, B.BYSYI, B.BYSYA,
		<!-- 2015년 연말정산 추가 -->
		<!-- 전년-1카드본인, 전년-1카드본추, 금년상반기카드본인, 금년상반기카드본추, 금년하반기카드본인, 금년하반기카드본추
		15년 주택자금10 고정, 15년 주택자금15 고정 AND 비거치, 15년 주택자금15 고정 OR 비거치, 15년 주택자금15 기타,
		이월세액기부법정, 이월세액기부특례, 이월세액기부지정,이월세액기부종교, 이월세액기부예비
		 -->
		B.CYSYI, B.CYSYA, B.DYSYI, B.DYSYA, B.EYSYI, B.EYSYA, B.PNHU10, B.PNHU11, B.PNHU12, B.PNHU13,
		<!-- 2016연말정산 지정기부분리
		B.KIBPA, B.KIBPC, (B.KIBPB+B.KIBPD) AS KIBPBD,
		 -->
		 B.KIBPA, B.KIBPC, B.KIBPB, B.KIBPD, (B.KIBPB+B.KIBPD) AS KIBPBD,
		 
		<!-- 배우자/20세이하/60이상/장애/경로65/경로70/부녀자,자녀양육/한부모 -->
		<!--
		B.WFBCD, B.CHBCD, B.PTBCD, B.TRBCD, B.KYBCA, B.KYBCB, B.BUBCD, B.CBUCD, B.SPFCD,
		B.WFBCD||B.CHBCD||B.PTBCD||B.TRBCD||B.KYBCA||B.KYBCB||B.BUBCD||B.CBUCD||B.SPFCD AS EXECD,
		 -->
		<!-- 배우자/20세이하/60이상/장애/경로65/경로70/부녀자,자녀양육/한부모/다자녀
		B.WFBCD, B.CHBCD, B.PTBCD, B.TRBCD, B.KYBCA, B.KYBCB, B.BUBCD, B.CBUCD, B.SPFCD, B.BYFL2,
		B.WFBCD||B.CHBCD||B.PTBCD||B.TRBCD||B.KYBCA||B.KYBCB||B.BUBCD||B.CBUCD||B.SPFCD||B.BYFL2 AS EXECD,
		 -->
		<!-- 2015.05.13 배우자/20세이하/60이상/장애/경로65/경로70/부녀자,자녀양육/한부모/출생입양/다자녀  -->
		B.WFBCD, B.CHBCD, B.PTBCD, B.TRBCD, B.KYBCA, B.KYBCB, B.BUBCD, B.CBUCD, B.SPFCD, B.POFL1, B.BYFL2,
		B.WFBCD||B.CHBCD||B.PTBCD||B.TRBCD||B.KYBCA||B.KYBCB||B.BUBCD||B.CBUCD||B.SPFCD||B.POFL1||B.BYFL2 AS EXECD,
		<!-- 2017.01.11 외국법인소속 파견근로자여부  -->
		B.SNDCD, B.SMCCD,
		<!-- 
		소득총액, 근로소득공제, 근로소득, 기초, 배우자, 부양가족, 장애자, 경로우대, 부녀자, 자녀양육, 다자녀, 한부모, 인적공제계(기본+추가)
		국민연금실제,국민연금처리, 퇴직연금, 보험료, 의료비, 교육비,
		장기주택저당차입금 이자상환, 주택차입금 원리금상환액-기관, 주택차입금 원리금상환액-거주자, 월세액, 기부금,
		개인연금, 연금저축, 주택처축청약, 주택저축근로, 주택저축종합, 주택저축장마, 주식형저축, 표준공제, 특별공제, 카드등공제,
		과세표준, 산출세액, 세액감변계, 소득세액, 주택임차차입, 세액공제계, 결정소득, 결정주민, 결정농특, 결정총액,
		기납소득, 기납주민, 기납총액, 징수소득, 징수주민, 징수농특, 징수총액, 환급소득, 환급주민, 환급총액
		 -->
		C.ZZ020, C.ZZ021, C.ZZ022, C.ZZ030, C.ZZ031, (C.ZZ032+C.ZZ033) AS ZZ03233, C.ZZ037, (C.ZZ036+C.ZZ048) AS ZZ03648, C.ZZ038, C.ZZ040, C.ZZ034, C.ZZ042, (C.ZZ035+C.ZZ049) AS ZZ03549,
		C.ZZ014, C.ZZ065, C.ZZ064, C.ZZ050,
		<!--2014 삭제 (의료비, 교육비)
		(C.ZZ051+C.ZZ052) AS ZZ05152, (C.ZZ053+C.ZZ054) AS ZZ05354,  --> 
		<!-- 2015년 연말정산 추가 - 주택임차B 10 고정, 주택자금B 15 고정 AND 비거치, 주택자금B 15 고정 OR 비거치, 주택자금B 15 기타
		(C.ZZ055A+C.ZZ055B+C.ZZ055C+C.ZZ055M+C.ZZ055N) AS ZZ055TOT,
		 -->
		(C.ZZ055A+C.ZZ055B+C.ZZ055C+C.ZZ055M+C.ZZ055N+C.ZZ055P+C.ZZ055Q+C.ZZ055R+C.ZZ055S) AS ZZ055TOT,
		
		C.ZZ062A, C.ZZ062B, C.ZZ062C, (C.ZZ056+C.ZZ057++C.ZZ063) AS ZZ0565763,
		C.ZZ075, COALESCE(C.ZZ074,0) AS ZZ074, C.ZZ071A, C.ZZ071D, C.ZZ071C, C.ZZ071B, C.ZZ079, C.ZZ058, C.ZZ059, C.ZZ077, 
		<!-- 2014년추가 
		기부금공제, 표준세액공
		장기집합증권, 중기세액감면, 자녀(공제), 연금공제, 보험료대상, 보험료공제, 의료비대상, 의료비공제, 교육비대상, 교육비공제,
		정치기부공10, 정치기부세10, 정치기부공99, 정치기부세99, 법정기부공제, 법정기부세액, 지정기부공제, 지정기부세액, 특별세액공계
		C.ZM001, C.ZX006, C.ZX001C.ZX007, C.ZX008, C.ZX009, C.ZX010, C.ZX011, C.ZX012, C.ZX013,
		C.ZX014, C.ZX015, C.ZX016, C.ZX017, C.ZX018, C.ZX019, C.ZX020, C.ZX021, C.ZX100,C.ZX101, C.ZX102, C.ZX103,
		퇴직연금대상, 퇴직연금공제, 연금저축대상, 연금저축금액
		C.ZX0071, C.ZX0072, C.ZX0073, C.ZX0074
		-->
		<!-- 2016연말정산 지정기부 분리 -->
		<!-- 
		C.ZX002, C.ZX005, 
		C.ZM001, C.ZX006, C.ZX001, C.ZX007, C.ZX008, C.ZX009, C.ZX010, C.ZX011, C.ZX012, C.ZX013,
		C.ZX014, C.ZX015, C.ZX016, C.ZX017, C.ZX018, C.ZX019, C.ZX020, C.ZX021, C.ZX100, C.ZX101, C.ZX102, C.ZX103, C.ZX0071, C.ZX0072, C.ZX0073, C.ZX0074,
		C.ZZ080, C.ZZ082, C.ZZ101, C.ZZ090, C.ZZ092, C.ZZ100, C.ZZ110, C.ZZ112, C.ZZ114, C.ZZ119, 
		C.ZZ005, C.ZZ007, C.ZZ010, 
 		-->
		C.ZX002, C.ZX005, 
		C.ZM001, C.ZX006, C.ZX001, C.ZX007, C.ZX008, C.ZX009, C.ZX010, C.ZX011, C.ZX012, C.ZX013,
		C.ZX014, C.ZX015, C.ZX016, C.ZX017, C.ZX018, C.ZX019, C.ZX020, C.ZX021,
		C.ZX026, C.ZX027, (C.ZX020+C.ZX026) AS ZX02026, (C.ZX021+C.ZX027) AS ZX02127,
		C.ZX100, C.ZX101, C.ZX102, C.ZX103, C.ZX0071, C.ZX0072, C.ZX0073, C.ZX0074,
		C.ZZ080, C.ZZ082, C.ZZ101, C.ZZ090, C.ZZ092, C.ZZ100, C.ZZ110, C.ZZ112, C.ZZ114, C.ZZ119, 
		C.ZZ005, C.ZZ007, C.ZZ010,		
		<!-- 2015.05.13 추가 => 6세이하, 출생입양 , 장애인보장성대상, 장애인보장성세액   C.ZX022, C.ZX023, C.ZX024, C.ZX025 -->
		<!-- 
		<isEqual property="MAGAM" compareValue="1">
		0 AS ZX022, 0 AS ZX023, 0 AS ZX024, 0 AS ZX025,
		</isEqual>
		<isNotEqual  property="MAGAM" compareValue="1">
		C.ZX022, C.ZX023, C.ZX024, C.ZX025,
		</isNotEqual>
		 -->
		C.ZX022, C.ZX023, C.ZX024, C.ZX025,
		CASE WHEN C.ZZ130 > 0 THEN C.ZZ130 ELSE 0 END ZZ130_LEV,
		CASE WHEN C.ZZ130 <![CDATA[<]]> 0 THEN C.ZZ130 ELSE 0 END ZZ130_RE,
		CASE WHEN C.ZZ130 > 0 THEN C.ZZ132 ELSE 0 END ZZ132_LEV,
		CASE WHEN C.ZZ130 <![CDATA[<]]> 0 THEN C.ZZ132 ELSE 0 END ZZ132_RE,
		C.ZZ134,
		CASE WHEN C.ZZ130 > 0 THEN C.ZZ139 ELSE 0 END ZZ139_LEV,
		CASE WHEN C.ZZ130 <![CDATA[<]]> 0 THEN C.ZZ139 ELSE 0 END ZZ139_RE
	FROM
		<isEqual property="MAGAM" compareValue="1">
		$LIB3$.HAY150PF A
		LEFT OUTER JOIN $LIB3$.HAY100PF B ON A.SABUN=B.SABUN AND A.TOTYM=B.PTJYM
		LEFT OUTER JOIN $LIB3$.HAY200PF C ON A.SABUN=C.SABUN AND A.TOTYM=C.PTJYM
		</isEqual>
		<isNotEqual property="MAGAM" compareValue="1">
		$LIB3$.HAY071PF A
		LEFT OUTER JOIN $LIB3$.HAY011PF B ON A.SABUN=B.SABUN AND A.TOTYM=B.PTJYM		
		LEFT OUTER JOIN $LIB3$.HAY081PF C ON A.SABUN=C.SABUN AND A.TOTYM=C.PTJYM
		</isNotEqual>
	WHERE
		A.SABUN=$SABUN$
		AND A.TOTYM=$TOTYM$
	</select>
	<select id="selectHAYZ201C_C" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT A.*
	FROM
		<isEqual property="MAGAM" compareValue="1">
		$LIB3$.HAY200PF A
		</isEqual>
		<isNotEqual  property="MAGAM" compareValue="1">
		$LIB3$.HAY081PF A
		</isNotEqual>
		<!-- 신고자료 제출인 경우 중도정산을 포함한다. -->
	<dynamic prepend="WHERE">
		<isEqual property="GUBCD" compareValue="J">
		A.PTJYM BETWEEN $PTJYM_FR$ AND $PTJYM_TO$
		</isEqual>	
		<isEqual property="GUBCD" compareValue="Y">
		A.PTJYM = $PTJYM$
		</isEqual>
		<!-- 신고자료 제출인 경우 중도정산을 포함한다. -->
	</dynamic>
	 <!--  AND A.SABUN in (1140165, 1240034, 1140051, 1440157, 1440142)  -->
	</select>
	<select id="selectHAYZ201C_D" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT A.*, B.*
	FROM
		<isEqual property="MAGAM" compareValue="1">
		$LIB3$.HAY100PF A, $LIB3$.HAY200PF B		
		</isEqual>
		<isNotEqual  property="MAGAM" compareValue="1">
		$LIB3$.HAY011PF A, $LIB3$.HAY081PF B		
		</isNotEqual>
	WHERE
		A.SABUN=B.SABUN
		<isEqual property="GUBCD" compareValue="J">
		AND A.PTJYM BETWEEN $PTJYM_FR$ AND $PTJYM_TO$
		AND B.PTJYM BETWEEN $PTJYM_FR$ AND $PTJYM_TO$
		</isEqual>
		<isEqual property="GUBCD" compareValue="Y">
		AND A.PTJYM = $PTJYM$
		AND B.PTJYM = $PTJYM$
		</isEqual>
		<!-- 연말정산 신고자료 제출인 경우 중도정산을 포함한다. -->
	   <!-- AND B.SABUN in (1140165, 1240034, 1140051, 1440157, 1440142)  -->
	</select>
	
	<select id="selectHAYZ201C_E" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			*  
		FROM 
			<isEqual property="MAGAM" compareValue="1">
			$LIB3$.HAY121PF	
			</isEqual>
			<isNotEqual  property="MAGAM" compareValue="1">
			$LIB3$.HAY021PF	
			</isNotEqual>
		WHERE
			SABUN = $SABUN$
			<isEqual property="MAGAM" compareValue="1">
				<isEqual property="GUBCD" compareValue="J">
				AND PTJYM BETWEEN $PTJYM_FR$ AND $PTJYM_TO$
				</isEqual>
				<isEqual property="GUBCD" compareValue="Y">
				AND PTJYM = $PTJYM$
				</isEqual>
			</isEqual>
		<!-- 2017.01.18 수정 (본인이 가장 처음에 있어야함.)
		ORDER BY RELCD	
		 -->			
		ORDER BY RELNO, KIBCD
	</select>
	
	<select id="selectHAYZ201C_F" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			*  
		FROM
			<isEqual property="MAGAM" compareValue="1">
			$LIB3$.HAY141PF	
			</isEqual>
			<isNotEqual  property="MAGAM" compareValue="1">
			$LIB3$.HAY041PF	
			</isNotEqual>
		WHERE
			SABUN = $SABUN$
			<isEqual property="MAGAM" compareValue="1">
				<isEqual property="GUBCD" compareValue="J">
				AND PTJYM BETWEEN $PTJYM_FR$ AND $PTJYM_TO$
				</isEqual>
				<isEqual property="GUBCD" compareValue="Y">
				AND PTJYM = $PTJYM$
				</isEqual>
			</isEqual>			
		<!-- 연말정산 신고자료 제출인 경우 중도정산을 포함한다. -->
		ORDER BY
			INCCD, BNKCD, GJBNB, PAYYN
	</select>
	<select id="selectHAYZ201C_G" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			*  
		FROM
			<isEqual property="MAGAM" compareValue="1">
			$LIB3$.HAY151PF	
			</isEqual>
			<isNotEqual  property="MAGAM" compareValue="1">
			$LIB3$.HAY051PF	
			</isNotEqual>
		WHERE
			SABUN = $SABUN$
			<isEqual property="MAGAM" compareValue="1">
				<isEqual property="GUBCD" compareValue="J">
				AND PTJYM BETWEEN $PTJYM_FR$ AND $PTJYM_TO$
				</isEqual>
				<isEqual property="GUBCD" compareValue="Y">
				AND PTJYM = $PTJYM$
				</isEqual>
				<!-- 연말정산 신고자료 제출인 경우 중도정산을 포함한다. -->
			</isEqual>
	</select> 
	<select id="selectHMD020PF" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			*
		FROM 
			$LIB3$.HMD020PF
	<dynamic prepend="WHERE">
		<isNotEmpty prepend="AND" property="SABUN">
			SABUN = $SABUN$
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="arrSABUN">
			SABUN IN $arrSABUN$
		</isNotEmpty>
	</dynamic>
	</select>
	<select id="selectHAYZ010Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		<isEqual property="COMPS" compareValue="E1">
		REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN AS SABUN,
		</isEqual>
		<isNotEqual property="COMPS" compareValue="E1">
		REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN AS SABUN,
		</isNotEqual>
		B.KORNM, TRIM(C.DPDPNM) AS DPDPNM, PTJYM
	FROM
		$LIB3$.HAY011PF A
		LEFT OUTER JOIN $LIB3$.HMD020PF B ON A.SABUN=B.SABUN
		LEFT OUTER JOIN $LIB2$.MST650PF C ON C.DPCOMP=#COMPS# AND B.DPTCD=C.DPCODE
	ORDER BY PTJYM
	</select>

	<select id="selectHAYZ061Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		A.SABUN, A.KORNO, A.FORCDA, TRIM(A.KORNM) AS KORNM, A.HOPNO, TRIM(A.HOPNM) AS HOPNM, A.HOPCD, A.HOPCNT, A.HOPMON,
		A.APPNO, A.FORCDB, A.APPCD, A.DFFCD
	FROM
		$LIB3$.HAY061PF A
	</select>
	<select id="selectHAYZ063Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		SABUN, KORNO, FORCDA, TRIM(KORNM) AS KORNM, KIBNO, TRIM(KIBNM) AS KIBNM, KIBCDA, KIBCDB, KIBCNT, KIBMON,
		RELNO, FORCDB, TRIM(APPNM) AS APPNM, APPNO
	FROM
		$LIB3$.HAY063PF A
	</select>	
	<select id="selectHAYZ051" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		A.SABUN, A.LSECNT, TRIM(A.LSENMA) AS LSENMA, TRIM(A.LSENOA) AS LSENOA,
		TRIM(A.LSETYP) AS LSETYP, A.LSESIZ, A.LSEDAS, A.LSEDAE, TRIM(A.LSEADD) AS LSEADD, A.LSEMTT, A.LSEMTD,
		TRIM(B.KORNM) AS KORNM, TRIM(C.DPDPNM) AS DPDPNM
	FROM
		$LIB3$.HAY051PF A
		LEFT OUTER JOIN $LIB3$.HMD020PF B ON A.SABUN=B.SABUN
		LEFT OUTER JOIN $LIB2$.MST650PF C ON C.DPCOMP=#COMPS# AND B.DPTCD=C.DPCODE
	ORDER BY A.SABUN, A.LSECNT
	</select>
	
	<select id="selectHAYZ051_Check" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
		COUNT(*) CNT 
	FROM
		$LIB3$.HAY051PF 
	WHERE 
		SABUN = $SABUN$ AND LSECNT=$OLD_LSECNT$
	</select>
	<insert id="insertHAYZ051" parameterClass="java.util.HashMap" >
		INSERT INTO $LIB3$.HAY051PF (SABUN, LSECNT, LSENMA, LSENOA, LSETYP, LSESIZ, LSEADD, LSEDAS, LSEDAE, LSEMTT, LSEMTD)
		VALUES ($SABUN$, $LSECNT$, #LSENMA#, #LSENOA#, #LSETYP#, $LSESIZ$, #LSEADD#, $LSEDAS$, $LSEDAE$, $LSEMTT$, $LSEMTD$)
	</insert>
	<update id="updateHAYZ051" parameterClass="java.util.HashMap" >
		UPDATE $LIB3$.HAY051PF
		SET
			LSECNT=$LSECNT$,
			LSENMA=#LSENMA#,
			LSENOA=#LSENOA#,
			LSETYP=#LSETYP#,
			LSESIZ=$LSESIZ$,
			LSEADD=#LSEADD#,
			LSEDAS=$LSEDAS$,
			LSEDAE=$LSEDAE$,
			LSEMTT=$LSEMTT$,
			LSEMTD=$LSEMTD$
		WHERE
			SABUN = $SABUN$ AND LSECNT=$OLD_LSECNT$
	</update>
	<delete id="deleteHAYZ051" parameterClass="java.util.HashMap" >
		DELETE FROM $LIB3$.HAY051PF
		WHERE
			SABUN = $SABUN$ AND LSECNT=$OLD_LSECNT$
	</delete>
	<select id="selectHAYZ082R_1" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
			A.SABUN, A.PTJYM, A.ZZ001, A.ZZ002, A.ZZ003, A.ZZ004, A.ZY001, A.ZY002, A.ZY003, A.ZY004, A.ZY005, 
       		A.ZY006, A.ZZ005, A.ZZ006, A.ZZ007, A.ZZ008, A.ZZ009, A.ZZ010, A.ZZ011, A.ZZ012, A.ZZ013, A.ZZ014, A.ZZ018, 
       		A.ZZ019, A.ZZ020, A.ZZ021, A.ZZ022, A.ZZ028, A.ZZ029, A.ZZ030, A.ZZ031, A.ZZ032, A.ZZ033, A.ZZ034, A.ZZ035, 
       		A.ZZ036, A.ZZ037, A.ZZ038, A.ZZ039, A.ZZ040, A.ZZ041, A.ZZ042, A.ZZ043, A.ZZ044, A.ZZ048, A.ZZ049, A.ZZ050, 
       		A.ZZ050A, A.ZZ050B, A.ZZ055A, A.ZZ055B, A.ZZ055C, A.ZZ055M, A.ZZ055N, A.ZZ051, A.ZZ052, A.ZZ053, A.ZZ054, 
      		A.ZZ055, A.ZZ056, A.ZZ057, A.ZZ058, A.ZZ059, A.ZZ060, A.ZZ061, A.ZZ062,  A.ZZ062A, A.ZZ062B, A.ZZ062C, 
       		A.ZZ063, A.ZZ064, A.ZZ065, A.ZZ070, A.ZZ071, A.ZZ071A, A.ZZ071B, A.ZZ071C, A.ZZ071D, A.ZZ072, 
       		A.ZZ073, A.ZZ074, A.ZZ075, A.ZZ076, A.ZZ077, A.ZZ078, A.ZZ079, A.ZZ080, A.ZZ081, A.ZZ082, A.ZZ090, A.ZZ091, 
       		A.ZZ092, A.ZZ093, A.ZZ094, A.ZZ097, A.ZZ100, A.ZZ101, A.ZZ110, A.ZZ111, A.ZZ112, A.ZZ113, A.ZZ114, A.ZZ115, 
       		A.ZZ119, A.ZZ130, A.ZZ131, A.ZZ132, A.ZZ133, A.ZZ134, A.ZZ135, A.ZZ139, B.SABUN, TRIM(B.KORNM) AS KORNM, B.FORCD,  
			<!-- (SUBSTR(B.PASSA,3,6)||'-'||B.PASSB|| B.PASSC) AS PASSA, -->
       		SUBSTR(B.PASSA,3,6)||'-'||B.PASSB || REPEAT('0', 6-length(trim(char(B.PASSC)))) || B.PASSC AS PASSA,
       		B.ENDAT, B.CNDCD, B.CNDAT, B.DPTCD, B.CUADR, C.SABUN, C.PTJYM, TRIM(C.CHGAD) AS CHGAD, 
       		C.IJJWN, C.BDMTR, C.BDYT1, C.BDYT2, C.WFBCD, C.CHBCD, C.PTBCD, C.KYBCA, C.KYBCB, C.TRBCD, C.BUBCD, C.SOSCD, 
       		C.CBUCD, C.BYFL1, C.BYFL2, C.POFL1, C.POFL2, C.PGPPC, C.PGPRC, C.PHOSA, C.PHOSB, C.PEDUA, C.PEDUB, C.PNHOU, 
       		C.PNMOU, C.PNHU1, C.PNHU2, C.PNHU3, C.PNHU4, C.WDISA, C.KIBMA, C.KIBMB, C.KIBMC, C.KIBMD, 
       		C.SOFL1, C.SOFL2, C.YUNG1, C.YUNG2, C.JUNTJ, C.SINYN, C.CASHN, C.JIGBN, C.JIRON, <!--  C.SPFCD, -->
<!-- 		<isEqual property="MAGAM" compareValue="1">
			0 AS SPFCD, 0 AS ERILM,
			</isEqual>
			<isNotEqual  property="MAGAM" compareValue="1">
			C.SPFCD, C.ERILM,
			</isNotEqual>
-->
  			C.SPFCD, C.ERILM,
       		C.KITA1, C.KITA2, C.TJMON, C.THMON, C.TGMON, C.JENGN, C.KIBUA, C.TOBM1, C.TOBM2, C.RPNM1, 
       		(C.RNOA1||'-'||C.RNOB1||'-'||C.RNOC1) AS RNOA1, <!--  C.ERILM, -->
       		<!--2014년추가  -->
       		<!-- 민S추가내역
       		자녀세액공제, 기부금공제, 표준세액공제,
       		 A.ZX001, A.ZX002, A.ZX005,
       		 제S추가내역
       		 퇴직연금, 장기집합증권, 중기세액감면, 자녀(공제), 연금공제, 보험료대상, 보험료공제, 의료비대상, 의료비공제, 교육비대상, 교육비공제,
			정치기부공10, 정치기부세10, 정치기부공99, 정치기부세99, 법정기부공제, 법정기부세액, 지정기부공제, 지정기부세액, 특별세액공계,
			납세조합공제, 월세액　대상, 월세액　세액, 퇴직연금대상, 퇴직연금공제, 연금저축대상, 연금저축금액
       		 A.ZM001, A.ZX006, A.ZX001, A.ZX007, A.ZX008, A.ZX009, A.ZX010, A.ZX011, A.ZX012, A.ZX013,
			 A.ZX014, A.ZX015, A.ZX016, A.ZX017, A.ZX018, A.ZX019, A.ZX020, A.ZX021, A.ZX100, A.ZX101, A.ZX102,
			 A.ZX103, A.ZX103, A.ZX0071, A.ZX0072, A.ZX0073, A.ZX0074,-->
       		 <!-- END -->
<!--       		 
			<isEqual property="MAGAM" compareValue="1">
			 0 AS ZX001, 0 AS ZX002, 0 AS ZX005,
			 0 AS ZM001, 0 AS ZX006, 0 AS ZX007, 0 AS ZX008, 0 AS ZX009, 0 AS ZX010, 0 AS ZX011, 0 AS ZX012, 0 AS ZX013,
			 0 AS ZX014, 0 AS ZX015, 0 AS ZX016, 0 AS ZX017, 0 AS ZX018, 0 AS ZX019, 0 AS ZX020, 0 AS ZX021, 0 AS ZX100, 0 AS ZX101, 0 AS ZX102, 0 AS ZX103,
			 0 AS ZX0071, 0 AS ZX0072, 0 AS ZX0073, 0 AS ZX0074,
			</isEqual>
			<isNotEqual  property="MAGAM" compareValue="1">
			 A.ZX001, A.ZX002, A.ZX005, A.ZM001, A.ZX006, A.ZX007, A.ZX008, A.ZX009, A.ZX010, A.ZX011, A.ZX012, A.ZX013,
			 A.ZX014, A.ZX015, A.ZX016, A.ZX017, A.ZX018, A.ZX019, A.ZX020, A.ZX021, A.ZX100, A.ZX101, A.ZX102, A.ZX103, A.ZX0071, A.ZX0072, A.ZX0073, A.ZX0074,
			</isNotEqual>
 -->			
			A.ZX001, A.ZX002, A.ZX005, A.ZM001, A.ZX006, A.ZX007, A.ZX008, A.ZX009, A.ZX010, A.ZX011, A.ZX012, A.ZX013,
			A.ZX014, A.ZX015, A.ZX016, A.ZX017, A.ZX018, A.ZX019, A.ZX020, A.ZX021, A.ZX100, A.ZX101, A.ZX102, A.ZX103, A.ZX0071, A.ZX0072, A.ZX0073, A.ZX0074,
			<!-- 2015.05.13 추가 => 6세이하, 출생입양 , 장애인보장성대상, 장애인보장성세액   C.ZX022, C.ZX023, C.ZX024, C.ZX025 -->
<!-- 
			<isEqual property="MAGAM" compareValue="1">
			0 AS ZX022, 0 AS ZX023, 0 AS ZX024, 0 AS ZX025,
			</isEqual>
			<isNotEqual  property="MAGAM" compareValue="1">
			A.ZX022, A.ZX023, A.ZX024, A.ZX025,
			</isNotEqual>
 -->			
			A.ZX022, A.ZX023, A.ZX024, A.ZX025,	
			A.ZX026, A.ZX027, (A.ZX020+A.ZX026) AS ZX02026, (A.ZX021+A.ZX027) AS ZX02127,
       		C.RPAT1, C.RBAT1, C.RGB11, C.RT1X1, C.RT1X2, C.RT1X3, C.RG1P1, C.RG1P2, C.RG1P3, C.RG1P4, 
       		C.RGB12, C.RPNM2, (C.RNOA2||'-'||C.RNOB2||'-'||C.RNOC2) AS RNOA2, 
       		C.RPAT2, C.RBAT2, C.RGB21, C.RT2X1, C.RT2X2, C.RT2X3, C.RG2P1, 
       		C.RG2P2, C.RG2P3, C.RG2P4, C.RGB22, C.SIDAT, C.SSDAT, D.DPCONM, D.DPSQNO,
       		<!-- 2014년 추가 전근무지 입퇴사일 -->
       		C.RDTS1, C.RDTE1, C.RDTS2, C.RDTE2,
			<!-- 2015년 연말정산 추가 - 주택임차B 10 고정, 주택자금B 15 고정 AND 비거치, 주택자금B 15 고정 OR 비거치, 주택자금B 15 기타 -->
      		A.ZZ055P, A.ZZ055Q, A.ZZ055R, A.ZZ055S
    FROM 
	<isEqual property="MAGAM" compareValue="1">
		<isEqual  property="SELGUB" compareValue="1">
		$LIB3$.HAY200PF A
			INNER JOIN $LIB3$.HMD020PF B ON A.SABUN = B.SABUN 
			INNER JOIN $LIB3$.HAY100PF C ON A.SABUN = C.SABUN AND A.PTJYM = C.PTJYM
			INNER JOIN $LIB2$.MST650PF D ON B.DPTCD = D.DPCODE 
	WHERE
			<isEqual  property="GUBCD" compareValue="Y">
			A.PTJYM = $PTJYM$ AND D.DPCOMP = #COMPS#
			</isEqual>
			<isEqual  property="GUBCD" compareValue="J">
			A.PTJYM BETWEEN $PTJYM_FR$ AND $PTJYM_TO$
			AND D.DPCOMP = #COMPS#
			</isEqual>
	 		<isNotEmpty prepend="AND" property="SABUN">
				A.SABUN=$SABUN$
			</isNotEmpty>   
			<isNotEmpty prepend="AND" property="FORCD">
				B.FORCD=$FORCD$
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="DPTCD1">
				B.DPTCD <![CDATA[>=]]> #DPTCD1# AND B.DPTCD <![CDATA[<=]]> #DPTCD1#
			</isNotEmpty> 
			<isNotEmpty prepend="AND" property="PAYCD">
				B.PAYCD=$PAYCD$
			</isNotEmpty>
	ORDER BY A.PTJYM, B.FORCD, D.DPSQNO, B.DPTCD, B.SEXCD DESC, A.SABUN
		</isEqual>		
		<isNotEqual  property="SELGUB" compareValue="1">
		$LIB3$.HAY200PF A
			INNER JOIN $LIB3$.HMD020PF B ON A.SABUN = B.SABUN 
            INNER JOIN $LIB3$.HAY100PF C ON A.SABUN = C.SABUN AND A.PTJYM = C.PTJYM
			INNER JOIN $LIB2$.MST650PF D ON B.DPTCD = D.DPCODE 
			INNER JOIN PSZDBLIB.M_USR_TID E ON A.SABUN = E.TEL_NO1
	WHERE
			A.PTJYM = $PTJYM$ AND D.DPCOMP = #COMPS# AND E.USER_ID = #USER_ID# 
	ORDER BY A.PTJYM, B.FORCD, D.DPSQNO, B.DPTCD, B.SEXCD DESC, A.SABUN
		</isNotEqual>
	</isEqual>			
	<isNotEqual  property="MAGAM" compareValue="1">
		<isEqual  property="SELGUB" compareValue="1">
	    $LIB3$.HAY081PF A
	    		INNER JOIN $LIB3$.HMD020PF B ON A.SABUN = B.SABUN 
				INNER JOIN $LIB3$.HAY011PF C ON A.SABUN = C.SABUN 
				INNER JOIN $LIB2$.MST650PF D ON B.DPTCD = D.DPCODE 
				LEFT JOIN $LIB3$.HAY021PF E ON A.SABUN = E.SABUN
	WHERE 
    		D.DPCOMP = #COMPS# AND E.RELCD = 10
    		<isNotEmpty prepend="AND" property="SABUN">
				A.SABUN=$SABUN$
			</isNotEmpty>   
			<isNotEmpty prepend="AND" property="FORCD">
				B.FORCD=$FORCD$
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="DPTCD1">
				B.DPTCD <![CDATA[>=]]> #DPTCD1# AND B.DPTCD <![CDATA[<=]]> #DPTCD2#
			</isNotEmpty> 
			<isNotEmpty prepend="AND" property="PAYCD">
				B.PAYCD=$PAYCD$
			</isNotEmpty>
	ORDER BY A.PTJYM, B.FORCD, D.DPSQNO, B.DPTCD, B.SEXCD DESC, A.SABUN
		</isEqual>
		<isNotEqual  property="SELGUB" compareValue="1">
		$LIB3$.HAY081PF A
			INNER JOIN  $LIB3$.HMD020PF B ON A.SABUN = B.SABUN 
			INNER JOIN  $LIB3$.HAY011PF C ON A.SABUN = C.SABUN 
			INNER JOIN  $LIB2$.MST650PF D ON B.DPTCD = D.DPCODE
			INNER JOIN  PSZDBLIB.M_USR_TID E ON A.SABUN = E.TEL_NO1 	
	WHERE 
			D.DPCOMP = #COMPS# AND E.USER_ID = #USER_ID# 
	ORDER BY A.PTJYM, B.FORCD, D.DPSQNO, B.DPTCD, B.SEXCD DESC, A.SABUN
		</isNotEqual>
	</isNotEqual>
	</select>

	<select id="selectHAYZ082R_2" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
			A.SABUN, TRIM(A.RELNM) AS RELNM, A.RELNO, A.KIBCD, A.KYBNO, A.BTPNO, A.PGPSK, A.SPFCD, A.KIBCU,
			<!-- 2015.05.13 보장성보험(일반/장애인전용 분리) PGPSK1, PGPSK2 추가 -->
			CASE WHEN B.PGPRC != 0 THEN (
				CASE WHEN A.TRBNO = 0 THEN A.PGPSK ELSE 0 END)
			ELSE A.PGPSK END AS PGPSK1,
			CASE WHEN B.PGPRC != 0 THEN (
				CASE WHEN A.TRBNO = 1 THEN A.PGPSK ELSE 0 END)
			ELSE 0 END AS PGPSK2,
			A.PHOSK, A.PEDSK, A.PSISK, A.JIGBK, A.CJANU, A.KIBAK, A.KIBAU, A.KIBCK, 
			SUBSTR(A.KORNO,7,1) AS KORNO, TRIM((SUBSTR(A.KORNO,1,6)||'-'||SUBSTR(A.KORNO,7,13))) AS KORNO1, 
			A.BUBNO, A.TRBNO, A.CBUNO, A.PGPSU, A.PHOSU, A.KIBCK, 
			A.PEDSU, A.PSISU, A.JIKBU, A.KIBBK, A.KIBBU, A.KIBDK, A.KIBDU, A.JIROU, A.CSHSU,
			A.CSHSK, A.CJANK, A.CJANU, A.PBTSK, A.PBTSU,
			<!-- 2015.05.13 다자녀 추가 B.BYFL2-->
			B.BYFL2,
			(SELECT COUNT(TRBNO) FROM $LIB3$.HAY021PF WHERE TRBNO > 0 AND SABUN = A.SABUN) AS TRBNO1,
			<!--2014년추가  -->
       		<!--의료보험+고용보험 ZZ050-->
			CASE WHEN  A.RELCD=10 THEN D.ZZ050 ELSE 0 END AS ZZ050
       		 <!-- END -->
	<isEqual  property="MAGAM" compareValue="1">
		<isEqual  property="SELGUB" compareValue="1">
		FROM 
				$LIB3$.HAY121PF A INNER JOIN $LIB3$.HAY100PF B ON A.SABUN = B.SABUN AND A.PTJYM=B.PTJYM
								  INNER JOIN $LIB3$.HAY200PF D ON A.SABUN = D.SABUN AND A.PTJYM=D.PTJYM
		WHERE
			<isEqual  property="GUBCD" compareValue="Y">
			A.PTJYM = $PTJYM$
			</isEqual>
			<isEqual  property="GUBCD" compareValue="J">
			A.PTJYM BETWEEN $PTJYM_FR$ AND $PTJYM_TO$
			</isEqual>
			<isNotEmpty property="SABUN">
			AND A.SABUN=$SABUN$
			</isNotEmpty>
		ORDER BY A.RELNO
		</isEqual>
		<isNotEqual property="SELGUB" compareValue="1">
		FROM 
				$LIB3$.HAY121PF A INNER JOIN $LIB3$.HAY100PF B ON A.SABUN = B.SABUN AND A.PTJYM=B.PTJYM
								  INNER JOIN PSZDBLIB.M_USR_TID C ON A.SABUN = C.TEL_NO1 
								  INNER JOIN $LIB3$.HAY200PF D ON A.SABUN = D.SABUN AND A.PTJYM=D.PTJYM
		WHERE
			A.PTJYM = $PTJYM$	
			AND	C.USER_ID = #USER_ID# 
		ORDER BY A.RELNO
		</isNotEqual>	
	</isEqual>
	<isNotEqual  property="MAGAM" compareValue="1">
		<isEqual  property="SELGUB" compareValue="1">
		FROM 
				$LIB3$.HAY021PF A INNER JOIN $LIB3$.HAY011PF B ON A.SABUN = B.SABUN
								  INNER JOIN $LIB3$.HAY081PF D ON A.SABUN = D.SABUN
			<isNotEmpty property="SABUN">
		WHERE	A.SABUN=$SABUN$
			</isNotEmpty>
		ORDER BY A.RELNO
		</isEqual>
		<isNotEqual property="SELGUB" compareValue="1">
		FROM 
				$LIB3$.HAY021PF A INNER JOIN $LIB3$.HAY011PF B ON A.SABUN = B.SABUN
								  INNER JOIN PSZDBLIB.M_USR_TID C ON A.SABUN = C.TEL_NO1 
								  <!-- 2014년도 추가 고용보험 -->
								  INNER JOIN $LIB3$.HAY081PF D ON A.SABUN = D.SABUN
		WHERE
				C.USER_ID = #USER_ID# 
		ORDER BY A.RELNO
		</isNotEqual>
	</isNotEqual>
	</select>
	<select id="selectHAYZ091Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		TRIM(B.MEDNO) AS MEDNO, SUBSTR(DIGITS(B.PASSA),3,6) || '-' || DIGITS(B.PASSB) || DIGITS(B.PASSC) AS JUNO,
		A.ZZ020, A.ZY002, A.ZZ003, A.ZZ004, A.ZY004, A.ZZ020+A.ZY002 AS TOTAL,
		B.SABUN, TRIM(B.KORNM) AS KORNM, B.GNDAT, B.ENDAT, B.DPTCD, TRIM(C.DPCONM) AS DPCONM, C.DPSQNO
	FROM
		$LIB3$.HAY081PF A, $LIB3$.HMD020PF B, $LIB2$.MST650PF C
	WHERE
		A.SABUN=B.SABUN AND B.DPTCD=C.DPCODE AND C.DPCOMP=#COMPS#
	ORDER BY JUNO
	</select>
	<select id="selectHMDZ001Q_A" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		B.DPSQNO, A.DPTCD, TRIM(B.DPCONM) AS DPCONM, TRIM(B.DPDPNM) AS DPDPNM,
		CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
		ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,
		TRIM(A.KORNM) AS KORNM, A.SEXCD,
		CASE WHEN A.SEXCD='M' THEN '남' ELSE '여' END AS SEXNM,
		A.HONIN,
		CASE WHEN A.HONIN ='M00' THEN '독신' ELSE 
			'배우자'||SUBSTR(A.HONIN,2,1)||'자녀'||SUBSTR(A.HONIN,3,1)
			END AS HONNM,
		A.PAYCD,
		CASE WHEN A.PAYCD= 1 THEN '관리직' WHEN A.PAYCD= 2 THEN '직장'
			 WHEN A.PAYCD= 3 THEN '반장' WHEN A.PAYCD= 4 THEN '노동조합'
			 WHEN A.PAYCD= 9 THEN '기능직' ELSE '' END AS PAYNM,
		A.YNBCD,
		CASE WHEN A.YNBCD='1' THEN '연봉자' ELSE '월급자' END AS YNBNM,
		A.GRADE,
		(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'ODCD' || A.GRADE) AS PCONT,
		A.PASSA, A.GNDAT, A.ENDAT, A.PEDTB, A.CNDAT,
		CASE WHEN A.GNDAT=A.PEDTB THEN 0 ELSE A.PEDTB END PEDAT,
		C.DAD, C.MOM, C.WIFE, C.CHILD
	FROM $LIB3$.HMD020PF A
	LEFT OUTER JOIN $LIB2$.MST650PF B ON A.DPTCD=B.DPCODE AND B.DPCOMP=#COMPS#
	LEFT OUTER JOIN (SELECT SABUN, SUM(CASE WHEN RELCD = 40 THEN 1 ELSE 0 END) AS DAD, 
                                   SUM(CASE WHEN RELCD = 41 THEN 1 ELSE 0 END) AS MOM,
                                   SUM(CASE WHEN RELCD = 20 THEN 1 ELSE 0 END) AS WIFE, 
                                   SUM(CASE WHEN RELCD >= 30 and relcd <![CDATA[<=]]> 39 THEN 1 ELSE 0 END) AS CHILD
                     FROM $LIB3$.HAY021PF GROUP BY SABUN) C ON A.SABUN=C.SABUN
	<dynamic prepend="WHERE">
		<isEqual prepend="AND" property="CNDCD" compareValue="0">
			A.CNDCD != 'R'
		</isEqual>
		<isEqual prepend="AND" property="CNDCD" compareValue="1">
			(A.CNDAT =0 OR A.CNDAT >= $CNDAT$)
		</isEqual>
		<isEqual prepend="AND" property="CNDTOP" compareValue="1">
			A.GRADE > '00'
		</isEqual>
	</dynamic>
	ORDER BY B.DPSQNO, A.DPTCD, A.GRADE, A.GNDAT, SABUN
	</select>
	<select id="selectHMDZ001Q_B" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		<!-- KE오류시 3B코드 삭제 3B코드는 KA만 사용(?)  -->
	SELECT
		CASE WHEN A.GRADE = '1A' THEN '1부장' WHEN A.GRADE = '1B' THEN '2차장' WHEN A.GRADE = '2A' THEN '3과장'
		WHEN A.GRADE = '2B' OR A.GRADE = '2D' THEN '4대리' WHEN A.GRADE = '3A' AND A.SEXCD = 'M' THEN '5담당남'
		WHEN A.GRADE = '3A' AND A.SEXCD = 'F' THEN '6담당여' WHEN (A.GRADE = '2C' OR A.GRADE = '4A' OR A.GRADE = '3B') THEN '7직반장'
		WHEN (A.GRADE = '5A' OR A.GRADE = '6A') AND A.SEXCD = 'M' THEN '8기능남'  
		WHEN (A.GRADE = '5A' OR A.GRADE = '6A') AND A.SEXCD = 'F' THEN '9기능여' ELSE ' ' END GRADENM,
		COUNT(A.SABUN) AS CNT_GRADE, SUM(B.DAD) AS CNT_DAD, SUM(B.MOM) AS CNT_MOM, SUM(B.WIFE) AS CNT_WIFE, SUM(B.CHILD) AS CNT_CHILD
	FROM $LIB3$.HMD020PF A
	LEFT OUTER JOIN (SELECT  SABUN, SUM(CASE WHEN RELCD = 40 THEN 1 ELSE 0 END) AS DAD, 
						SUM(CASE WHEN RELCD = 41 THEN 1 ELSE 0 END) AS MOM,
						SUM(CASE WHEN RELCD = 20 THEN 1 ELSE 0 END) AS WIFE, 
						SUM(CASE WHEN RELCD >= 30 AND RELCD <![CDATA[<=]]>  39 THEN 1 ELSE 0 END) AS CHILD
						FROM $LIB3$.HAY021PF
						GROUP BY SABUN) B ON  A.SABUN = B.SABUN
	WHERE A.GRADE > '00'
		<isEqual prepend="AND" property="CNDCD" compareValue="0">
			A.CNDCD != 'R'
		</isEqual>
		<isEqual prepend="AND" property="CNDCD" compareValue="1">
			(A.CNDAT =0 OR A.CNDAT >= $CNDAT$)
		</isEqual>
	GROUP BY CASE WHEN A.GRADE = '1A' THEN '1부장' WHEN A.GRADE = '1B' THEN '2차장' WHEN A.GRADE = '2A' THEN '3과장'
			WHEN A.GRADE = '2B' OR A.GRADE = '2D' THEN '4대리' WHEN A.GRADE = '3A' AND A.SEXCD = 'M' THEN '5담당남'
			WHEN A.GRADE = '3A' AND A.SEXCD = 'F' THEN '6담당여' WHEN (A.GRADE = '2C' OR A.GRADE = '4A' OR A.GRADE = '3B') THEN '7직반장'
			WHEN (A.GRADE = '5A' OR A.GRADE = '6A') AND A.SEXCD = 'M' THEN '8기능남'  
			WHEN (A.GRADE = '5A' OR A.GRADE = '6A') AND A.SEXCD = 'F' THEN '9기능여' ELSE ' ' END
	ORDER BY GRADENM
	</select>
	<select id="selectHMDZ002Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		B.DPSQNO, A.DPTCD, TRIM(B.DPCONM) AS DPCONM, TRIM(B.DPDPNM) AS DPDPNM, 
		CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
			ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,
		TRIM(A.KORNM) AS KORNM, TRIM(A.BUCD1) AS BUCD1, A.YSCDA, A.YSCDB, A.YSCDC,
		A.GRADE, A.GNDAT
	FROM $LIB3$.HMD020PF A
	LEFT OUTER JOIN $LIB2$.MST650PF B ON A.DPTCD=B.DPCODE AND B.DPCOMP=#COMPS#
	<dynamic prepend="WHERE">
		<isEqual prepend="AND" property="CNDCD" compareValue="0">
			A.CNDCD != 'R'
		</isEqual>
		<isEqual prepend="AND" property="CNDCD" compareValue="1">
			(A.CNDAT =0 OR A.CNDAT >= $CNDAT$)
		</isEqual>	
	</dynamic>
	ORDER BY B.DPSQNO, A.DPTCD, A.GRADE, A.GNDAT, SABUN
	</select>
	<select id="selectHMDZ003Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		B.DPWOCD, A.DPTCD, TRIM(B.DPCONM) AS DPCONM, TRIM(B.DPDPNM) AS DPDPNM,
		CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
		ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN, TRIM(A.KORNM) AS KORNM,
		TRIM(COALESCE(C.PCONT,' ')) AS PCONT, 
		CASE WHEN A.SEXCD = 'F' THEN '여' ELSE '남' END AS SEXNM, A.GNDAT, A.PASSA,
		TRIM(CASE WHEN A.BEDAT <![CDATA[<]]> $CNDAT$ THEN '' ELSE COALESCE(D.PCONT,' ') END) AS BALGU,
		CASE WHEN A.BEDAT <![CDATA[<]]> $CNDAT$ THEN '' ELSE DIGITS(A.BSDAT) END AS BALSTDT,
		CASE WHEN A.BEDAT <![CDATA[<]]> $CNDAT$ THEN '' ELSE DIGITS(A.BEDAT) END AS BALENDDT, B.DPSQNO
	FROM $LIB3$.HMD020PF A  
	LEFT OUTER JOIN $LIB3$.HUM010PF C ON 'ODCD' || A.GRADE = C.PCODE
	LEFT OUTER JOIN $LIB3$.HUM010PF D ON 'HACD' || A.BALCD = D.PCODE, $LIB2$.MST650PF B
	WHERE
		(A.CNDAT = 0 OR  A.CNDAT >= $CNDAT$)
		AND  A.DPTCD = B.DPCODE
		AND  B.DPCOMP = #COMPS#
	ORDER BY B.DPWOCD, B.DPSQNO, SABUN
	</select>
	<select id="selectHMDZ023B" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		B.DPSQNO, A.DPTCD, TRIM(B.DPDPNM) AS DPDPNM,
		CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
			ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,
		TRIM(A.KORNM) KORNM, TRIM(COALESCE(D.GJANB2,'')) AS GJANB2, TRIM(COALESCE(D.GJANB2,'')) AS GJANB2_ORG,
		D.BNKCD2, COALESCE(C.CAPNM,'') AS CAPNM, A.GNDAT,
		CASE WHEN A.CNDCD='R' THEN '퇴사자' ELSE '' END CNDNM,
		A.ENDAT, A.CNDCD
	FROM
		$LIB3$.HMD020PF A, $LIB2$.MST650PF B, $LIB3$.HMD010PF D
	LEFT OUTER JOIN $LIB2$.MST600PF C ON DIGITS(D.BNKCD2) = C.VNDOR
	WHERE
		A.SABUN >= $SABUNFR$ AND A.SABUN <![CDATA[<=]]> $SABUNTO$
		<isEqual prepend="AND" property="CNDCD" compareValue="0">
		A.CNDCD != 'R'
		</isEqual>
		AND A.DPTCD = B.DPCODE
		AND A.SABUN = D.SABUN
		AND B.DPCOMP = #COMPS#
	ORDER BY B.DPSQNO, A.DPTCD, A.SABUN
	</select>
 	<select id="selectHMDZ023B_Check" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT 
		COUNT(*) CNT 
	FROM
		$LIB3$.HMD010PF
	WHERE 
		SABUN=$SABUN$
	</select>
	<insert id="insertHMDZ023B" parameterClass="java.util.HashMap">
	INSERT INTO $LIB3$.HMD010PF
		(SABUN, BNKCD2, GJANB2)
	VALUES
		($SABUN$, $BNKCD2$, #GJANB2#)
	</insert>
	<update id="updateHMDZ023B" parameterClass="java.util.HashMap">
	UPDATE 
		$LIB3$.HMD010PF
	SET
		BNKCD2 = $BNKCD2$,
		GJANB2 = #GJANB2#
	WHERE 
		SABUN=$SABUN$
	</update>
	<delete id="deleteHMDZ023B" parameterClass="java.util.HashMap">
	DELETE FROM 
		$LIB3$.HMD010PF
	WHERE 
		SABUN=$SABUN$
	</delete>
	<select id="selectHMDZ004Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		D.DPSQNO, TRIM(D.DPDPNM) AS DPDPNM, DIGITS(A.SABUN) AS SABUN, TRIM(C.KORNM) AS KORNM,
		SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END)-
		SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) = 'P' THEN A.GAMBMP ELSE 0 END)-
		SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) = 'P' THEN A.YCSUDP ELSE 0 END) AS A1,
		SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) <![CDATA[<>]]> 'P' THEN A.PAMTTP ELSE 0 END) AS A2,
		SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) = 'P' THEN A.YCSUDP ELSE 0 END)+
		<!-- 년차
			SUM(CASE WHEN A.KNYYM = 201503 AND A.PTYPE = 'P0' THEN B.YYAMT ELSE 0 END) AS A3, 
			SUM(CASE WHEN A.KNYYM = $YYEAR_ORG$||'03' AND A.PTYPE = 'P0' THEN B.YYAMT ELSE 0 END) AS A3, 
		 -->
		SUM(CASE WHEN A.KNYYM = $KNYYMT$ AND A.PTYPE = 'P0' THEN B.YYAMT ELSE 0 END) AS A3, 
		0 AS A4
	FROM
		$LIB3$.HPC200PF A 
		LEFT OUTER JOIN $LIB3$.HPM100PF B ON B.YYEAR = $YYEAR$ AND B.GUBUN = 'Y' AND  B.GOBOH > 0 AND A.SABUN = B.SABUN,
		$LIB3$.HMD020PF C, $LIB2$.MST650PF D
	WHERE
		A.KNYYM >= $KNYYMF$ AND A.KNYYM <![CDATA[<=]]> $KNYYMT$
		AND DIGITS(A.SABUN) IN $arrSABUN$
		AND A.GRADEP <![CDATA[<]]> '2B'
		AND A.SABUN = C.SABUN
		AND A.DPTCDP = D.DPCODE
		AND D.DPCOMP =#COMPS# 
	GROUP BY D.DPSQNO, D.DPDPNM, DIGITS(A.SABUN), C.KORNM
	
	UNION ALL
	SELECT
		D.DPSQNO, TRIM(D.DPDPNM) AS DPDPNM, DIGITS(A.SABUN) AS SABUN, TRIM(C.KORNM) AS KORNM,
		SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END)-
		SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) = 'P' THEN A.GAMBMP ELSE 0 END)-
		SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) = 'P' THEN A.YCSUDP ELSE 0 END)-
		SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OVSUDP ELSE 0 END)-
		SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP ELSE 0 END)-
		SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) = 'P' THEN A.YUSUDP ELSE 0 END)-
		SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) = 'P' THEN A.HKSUDP ELSE 0 END)-
		SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) = 'P' THEN A.ANSUDP ELSE 0 END)-
		SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) = 'P' THEN A.ORSUDP ELSE 0 END) AS A1,
		SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) <![CDATA[<>]]> 'P' THEN A.PAMTTP ELSE 0 END) AS A2,
		SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) = 'P' THEN A.YCSUDP ELSE 0 END)+
		<!-- 
		SUM(CASE WHEN A.KNYYM = $YYEAR_ORG$||'03' AND A.PTYPE = 'P0' THEN B.YYAMT ELSE 0 END) AS A3, 
		 -->
		SUM(CASE WHEN A.KNYYM = $KNYYMT$ AND A.PTYPE = 'P0' THEN B.YYAMT ELSE 0 END) AS A3, 
		SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OVSUDP ELSE 0 END)+
		SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP ELSE 0 END)+
		SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) = 'P' THEN A.YUSUDP ELSE 0 END)+
		SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) = 'P' THEN A.HKSUDP ELSE 0 END)+
		SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) = 'P' THEN A.ANSUDP ELSE 0 END)+
		SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) = 'P' THEN A.ORSUDP ELSE 0 END) AS A4
	FROM
		$LIB3$.HPC200PF A 
		LEFT OUTER JOIN $LIB3$.HPM100PF B ON B.YYEAR = $YYEAR$ AND B.GUBUN = 'Y' AND B.GOBOH > 0 AND A.SABUN = B.SABUN,
		$LIB3$.HMD020PF C, $LIB2$.MST650PF D
	WHERE
		A.KNYYM >= $KNYYMF$ AND A.KNYYM <![CDATA[<=]]> $KNYYMT$
		AND DIGITS(A.SABUN) IN $arrSABUN$
		AND A.GRADEP >= '2B'
		AND A.SABUN = C.SABUN
		AND A.DPTCDP = D.DPCODE
		AND D.DPCOMP = #COMPS#
	GROUP BY D.DPSQNO, D.DPDPNM, DIGITS(A.SABUN), C.KORNM
	ORDER BY DPSQNO, SABUN
	</select>
	<select id="selectHMDZ005Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		B.DPSQNO, C.DPTCD, TRIM(B.DPDPNM) AS DPDPNM, C.PAYCD, 
		SUM(A.UCCDT) AS UCCDT, SUM(A.YCCDT) AS YCCDT, SUM(A.SLCDT) AS SLCDT,
		SUM(A.IJCDT) AS IJCDT, SUM(A.BGCDT) AS BGCDT, SUM(A.MGCDT+A.UGCDT) AS TOT
	FROM
		$LIB3$.HPC200PF A, $LIB2$.MST650PF B, $LIB3$.HMD020PF C
	WHERE
		A.KNYYM = $KNYYM$
		AND A.PTYPE = 'P0'
		AND B.DPCOMP = #COMPS#
		AND B.DPCODE = C.DPTCD
		AND C.SABUN = A.SABUN
	GROUP BY B.DPSQNO, C.DPTCD, B.DPDPNM, C.PAYCD
	ORDER BY B.DPSQNO, C.DPTCD
	</select>
	<select id="selectHMDZ006Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		C.DPSQNO, TRIM(C.DPDPNM) AS DPDPNM, A.KNYYM, A.PTYPE, A.DPTCDP,
		TRIM(B.KORNM) AS KORNM, DIGITS(A.SABUN) AS SABUN, 
		A.PAMTTP, A.TAX1MP, A.TAX3MP, A.SYDAT,
		<!--추가내용  -->
		A.SEXCDP, A.GRADEP, B.GNDAT, A.PAYCDP, 
		CASE WHEN A.PAYCDP= 1 THEN '관리직' WHEN A.PAYCDP= 2 THEN '직장'
			 WHEN A.PAYCDP= 3 THEN '반장' WHEN A.PAYCDP= 4 THEN '노동조합'
			 WHEN A.PAYCDP= 9 THEN '기능직' ELSE '' END AS PAYNM,
		A.YNBCDP,
		CASE WHEN A.YNBCDP='1' THEN '연봉자' ELSE '월급자' END AS YNBNM,
		CASE WHEN A.PTYPE ='P0' THEN '정기급여' WHEN A.PTYPE ='B0' THEN '정기상여' WHEN A.PTYPE ='BA' THEN '특별상여' 
		WHEN A.PTYPE ='P1' THEN '급여소급' WHEN A.PTYPE ='B1' THEN '상여소급' WHEN A.PTYPE ='CA' THEN '성과급' 
		WHEN A.PTYPE ='CB' THEN '성과급등'  WHEN A.PTYPE ='CC' THEN '성과급등' WHEN A.PTYPE ='P2' THEN '통상소급' ELSE '' END AS PTYPENM,
		(A.TAX4MP+A.PMTX4P) AS TAX4MP, (A.GYPPCP+A.PMGYCP) AS GYPPCP, (A.BGPPCP+A.PMBGCP) AS BGPPCP
		
	FROM
		$LIB3$.HPC200PF A, $LIB3$.HMD020PF B, $LIB2$.MST650PF C
	WHERE
		A.KNYYM = $KNYYM$
		AND A.SABUN = B.SABUN
		AND A.DPTCDP = C.DPCODE
		AND C.DPCOMP = #COMPS#
		<isNotEmpty prepend="AND" property="PTYPE">
			A.PTYPE = #PTYPE#
		</isNotEmpty>		
	ORDER BY A.PTYPE, C.DPSQNO, SABUN
	</select>
	<select id="selectHMDZ007Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		C.DPSQNO, A.KNYYM, DIGITS(A.SABUN) AS SABUN, TRIM(B.KORNM) AS KORNM, A.SEXCDP, A.PTYPE, A.DPTCDP,
		TRIM(C.DPDPNM) AS DPDPNM, A.GRADEP,
		A.PAYCDP,
		CASE WHEN A.PAYCDP= 1 THEN '관리직' WHEN A.PAYCDP= 2 THEN '직장'
			 WHEN A.PAYCDP= 3 THEN '반장' WHEN A.PAYCDP= 4 THEN '노동조합'
			 WHEN A.PAYCDP= 9 THEN '기능직' ELSE '' END AS PAYNM,
		A.HOBONP, B.PASSA, B.AGEYY, B.AGEMM, B.GNDAT, B.CNTYY, B.CNTMM,
		A.YENBOP,
		A.KIBONP, A.JKSUDP, A.TESUDP, A.QLSUDP, A.BJSUDP, A.GSSUDP, A.WHSUDP, A.CJSUDP, A.JMSUDP, A.WFSUDP,
		A.YHSUDP, A.DOSUDP, A.GTSUDP, A.HASUDP, A.TQSUDP, A.OTSUDP, A.FILL1P, A.FILL2P, A.FILL3P, A.PMKJMP,
		A.PMKBMP, A.EDUCMP, A.SLSUDP, A.UCSUDP, A.YCSUDP, A.OTTIM, A.ANTIM, A.HTTIM, A.YTTIM, A.OVSUDP,
		A.ANSUDP, A.HKSUDP, A.YUSUDP, A.ORSUDP, A.PAMTTP, A.KDPYDP, A.KDPYTP, A.KIBYTP
	FROM
		$LIB3$.HPC200PF A
		LEFT OUTER JOIN $LIB2$.MST650PF C ON A.DPTCDP=C.DPCODE,
		$LIB3$.HMD020PF B
	WHERE
		A.SABUN=B.SABUN 
		AND A.KNYYM BETWEEN $KNYYMF$ AND $KNYYMT$
		AND A.PTYPE='P0'
		AND C.DPCOMP = #COMPS#
	ORDER BY C.DPSQNO, A.DPTCDP, A.GRADEP
	</select>
	<select id="selectHPCZ104Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		<isEqual property="PAYCD" compareValue="M">
		SUBSTR(A.BYYYM,1,4)||'/'||SUBSTR(A.BYYYM,5,2)||(CASE WHEN A.PAYCD=9 THEN ' 생산직' ELSE ' 관리직' END) AS PAYNM,
		</isEqual>
		<isNotEqual property="PAYCD" compareValue="M">
		SUBSTR(A.KNYYM,1,4)||'/'||SUBSTR(A.KNYYM,5,2)||(CASE WHEN A.PAYCD=9 THEN ' 생산직' ELSE ' 관리직' END) AS PAYNM,
		</isNotEqual>
		DIGITS(A.SABUN) AS SABUN, TRIM(A.KORNM) AS KORNM,
		<!-- 외국인 구분코드 -->
		CASE WHEN A.PASSB>=5 AND A.PASSB <![CDATA[<=]]> 8 THEN 1 ELSE 0 END AS FORCX,
		A.GRADE, A.HOBON, A.CNDCD, A.BYFL2, A.KIBON, A.GTSUD, A.HASUD,
		<isEqual property="PAYCD" compareValue="M">
		0 AS ANSUD, 0 AS UCSUD, A.BAX1M AS TAX1M, 0 AS DAEGM, 0 AS EFCAC, 0 AS HOURM, 
		</isEqual>
		<isNotEqual property="PAYCD" compareValue="M">
		A.ANSUD AS ANSUD, A.UCSUD AS UCSUD, A.TAX1M AS TAX1M, A.DAEGM AS DAEGM, A.EFCAC AS EFCAC, A.HOURM AS HOURM, 
		</isNotEqual>
		B.TDPTT, B.GSGAY, B.TAX1Y, B.LMTDP, B.SAX1Y, A.QCOD3,
		A.PMWCD, A.BUBCD, A.JKSUD, A.WHSUD, A.TQSUD,
		<isEqual property="PAYCD" compareValue="M">
		0 AS OVSUD, 0 AS SLSUD, A.BAX3M AS TAX3M, 0 AS DAERM, 0 AS LABOM, 0 AS AMEMB, 
		</isEqual>
		<isNotEqual property="PAYCD" compareValue="M">
		A.OVSUD AS OVSUD, A.SLSUD AS SLSUD, A.TAX3M AS TAX3M, A.DAERM AS DAERM, A.LABOM AS LABOM, A.AMEMB AS AMEMB, 
		</isNotEqual>
		B.BDPTT, B.SDGJY, B.PJCNT, B.LABPY, B.SAX3Y, A.WFBCD, A.KYBCD,
		A.BYFL1, A.CHBCD, A.PTBCD, A.TRBCD, A.TESUD, A.CJSUD, A.FILL1, 
		<isEqual property="PAYCD" compareValue="M">
		0 AS HKSUD, A.BMKBM AS PMKBM, A.BAX4M AS TAX4M, 0 AS PMTX4, 0 AS CHJAM, 0 AS SAWKM, 
		</isEqual>
		<isNotEqual property="PAYCD" compareValue="M">
		A.HKSUD AS HKSUD, A.PMKBM AS PMKBM, A.TAX4M AS TAX4M, A.PMTX4 AS PMTX4, A.CHJAM AS CHJAM, A.SAWKM AS SAWKM, 
		</isNotEqual>
		B.GAYTT, B.KSPAY, B.TDPTY, B.LMTTB, B.PAX1Y, B.CAX1Y,
		A.ENDAT,
		<isEqual property="PAYCD" compareValue="M">
		0 AS KDPYD,
		</isEqual>
		<isNotEqual property="PAYCD" compareValue="M">
		A.KDPYD AS KDPYD, 
		</isNotEqual>	
		A.QLSUD,
		<isEqual property="PAYCD" compareValue="M">
		A.BMKJM AS PMKJM, 0 AS YCSUD, 0 AS BGPPC, 0 AS PMBGC, 0 AS JEKGM, 
		</isEqual>
		<isNotEqual property="PAYCD" compareValue="M">
		A.PMKJM AS PMKJM, A.YCSUD AS YCSUD, A.BGPPC AS BGPPC, A.PMBGC AS PMBGC, A.JEKGM AS JEKGM, 
		</isNotEqual>
		B.MAYTT, B.RATEY, B.TTBTY, B.BJCNT,
		B.PAX3Y, B.CAX3Y,
		A.CNDAT,
		<isEqual property="PAYCD" compareValue="M">
		0 AS KDPYT,
		</isEqual>
		<isNotEqual property="PAYCD" compareValue="M">
		A.KDPYT AS KDPYT,
		</isNotEqual>
		A.DOSUD, A.FILL3,
		<isEqual property="PAYCD" compareValue="M">
		0 AS YUSUD, 0 AS GYPPC, 0 AS PMGYC, 0 AS KTA01, A.BGTTM AS GGTTM,
		</isEqual>
		<isNotEqual property="PAYCD" compareValue="M">
		A.YUSUD AS YUSUD, A.GYPPC AS GYPPC, A.PMGYC AS PMGYC, A.KTA01 AS KTA01, A.GGTTM AS GGTTM,
		</isNotEqual>
		B.CAYTT, B.SCSAY, B.BGPPY, B.BAX1Y, B.CHSGY,
		<isEqual property="PAYCD" compareValue="M">
		0 AS HOUGM, A.BRATE AS GBCDT, A.BPDAT AS BPDAT, A.BPRCT AS KNTDT, A.BTDAT AS BTDAT,
		</isEqual>
		<isNotEqual property="PAYCD" compareValue="M">
		 A.HOUGM AS HOUGM, A.GBCDT AS GBCDT, 0 AS BPDAT, A.KNTDT AS KNTDT, 0 AS BTDAT,
		</isNotEqual>
		A.GSSUD, A.JMSUD, A.OTSUD,
		<isEqual property="PAYCD" compareValue="M">
		0 AS EDUCM, A.BAMTT AS PAMTT, A.BSTTM AS SSTTM, 0 AS KTA03,
		</isEqual>
		<isNotEqual property="PAYCD" compareValue="M">
		A.EDUCM AS EDUCM, A.PAMTT AS PAMTT, A.SSTTM AS SSTTM, A.KTA03 AS KTA03,
		</isNotEqual>
		B.GSGJY, B.GSSGY, B.CMMYY, B.GYPPY, B.BAX3Y, B.TXRDY,

<!-- 겹치는 항목  A.GSGAY,  A.SDGJY,  A.KSPAY,  A.RATEY,  A.SCSAY, A.GSSGY, -->

<!-- 
A.TAX1G, A.CHUTM,  A.JCNTT, A.JTXMT, 
A.TX4TT, 
 -->
 
<!-- 
A.BYYYM, 	
A.KNYYM, A.SABUN, A.GRADE, A.HOBON, A.CNDCD, A.BYFL2, 
A.KIBON, A.GTSUD, A.HASUD, A.ANSUD, A.UCSUD,
 A.TAX1M, A.BAX1M,
A.CHUTM, A.DAEGM, A.EFCAC, A.HOURM, A.TDPTT, A.GSGAY, A.TAX1Y, A.LMTDP, A.TX4TT, A.SAX1Y, A.KORNM, A.QCOD3, A.FORCX, A.PMWCD, A.BUBCD, A.JKSUD, A.WHSUD, A.TQSUD, A.OVSUD, A.SLSUD,
A.TAX3M, A.BAX3M,
A.JCNTT, A.DAERM, A.LABOM, A.AMEMB, A.BDPTT, A.SDGJY, A.TAX1G, A.PJCNT, A.LABPY, A.SAX3Y, A.WFBCD, A.KYBCD, A.BYFL1, A.CHBCD, A.PTBCD, A.TRBCD, A.TESUD, A.CJSUD, A.FILL1, A.HKSUD,
A.PMKBM, A.BMKBM,
A.TAX4M, A.BAX4M,
A.PMTX4, A.CHJAM, A.SAWKM, A.GAYTT, A.KSPAY, A.TDPTY, A.LMTTB, A.PAX1Y, A.CAX1Y, A.GBCDT,
A.KNTDT, A.BRATE, A.BPDAT, A.BTDAT, A.BPRCT,
A.GSSUD, A.JMSUD, A.OTSUD, A.EDUCM,
A.PAMTT, A.BAMTT,
A.JTXMT, A.KTA03,
A.SSTTM, A.BSTTM,
A.GSGJY, A.GSSGY, A.CMMYY, A.GYPPY, A.BAX3Y, A.TXRDY,	
 -->
 	
		<!-- 
		SUBSTR(A.KNYYM,1,4)||'/'||SUBSTR(A.KNYYM,5,2)||(CASE WHEN A.PAYCD=9 THEN ' 생산직' ELSE ' 관리직' END) AS PAYNM,
		A.KNYYM, DIGITS(A.SABUN) AS SABUN, TRIM(A.KORNM) AS KORNM,
		A.CHRNM, A.JOGCD, A.DPTCD, A.DPSQN, A.LINCD, A.PASSA, A.PASSB, A.PASSC,
		A.PASSK, A.GNDAT, A.ENDAT, A.PEDTB, A.CNDCD, A.SEXCD, A.CNDAT, A.FORCD, A.AGEYY, A.AGEMM, A.MGRD1,
		A.MGRD2, A.MEDNO, A.GGRD1, A.GGRD2, A.GUKNO, A.BUCD1, A.DPTLN, A.RT002, A.RT004, A.RTFUP, A.RTGIT,
		A.RTBL1, A.RTBL2, A.WFBCD, A.KYBCD, A.CHBCD, A.PTBCD, A.TRBCD, A.PMWCD, A.BUBCD, A.SOSCD, A.BYFL1,
		A.BYFL2, A.CNTYY, A.CNTMM, A.GAMCD, A.GAMRT, A.PAYCD, A.PCDCD, A.TAXCD, A.LABCD, A.FUNCD, A.SUSCD,
		A.JIMCD, A.JICCD, A.HONIN, A.QCOD1, A.QCOD2, A.QCOD3, A.QCOD4, A.YSCDA, A.YSCDB, A.YSCDC, A.PSDTA,
		A.PCDAT, A.GRADE, A.HOBON, A.GUNHO, A.YNBCD, A.GYBON, A.CYBON, A.YENBO, A.YKGRD, A.GBGRD, A.YKRTE,
		A.MKBON, A.KIBON, A.EKBON, A.JKSUD, A.TESUD, A.QLSUD, A.BJSUD, A.GSSUD, A.WHSUD, A.CJSUD, A.JMSUD,
		A.WFSUD, A.YHSUD, A.DOSUD, A.GTSUD, A.HASUD, A.TQSUD, A.OTSUD, A.FILL1, A.FILL2, A.FILL3, A.FILL4,
		A.FILL5, A.LABOM, A.BNKCD, A.GJANB, A.BALCD, A.BSDAT, A.BEDAT, A.EDATE, A.ETIME, A.USRNM, A.DSPNM,
		A.BGPPC, A.GYPPC, A.GBCDT, A.GBCTT, A.JCCNT, A.HLCNT, A.MGCNT, A.KNTDT, A.CCTIM, A.OTTIM, A.OTCNT,
		A.ANTIM, A.ANCNT, A.HTTIM, A.HTCNT, A.YTTIM, A.YTCNT, A.ORTIM, A.ORCNT, A.F1TIM, A.F1CNT, A.F2TIM,
		A.F2CNT, A.JHTIM, A.JHCNT, A.JGTIM, A.JGCNT, A.JTTIM, A.JTCNT, A.OCTIM, A.OCCNT, A.GCTIM, A.GCCNT,
		A.F3TIM, A.F4CNT, A.UCCDT, A.UCCTT, A.YCCDT, A.YCCTT, A.SLCDT, A.SLCTT, A.IJCDT, A.IJCTT, A.BGCDT,
		A.BGCTT, A.GSCDT, A.GSCTT, A.F5CDT, A.F5CTT, A.MGCDT, A.MGCTT, A.UGCDT, A.UGCTT, A.HJCDT, A.HJCTT,
		A.JJCDT, A.JJCTT, A.SJCDT, A.SJCTT, A.HUCDT, A.HUCTT, A.F6CDT, A.F6CTT, A.EDCDT, A.EDCTT, A.CJCDT,
		A.CJCTT, A.HYCDT, A.HYCTT, A.F7CDT, A.F7CTT, A.NAYES, A.NAYER, A.CHJAM, A.PMKJM, A.PMKBM, A.PMGYC,
		A.PMTX4, A.PMBGC, A.KTA01, A.KTA02, A.KTA03, A.KTA04, A.KTA05, A.KTA06, A.KTA07, A.KTA08, A.KTA09,
		A.KTA10, A.KTA11, A.KTA12, A.KTA13, A.KTA14, A.KTA15, A.SAWKM, A.EDUCM, A.EFCAC, A.AMEMB, A.CMMPC,
		A.CMMSL, A.BLMON, A.JMON1, A.JEKGM, A.DAEGM, A.DAERM, A.HOUGM, A.HOURM, A.GFIL1, A.GFIL2, A.PTDAT,
		A.GYCHK, A.YCAFT, A.UCAFT, A.SLAFT, A.PRCG1, A.PRCG2, A.PRCG3, A.PAYG1, A.PAYG2, A.PAYG3, A.SPEMN,
		A.CMBSP, A.CMMYC, A.KDPYD, A.KDPYT, A.KIBYT, A.SLSUD, A.YCSUD, A.UCSUD, A.OVSUD, A.ANSUD, A.HKSUD,
		A.YUSUD, A.ORSUD, A.OVSGA, A.ANSGA, A.HKSGA, A.YUSGA, A.ORSGA, A.TDP01, A.TDP02, A.TDPTM, A.OVSBI,
		A.ANSBI, A.HKSBI, A.YUSBI, A.ORSBI, A.BDP01, A.BDP02, A.BDPTM, A.PAMTT, A.PAYTT, A.GSGJY, A.GSGAY,
		A.SDGJY, A.KSPAY, A.KSRAY, A.RATEY, A.SCSAY, A.SCSAM, A.GSSGM, A.TAX1M, A.TAX2M, A.TAX3M, A.TAX4M,
		A.CHU1M, A.CHU2M, A.CHU3M, A.JTX1M, A.JTX2M, A.JTX3M, A.JTX4M, A.JTX5M, A.JTX6M, A.JTX7M, A.GGTTM,
		A.SSTTM, A.PAYG4, A.PAYG5, A.PAYG6, A.ILHCO, A.SYDAT,
		
		B.ZYYYM, B.TYPEP, B.TDPTT, B.BDPTT, B.TDPTY, B.GSGTY, B.GSGTX, B.PAX1Y, B.PAX3Y, B.BGPPY, B.GYPPY,
		B.PAX4Y, B.LABPY, B.TTBTY, B.BAX1Y, B.BAX3Y, B.BAX4Y, B.SPENY, B.SPECY, B.SAX1Y, B.SAX3Y, B.SAX4Y,
		B.CMMYY, B.CAX1Y, B.CAX3Y, B.CAX4Y, B.ETFL1, B.ETFL2, B.ETFL3, B.LMTDP, B.LMTTB, B.PJCNT, B.BJCNT,
		B.GAYTT, B.MAYTT, B.CAYTT, B.TXRDY, B.GSSGY, B.CHSGY, B.SGF1Y, B.SGF2Y, B.SGF3Y, B.SGSGY, B.SGTTY,
		B.TAX1Y, B.TAX3Y, B.TAX1T, B.TAX3T, B.TAX1C, B.TAX3C,
		 -->
		B.TAX1T AS TAX1G, B.TAX3T AS TAX3G,
		<!-- 재형기금합  -->
		<isEqual property="PAYCD" compareValue="M">
		0 AS CHUTM,
		</isEqual>
		<isNotEqual property="PAYCD" compareValue="M">
		A.CHU1M+A.CHU2M+A.CHU3M AS CHUTM,
		</isNotEqual>
		<!-- 가족수당 = 배우자+자녀수당  -->
		A.WFSUD+A.YHSUD AS WYSUD,
		<!-- 복지수당 = 벽지+복지수당  -->
		A.BJSUD+A.FILL2 AS BFSUD,
		<!-- 재형저축 합   -->
		0 AS JCNTT,
		<!-- 기타공제 합   -->
		<isEqual property="PAYCD" compareValue="M">
		A.GAMT1+A.GAMT2+A.GAMT3 AS GTGTT,
		</isEqual>
		<isNotEqual property="PAYCD" compareValue="M">
		A.KTA08+A.KTA09+A.KTA10 AS GTGTT,
		</isNotEqual>
		<!-- 연말정산 환급액합 -->
		<isEqual property="PAYCD" compareValue="M">
		0 AS JTXMT,
		</isEqual>
		<isNotEqual property="PAYCD" compareValue="M">
		A.JTX1M+A.JTX2M+A.JTX3M+A.JTX4M AS JTXMT,
		</isNotEqual>
		<!-- 특상성과급에 실지급액만 표시 -->
		B.SPENY+B.SPECY AS SPETT,
		B.PAX4Y+B.BAX4Y+B.SAX4Y+B.CAX4Y AS TX4TT
	FROM
		<!--급여는 HPC100PF 상여는 HBM100PF -->
		$LIB3$.$TABLENM$ A
		LEFT OUTER JOIN $LIB3$.HZM100PF B ON A.SABUN=B.SABUN 
		<isEqual property="PAYCD" compareValue="M">
		AND A.BYYYM=B.ZYYYM
		</isEqual>
	WHERE
		A.DPTCD BETWEEN '0000' AND '9999'
		<isEqual property="PAYCD" compareValue="M">
			<isEqual prepend="AND" property="TYPECD" compareValue="C">
			A.PAYCD != 9
			</isEqual>
			<isEqual prepend="AND" property="TYPECD" compareValue="M">
			A.PAYCD = 9
			</isEqual>
		</isEqual>
	ORDER BY A.DPSQN, A.DPTCD ASC, SEXCD DESC, A.GNDAT, A.SABUN
	</select>

	<select id="selectHMDZ008Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		C.DPSQNO, A.DPTCDP, TRIM(C.DPDPNM) AS DPDPNM, DIGITS(A.SABUN) AS SABUN, TRIM(B.KORNM) AS KORNM, A.SEXCDP,
		A.GRADEP, A.PAYCDP, 
		CASE WHEN A.PAYCDP= 1 THEN '관리직' WHEN A.PAYCDP= 2 THEN '직장'
			 WHEN A.PAYCDP= 3 THEN '반장' WHEN A.PAYCDP= 4 THEN '노동조합'
			 WHEN A.PAYCDP= 9 THEN '기능직' ELSE '' END AS PAYNM,
		A.YNBCDP,
		CASE WHEN A.YNBCDP='1' THEN '연봉자' ELSE '월급자' END AS YNBNM,
		A.HOBONP, B.PASSA, B.AGEYY, B.AGEMM, B.GNDAT, B.CNTYY, B.CNTMM, A.KNYYM, A.PTYPE,
		CASE WHEN A.PTYPE ='P0' THEN '정기급여' WHEN A.PTYPE ='B0' THEN '정기상여' WHEN A.PTYPE ='BA' THEN '특별상여' 
		WHEN A.PTYPE ='P1' THEN '급여소급' WHEN A.PTYPE ='B1' THEN '상여소급' WHEN A.PTYPE ='CA' THEN '성과급' 
		WHEN A.PTYPE ='CB' THEN '성과급등'  WHEN A.PTYPE ='CC' THEN '성과급등' WHEN A.PTYPE ='P2' THEN '통상소급' ELSE '' END AS PTYPENM,
		A.YENBOP,
		A.KIBONP, A.JKSUDP, A.TESUDP, A.QLSUDP, A.BJSUDP, A.GSSUDP, A.WHSUDP, A.CJSUDP, A.JMSUDP, A.WFSUDP,
		A.YHSUDP, A.DOSUDP, A.GTSUDP, A.HASUDP, A.TQSUDP, A.OTSUDP, A.FILL1P, A.FILL2P, A.FILL3P, A.PMKJMP,
		A.PMKBMP, A.EDUCMP, A.SLSUDP, A.UCSUDP, A.YCSUDP, A.OTTIM, A.ANTIM, A.HTTIM, A.YTTIM, A.OVSUDP,
		A.ANSUDP, A.HKSUDP, A.YUSUDP, A.ORSUDP, A.PAMTTP, A.KDPYDP, A.KDPYTP, A.KIBYTP,
		A.TAX1MP, A.TAX3MP,
		(A.TAX4MP+A.PMTX4P) AS TAX4MP, (A.GYPPCP+A.PMGYCP) AS GYPPCP, (A.BGPPCP+A.PMBGCP) AS BGPPCP
	FROM
		$LIB3$.HPC200PF A
		LEFT OUTER JOIN $LIB2$.MST650PF C ON A.DPTCDP=C.DPCODE AND C.DPCOMP = #COMPS#,
		$LIB3$.HMD020PF B
	WHERE
		A.SABUN=B.SABUN 
		AND A.KNYYM BETWEEN $KNYYMF$ AND $KNYYMT$

		<isNotEmpty prepend="AND" property="PTYPE">
			A.PTYPE = #PTYPE#
		</isNotEmpty>
	ORDER BY A.KNYYM, A.PTYPE, C.DPSQNO, A.DPTCDP, A.GRADEP
	</select>
	<select id="selectHMDZ010Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		C.DPSQNO, A.DPTCDP, TRIM(C.DPDPNM) AS DPDPNM, DIGITS(A.SABUN) AS SABUN, TRIM(B.KORNM) AS KORNM, A.SEXCDP,
		A.GRADEP,
		CASE WHEN A.PAYCDP= 1 THEN '관리직' WHEN A.PAYCDP= 2 THEN '직장'
			 WHEN A.PAYCDP= 3 THEN '반장' WHEN A.PAYCDP= 4 THEN '노동조합'
			 WHEN A.PAYCDP= 9 THEN '기능직' ELSE '' END AS PAYNM,
		CASE WHEN A.YNBCDP='1' THEN '연봉자' ELSE '월급자' END AS YNBNM,
		A.HOBONP, B.PASSA, B.GNDAT, B.CNTYY, B.CNTMM, A.KNYYM, A.PTYPE,
		CASE WHEN A.PTYPE ='P0' THEN '정기급여' WHEN A.PTYPE ='B0' THEN '정기상여' WHEN A.PTYPE ='BA' THEN '특별상여' 
		WHEN A.PTYPE ='P1' THEN '급여소급' WHEN A.PTYPE ='B1' THEN '상여소급' WHEN A.PTYPE ='CA' THEN '성과급' 
		WHEN A.PTYPE ='CB' THEN '성과급등'  WHEN A.PTYPE ='CC' THEN '성과급등' WHEN A.PTYPE ='P2' THEN '통상소급' ELSE '' END AS PTYPENM,
		A.YENBOP,
		A.KIBONP, A.JKSUDP, A.TESUDP, A.QLSUDP, A.BJSUDP, A.GSSUDP, A.WHSUDP, A.CJSUDP, A.JMSUDP, A.WFSUDP,
		A.YHSUDP, A.DOSUDP, A.GTSUDP, A.HASUDP, A.TQSUDP, A.OTSUDP, A.FILL1P, A.FILL2P, A.FILL3P, A.PMKJMP,
		A.PMKBMP, A.EDUCMP, A.SLSUDP, A.UCSUDP, A.YCSUDP, A.OTTIM, A.ANTIM, A.HTTIM, A.YTTIM, A.OVSUDP,
		A.ANSUDP, A.HKSUDP, A.YUSUDP, A.ORSUDP, A.PAMTTP, A.KDPYDP, A.KDPYTP, A.KIBYTP,
		A.TAX1MP, A.TAX3MP,
		(A.TAX4MP+A.PMTX4P) AS TAX4MP, (A.GYPPCP+A.PMGYCP) AS GYPPCP, (A.BGPPCP+A.PMBGCP) AS BGPPCP
	FROM
		$LIB3$.HPC200PF A
		LEFT OUTER JOIN $LIB2$.MST650PF C ON A.DPTCDP=C.DPCODE AND C.DPCOMP = #COMPS#,
		$LIB3$.HMD020PF B
	WHERE
		A.SABUN=B.SABUN 
		AND SUBSTR(A.KNYYM,1,6)= $KNYYM$
		<isNotEmpty prepend="AND" property="PTYPE">
			A.PTYPE = #PTYPE#
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="YNBCD">
			A.YNBCDP = #YNBCD#
		</isNotEmpty>
	ORDER BY A.KNYYM, A.PTYPE, C.DPSQNO, A.DPTCDP, A.GRADEP
	</select>
	<select id="selectHPMZ100Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		DIGITS(A.SABUN) AS SABUN, A.YYEAR, A.GUBUN, A.YCCON, A.ILDAN, A.YYCHA, A.YYAMT,
		A.MIAMT, A.TAX1S, A.TAX3S, A.GOBOH, A.GYAMT, A.SYAMT, A.YCDAT,
		TRIM(B.KORNM) AS KORNM, B.SEXCD, B.GRADE, B.PAYCD, 
		CASE WHEN B.PAYCD= 1 THEN '관리직' WHEN B.PAYCD= 2 THEN '직장'
			 WHEN B.PAYCD= 3 THEN '반장' WHEN B.PAYCD= 4 THEN '노동조합'
			 WHEN B.PAYCD= 9 THEN '기능직' ELSE '' END AS PAYNM,
		B.YNBCD,
		CASE WHEN B.YNBCD='1' THEN '연봉자' ELSE '월급자' END AS YNBNM,
		B.PASSA, B.AGEYY, B.AGEMM, B.GNDAT, B.CNTYY, B.CNTMM,
		C.DPSQNO, B.DPTCD, TRIM(C.DPDPNM) AS DPDPNM, B.CNDCD
	FROM
		$LIB3$.HPM100PF A, $LIB3$.HMD020PF B
		LEFT OUTER JOIN $LIB2$.MST650PF C ON B.DPTCD=C.DPCODE AND C.DPCOMP=#COMPS#
	WHERE
		A.SABUN=B.SABUN
		AND A.YYEAR BETWEEN $YYEARF$ AND $YYEART$
		<isEqual prepend="AND" property="CNDCD" compareValue="1">
			B.CNDCD != 'R'
		</isEqual>	
	ORDER BY A.YYEAR, C.DPSQNO, B.DPTCD, B.GRADE, B.GNDAT, SABUN, B.CNDCD
	</select>
	<select id="selectHMDZ009Q_A" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
	
		B.DPTCD, TRIM(C.DPDPNM) AS DPDPNM, DIGITS(D.SABUN) AS SABUN, TRIM(B.KORNM) AS KORNM,
		DIGITS(B.YSCDA)||DIGITS(B.YSCDB)||DIGITS(B.YSCDC) AS YSCODE, B.SEXCD, 
		B.GNDAT, B.ENDAT, B.PEDTB,
		SUM(D.P11) AS P11, SUM(D.P12) AS P12, SUM(D.P13) AS P13, SUM(D.P14) AS P14, SUM(D.P15) AS P15, SUM(D.P16) AS P16, SUM(D.P17) AS P17,
		SUM(D.P21) AS P21, SUM(D.P22) AS P22, SUM(D.P23) AS P23, SUM(D.P24) AS P24, SUM(D.P25) AS P25, SUM(D.P26) AS P26, SUM(D.P27) AS P27, 
		SUM(D.P31) AS P31, SUM(D.P32) AS P32, SUM(D.P33) AS P33, SUM(D.P34) AS P34, SUM(D.P35) AS P35, SUM(D.P36) AS P36, SUM(D.P37) AS P37, 
		SUM(D.P41) AS P41, SUM(D.P42) AS P42, SUM(D.P43) AS P43, SUM(D.P44) AS P44, SUM(D.P45) AS P45, SUM(D.P46) AS P46, SUM(D.P47) AS P47, 
		SUM(D.P51) AS P51, SUM(D.P52) AS P52, SUM(D.P53) AS P53, SUM(D.P54) AS P54, SUM(D.P55) AS P55, SUM(D.P56) AS P56, SUM(D.P57) AS P57, 
		SUM(D.P61) AS P61, SUM(D.P62) AS P62, SUM(D.P63) AS P63, SUM(D.P64) AS P64, SUM(D.P65) AS P65, SUM(D.P66) AS P66, SUM(D.P67) AS P67, 
		SUM(D.P71) AS P71, SUM(D.P72) AS P72, SUM(D.P73) AS P73, SUM(D.P74) AS P74, SUM(D.P75) AS P75, SUM(D.P76) AS P76, SUM(D.P77) AS P77, 
		SUM(D.P81) AS P81, SUM(D.P82) AS P82, SUM(D.P83) AS P83, SUM(D.P84) AS P84, SUM(D.P85) AS P85, SUM(D.P86) AS P86, SUM(D.P87) AS P87, 
		SUM(D.P91) AS P91, SUM(D.P92) AS P92, SUM(D.P93) AS P93, SUM(D.P94) AS P94, SUM(D.P95) AS P95, SUM(D.P96) AS P96, SUM(D.P97) AS P97, 
		SUM(D.P101) AS P101, SUM(D.P102) AS P102, SUM(D.P103) AS P103, SUM(D.P104) AS P104, SUM(D.P105) AS P105, SUM(D.P106) AS P106, SUM(D.P107) AS P107, 
		SUM(D.P111) AS P111, SUM(D.P112) AS P112, SUM(D.P113) AS P113, SUM(D.P114) AS P114, SUM(D.P115) AS P115, SUM(D.P116) AS P116, SUM(D.P117) AS P117, 
		SUM(D.P121) AS P121, SUM(D.P122) AS P122, SUM(D.P123) AS P123, SUM(D.P124) AS P124, SUM(D.P125) AS P125, SUM(D.P126) AS P126, SUM(D.P127) AS P127, 
		SUM(D.B1) AS B1, SUM(D.B2) AS B2, SUM(D.B3) AS B3, SUM(D.B4) AS B4, SUM(D.B5) AS B5,
		SUM(D.B6) AS B6, SUM(D.B7) AS B7, SUM(D.B8) AS B8, SUM(D.B9) AS B9,
		SUM(D.Y1) AS Y1, SUM(D.Y2) AS Y2, SUM(D.Y3) AS Y3
	FROM (
		SELECT
			A.SABUN,
			<!-- M -->
			SUM(CASE WHEN A.KNYYM=$p_KNYYM1$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.KIBONP ELSE 0 END) AS P11,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM1$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.CJSUDP+A.GSSUDP+A.WFSUDP+
				A.YHSUDP+A.DOSUDP+A.TQSUDP+A.GTSUDP+A.QLSUDP+A.BJSUDP+A.WHSUDP+A.TESUDP+A.JMSUDP+A.JKSUDP+
				A.HASUDP+A.FILL3P+A.FILL1P+A.FILL2P ELSE 0 END) AS P12,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM1$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP+A.OVSUDP+A.ANSUDP+
				A.YUSUDP+A.HKSUDP+A.ORSUDP ELSE 0 END) AS P13,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM1$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS P14,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM1$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.SLSUDP+A.UCSUDP+A.YCSUDP ELSE 0 END) AS P15, 
			SUM(CASE WHEN A.KNYYM=$p_KNYYM1$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PMKJMP+A.PMKBMP ELSE 0 END) AS P16, 
			SUM(CASE WHEN A.KNYYM=$p_KNYYM1$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END) AS P17,
			<!-- M+1 -->
			SUM(CASE WHEN A.KNYYM=$p_KNYYM2$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.KIBONP ELSE 0 END) AS P21,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM2$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.CJSUDP+A.GSSUDP+A.WFSUDP+
				A.YHSUDP+A.DOSUDP+A.TQSUDP+A.GTSUDP+A.QLSUDP+A.BJSUDP+A.WHSUDP+A.TESUDP+A.JMSUDP+A.JKSUDP+
				A.HASUDP+A.FILL3P+A.FILL1P+A.FILL2P ELSE 0 END) AS P22,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM2$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP+A.OVSUDP+A.ANSUDP+
				A.YUSUDP+A.HKSUDP+A.ORSUDP ELSE 0 END) AS P23,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM2$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS P24,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM2$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.SLSUDP+A.UCSUDP+A.YCSUDP ELSE 0 END) AS P25, 
			SUM(CASE WHEN A.KNYYM=$p_KNYYM2$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PMKJMP+A.PMKBMP ELSE 0 END) AS P26, 
			SUM(CASE WHEN A.KNYYM=$p_KNYYM2$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END) AS P27,
			<!-- M+2 -->
			SUM(CASE WHEN A.KNYYM=$p_KNYYM3$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.KIBONP ELSE 0 END) AS P31,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM3$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.CJSUDP+A.GSSUDP+A.WFSUDP+
				A.YHSUDP+A.DOSUDP+A.TQSUDP+A.GTSUDP+A.QLSUDP+A.BJSUDP+A.WHSUDP+A.TESUDP+A.JMSUDP+A.JKSUDP+
				A.HASUDP+A.FILL3P+A.FILL1P+A.FILL2P ELSE 0 END) AS P32,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM3$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP+A.OVSUDP+A.ANSUDP+
				A.YUSUDP+A.HKSUDP+A.ORSUDP ELSE 0 END) AS P33,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM3$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS P34,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM3$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.SLSUDP+A.UCSUDP+A.YCSUDP ELSE 0 END) AS P35, 
			SUM(CASE WHEN A.KNYYM=$p_KNYYM3$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PMKJMP+A.PMKBMP ELSE 0 END) AS P36, 
			SUM(CASE WHEN A.KNYYM=$p_KNYYM3$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END) AS P37,
			<!-- M+3 -->
			SUM(CASE WHEN A.KNYYM=$p_KNYYM4$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.KIBONP ELSE 0 END) AS P41,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM4$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.CJSUDP+A.GSSUDP+A.WFSUDP+
				A.YHSUDP+A.DOSUDP+A.TQSUDP+A.GTSUDP+A.QLSUDP+A.BJSUDP+A.WHSUDP+A.TESUDP+A.JMSUDP+A.JKSUDP+
				A.HASUDP+A.FILL3P+A.FILL1P+A.FILL2P ELSE 0 END) AS P42,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM4$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP+A.OVSUDP+A.ANSUDP+
				A.YUSUDP+A.HKSUDP+A.ORSUDP ELSE 0 END) AS P43,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM4$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS P44,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM4$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.SLSUDP+A.UCSUDP+A.YCSUDP ELSE 0 END) AS P45, 
			SUM(CASE WHEN A.KNYYM=$p_KNYYM4$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PMKJMP+A.PMKBMP ELSE 0 END) AS P46, 
			SUM(CASE WHEN A.KNYYM=$p_KNYYM4$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END) AS P47,
			<!-- M+4 -->
			SUM(CASE WHEN A.KNYYM=$p_KNYYM5$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.KIBONP ELSE 0 END) AS P51,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM5$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.CJSUDP+A.GSSUDP+A.WFSUDP+
				A.YHSUDP+A.DOSUDP+A.TQSUDP+A.GTSUDP+A.QLSUDP+A.BJSUDP+A.WHSUDP+A.TESUDP+A.JMSUDP+A.JKSUDP+
				A.HASUDP+A.FILL3P+A.FILL1P+A.FILL2P ELSE 0 END) AS P52,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM5$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP+A.OVSUDP+A.ANSUDP+
				A.YUSUDP+A.HKSUDP+A.ORSUDP ELSE 0 END) AS P53,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM5$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS P54,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM5$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.SLSUDP+A.UCSUDP+A.YCSUDP ELSE 0 END) AS P55, 
			SUM(CASE WHEN A.KNYYM=$p_KNYYM5$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PMKJMP+A.PMKBMP ELSE 0 END) AS P56, 
			SUM(CASE WHEN A.KNYYM=$p_KNYYM5$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END) AS P57,
			<!-- M+5 -->
			SUM(CASE WHEN A.KNYYM=$p_KNYYM6$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.KIBONP ELSE 0 END) AS P61,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM6$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.CJSUDP+A.GSSUDP+A.WFSUDP+
				A.YHSUDP+A.DOSUDP+A.TQSUDP+A.GTSUDP+A.QLSUDP+A.BJSUDP+A.WHSUDP+A.TESUDP+A.JMSUDP+A.JKSUDP+
				A.HASUDP+A.FILL3P+A.FILL1P+A.FILL2P ELSE 0 END) AS P62,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM6$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP+A.OVSUDP+A.ANSUDP+
				A.YUSUDP+A.HKSUDP+A.ORSUDP ELSE 0 END) AS P63,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM6$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS P64,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM6$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.SLSUDP+A.UCSUDP+A.YCSUDP ELSE 0 END) AS P65, 
			SUM(CASE WHEN A.KNYYM=$p_KNYYM6$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PMKJMP+A.PMKBMP ELSE 0 END) AS P66, 
			SUM(CASE WHEN A.KNYYM=$p_KNYYM6$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END) AS P67,
			<!-- M+6 -->
			SUM(CASE WHEN A.KNYYM=$p_KNYYM7$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.KIBONP ELSE 0 END) AS P71,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM7$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.CJSUDP+A.GSSUDP+A.WFSUDP+
				A.YHSUDP+A.DOSUDP+A.TQSUDP+A.GTSUDP+A.QLSUDP+A.BJSUDP+A.WHSUDP+A.TESUDP+A.JMSUDP+A.JKSUDP+
				A.HASUDP+A.FILL3P+A.FILL1P+A.FILL2P ELSE 0 END) AS P72,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM7$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP+A.OVSUDP+A.ANSUDP+
				A.YUSUDP+A.HKSUDP+A.ORSUDP ELSE 0 END) AS P73,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM7$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS P74,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM7$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.SLSUDP+A.UCSUDP+A.YCSUDP ELSE 0 END) AS P75, 
			SUM(CASE WHEN A.KNYYM=$p_KNYYM7$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PMKJMP+A.PMKBMP ELSE 0 END) AS P76, 
			SUM(CASE WHEN A.KNYYM=$p_KNYYM7$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END) AS P77,
			<!-- M+7 -->
			SUM(CASE WHEN A.KNYYM=$p_KNYYM8$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.KIBONP ELSE 0 END) AS P81,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM8$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.CJSUDP+A.GSSUDP+A.WFSUDP+
				A.YHSUDP+A.DOSUDP+A.TQSUDP+A.GTSUDP+A.QLSUDP+A.BJSUDP+A.WHSUDP+A.TESUDP+A.JMSUDP+A.JKSUDP+
				A.HASUDP+A.FILL3P+A.FILL1P+A.FILL2P ELSE 0 END) AS P82,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM8$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP+A.OVSUDP+A.ANSUDP+
				A.YUSUDP+A.HKSUDP+A.ORSUDP ELSE 0 END) AS P83,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM8$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS P84,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM8$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.SLSUDP+A.UCSUDP+A.YCSUDP ELSE 0 END) AS P85, 
			SUM(CASE WHEN A.KNYYM=$p_KNYYM8$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PMKJMP+A.PMKBMP ELSE 0 END) AS P86, 
			SUM(CASE WHEN A.KNYYM=$p_KNYYM8$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END) AS P87,
			<!-- M+8 -->
			SUM(CASE WHEN A.KNYYM=$p_KNYYM9$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.KIBONP ELSE 0 END) AS P91,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM9$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.CJSUDP+A.GSSUDP+A.WFSUDP+
				A.YHSUDP+A.DOSUDP+A.TQSUDP+A.GTSUDP+A.QLSUDP+A.BJSUDP+A.WHSUDP+A.TESUDP+A.JMSUDP+A.JKSUDP+
				A.HASUDP+A.FILL3P+A.FILL1P+A.FILL2P ELSE 0 END) AS P92,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM9$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP+A.OVSUDP+A.ANSUDP+
				A.YUSUDP+A.HKSUDP+A.ORSUDP ELSE 0 END) AS P93,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM9$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS P94,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM9$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.SLSUDP+A.UCSUDP+A.YCSUDP ELSE 0 END) AS P95, 
			SUM(CASE WHEN A.KNYYM=$p_KNYYM9$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PMKJMP+A.PMKBMP ELSE 0 END) AS P96, 
			SUM(CASE WHEN A.KNYYM=$p_KNYYM9$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END) AS P97,
			<!-- M+9 -->
			SUM(CASE WHEN A.KNYYM=$p_KNYYM10$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.KIBONP ELSE 0 END) AS P101,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM10$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.CJSUDP+A.GSSUDP+A.WFSUDP+
				A.YHSUDP+A.DOSUDP+A.TQSUDP+A.GTSUDP+A.QLSUDP+A.BJSUDP+A.WHSUDP+A.TESUDP+A.JMSUDP+A.JKSUDP+
				A.HASUDP+A.FILL3P+A.FILL1P+A.FILL2P ELSE 0 END) AS P102,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM10$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP+A.OVSUDP+A.ANSUDP+
				A.YUSUDP+A.HKSUDP+A.ORSUDP ELSE 0 END) AS P103,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM10$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS P104,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM10$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.SLSUDP+A.UCSUDP+A.YCSUDP ELSE 0 END) AS P105, 
			SUM(CASE WHEN A.KNYYM=$p_KNYYM10$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PMKJMP+A.PMKBMP ELSE 0 END) AS P106, 
			SUM(CASE WHEN A.KNYYM=$p_KNYYM10$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END) AS P107,
			<!-- M+10 -->
			SUM(CASE WHEN A.KNYYM=$p_KNYYM11$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.KIBONP ELSE 0 END) AS P111,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM11$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.CJSUDP+A.GSSUDP+A.WFSUDP+
				A.YHSUDP+A.DOSUDP+A.TQSUDP+A.GTSUDP+A.QLSUDP+A.BJSUDP+A.WHSUDP+A.TESUDP+A.JMSUDP+A.JKSUDP+
				A.HASUDP+A.FILL3P+A.FILL1P+A.FILL2P ELSE 0 END) AS P112,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM11$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP+A.OVSUDP+A.ANSUDP+
				A.YUSUDP+A.HKSUDP+A.ORSUDP ELSE 0 END) AS P113,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM11$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS P114,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM11$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.SLSUDP+A.UCSUDP+A.YCSUDP ELSE 0 END) AS P115, 
			SUM(CASE WHEN A.KNYYM=$p_KNYYM11$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PMKJMP+A.PMKBMP ELSE 0 END) AS P116, 
			SUM(CASE WHEN A.KNYYM=$p_KNYYM11$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END) AS P117,
			<!-- M+11 -->
			SUM(CASE WHEN A.KNYYM=$p_KNYYM12$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.KIBONP ELSE 0 END) AS P121,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM12$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.CJSUDP+A.GSSUDP+A.WFSUDP+
				A.YHSUDP+A.DOSUDP+A.TQSUDP+A.GTSUDP+A.QLSUDP+A.BJSUDP+A.WHSUDP+A.TESUDP+A.JMSUDP+A.JKSUDP+
				A.HASUDP+A.FILL3P+A.FILL1P+A.FILL2P ELSE 0 END) AS P122,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM12$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP+A.OVSUDP+A.ANSUDP+
				A.YUSUDP+A.HKSUDP+A.ORSUDP ELSE 0 END) AS P123,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM12$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS P124,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM12$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.SLSUDP+A.UCSUDP+A.YCSUDP ELSE 0 END) AS P125, 
			SUM(CASE WHEN A.KNYYM=$p_KNYYM12$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PMKJMP+A.PMKBMP ELSE 0 END) AS P126, 
			SUM(CASE WHEN A.KNYYM=$p_KNYYM12$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END) AS P127,
		
			<!-- 상여 지급월 (변동가능)	 조회기간에 맞춰서 data 출력
			 01 02 04 06 07 08 09 10 12  -->	
			SUM(CASE WHEN A.KNYYM=$p_BYYMM1$ AND SUBSTR(A.PTYPE,1,1) = 'B' THEN A.PAMTTP ELSE 0 END) AS B1,
			SUM(CASE WHEN A.KNYYM=$p_BYYMM2$ AND SUBSTR(A.PTYPE,1,1) = 'B' THEN A.PAMTTP ELSE 0 END) AS B2,
			SUM(CASE WHEN A.KNYYM=$p_BYYMM3$ AND SUBSTR(A.PTYPE,1,1) = 'B' THEN A.PAMTTP ELSE 0 END) AS B3,
			SUM(CASE WHEN A.KNYYM=$p_BYYMM4$ AND SUBSTR(A.PTYPE,1,1) = 'B' THEN A.PAMTTP ELSE 0 END) AS B4,
			SUM(CASE WHEN A.KNYYM=$p_BYYMM5$ AND SUBSTR(A.PTYPE,1,1) = 'B' THEN A.PAMTTP ELSE 0 END) AS B5,
			SUM(CASE WHEN A.KNYYM=$p_BYYMM6$ AND SUBSTR(A.PTYPE,1,1) = 'B' THEN A.PAMTTP ELSE 0 END) AS B6,
			SUM(CASE WHEN A.KNYYM=$p_BYYMM7$ AND SUBSTR(A.PTYPE,1,1) = 'B' THEN A.PAMTTP ELSE 0 END) AS B7,
			SUM(CASE WHEN A.KNYYM=$p_BYYMM8$ AND SUBSTR(A.PTYPE,1,1) = 'B' THEN A.PAMTTP ELSE 0 END) AS B8,
			SUM(CASE WHEN A.KNYYM=$p_BYYMM9$ AND SUBSTR(A.PTYPE,1,1) = 'B' THEN A.PAMTTP ELSE 0 END) AS B9,
			0 AS Y1, 0 AS Y2, 0 AS Y3
		FROM
			$LIB3$.HPC200PF A
		WHERE
			A.KNYYM >= $p_KNYYM1$
			AND A.KNYYM <![CDATA[<=]]> $p_KNYYM12$
			AND A.PTYPE  NOT LIKE 'C%'
		GROUP BY A.SABUN
		
		UNION  ALL
		SELECT
			SABUN,
			0 AS P11, 0 AS P12, 0 AS P13, 0 AS P14, 0 AS P15, 0 AS P16, 0 AS P17, 
			0 AS P21, 0 AS P22, 0 AS P23, 0 AS P24, 0 AS P25, 0 AS P26, 0 AS P27, 
			0 AS P31, 0 AS P32, 0 AS P33, 0 AS P34, 0 AS P35, 0 AS P36, 0 AS P37, 
			0 AS P41, 0 AS P42, 0 AS P43, 0 AS P44, 0 AS P45, 0 AS P46, 0 AS P47, 
			0 AS P51, 0 AS P52, 0 AS P53, 0 AS P54, 0 AS P55, 0 AS P56, 0 AS P57, 
			0 AS P61, 0 AS P62, 0 AS P63, 0 AS P64, 0 AS P65, 0 AS P66, 0 AS P67, 
			0 AS P71, 0 AS P72, 0 AS P73, 0 AS P74, 0 AS P75, 0 AS P76, 0 AS P77, 
			0 AS P81, 0 AS P82, 0 AS P83, 0 AS P84, 0 AS P85, 0 AS P86, 0 AS P87, 
			0 AS P91, 0 AS P92, 0 AS P93, 0 AS P94, 0 AS P95, 0 AS P96, 0 AS P97, 
			0 AS P101, 0 AS P102, 0 AS P103, 0 AS P104, 0 AS P105, 0 AS P106, 0 AS P107, 
			0 AS P111, 0 AS P112, 0 AS P113, 0 AS P114, 0 AS P115, 0 AS P116, 0 AS P117, 
			0 AS P121, 0 AS P122, 0 AS P123, 0 AS P124, 0 AS P125, 0 AS P126, 0 AS P127, 
			0 AS B1, 0 AS B2, 0 AS B3, 0 AS B4, 0 AS B5, 0 AS B6, 0 AS B7, 0 AS B8,
			0 AS B9, ILDAN AS Y1, YYCHA AS Y2, YYAMT AS Y3
		FROM
			$LIB3$.HPM100PF
		WHERE
			YYEAR = $YYEAR$
			AND GUBUN = 'Y') D,
		$LIB3$.HMD020PF B LEFT OUTER JOIN $LIB2$.MST650PF C ON B.DPTCD = C.DPCODE AND C.DPCOMP = #COMPS#
	WHERE
		B.CNDAT = 0
		AND D.SABUN = B.SABUN
	GROUP BY B.DPTCD, C.DPDPNM, DIGITS(D.SABUN), B.KORNM, DIGITS(B.YSCDA)||DIGITS(B.YSCDB)||DIGITS(B.YSCDC), B.SEXCD, 
	         B.GNDAT, B.ENDAT, B.PEDTB
	ORDER BY B.DPTCD, SABUN

	</select>
	<select id="selectHMDZ009Q_B" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		B.DPTCD, TRIM(C.DPDPNM) AS DPDPNM, DIGITS(D.SABUN) AS SABUN, TRIM(B.KORNM) AS KORNM,
		DIGITS(B.YSCDA)||DIGITS(B.YSCDB)||DIGITS(B.YSCDC) AS YSCODE, B.SEXCD, B.GNDAT, B.ENDAT, B.PEDTB, D.DD1, D.DD2,
		<!-- M -->
		SUM(CASE WHEN A.KNYYM=$p_KNYYM1$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.KIBONP ELSE 0 END) AS P11,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM1$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.CJSUDP+A.GSSUDP+A.WFSUDP+
		         A.YHSUDP+A.DOSUDP+A.TQSUDP+A.GTSUDP+A.QLSUDP+A.BJSUDP+A.WHSUDP+A.TESUDP+A.JMSUDP+A.JKSUDP+
		         A.HASUDP+A.FILL3P+A.FILL1P+A.FILL2P ELSE 0 END) AS P12,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM1$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP+A.OVSUDP+A.ANSUDP+
		         A.YUSUDP+A.HKSUDP+A.ORSUDP ELSE 0 END) AS P13,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM1$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS P14,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM1$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.SLSUDP+A.UCSUDP+A.YCSUDP ELSE 0 END) AS P15, 
		SUM(CASE WHEN A.KNYYM=$p_KNYYM1$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PMKJMP+A.PMKBMP ELSE 0 END) AS P16, 
		SUM(CASE WHEN A.KNYYM=$p_KNYYM1$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END) AS P17,
		<!-- M+1 -->
		SUM(CASE WHEN A.KNYYM=$p_KNYYM2$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.KIBONP ELSE 0 END) AS P21,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM2$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.CJSUDP+A.GSSUDP+A.WFSUDP+
		         A.YHSUDP+A.DOSUDP+A.TQSUDP+A.GTSUDP+A.QLSUDP+A.BJSUDP+A.WHSUDP+A.TESUDP+A.JMSUDP+A.JKSUDP+
		         A.HASUDP+A.FILL3P+A.FILL1P+A.FILL2P ELSE 0 END) AS P22,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM2$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP+A.OVSUDP+A.ANSUDP+
		         A.YUSUDP+A.HKSUDP+A.ORSUDP ELSE 0 END) AS P23,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM2$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS P24,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM2$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.SLSUDP+A.UCSUDP+A.YCSUDP ELSE 0 END) AS P25, 
		SUM(CASE WHEN A.KNYYM=$p_KNYYM2$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PMKJMP+A.PMKBMP ELSE 0 END) AS P26, 
		SUM(CASE WHEN A.KNYYM=$p_KNYYM2$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END) AS P27,
		<!-- M+2 -->
		SUM(CASE WHEN A.KNYYM=$p_KNYYM3$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.KIBONP ELSE 0 END) AS P31,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM3$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.CJSUDP+A.GSSUDP+A.WFSUDP+
		         A.YHSUDP+A.DOSUDP+A.TQSUDP+A.GTSUDP+A.QLSUDP+A.BJSUDP+A.WHSUDP+A.TESUDP+A.JMSUDP+A.JKSUDP+
		         A.HASUDP+A.FILL3P+A.FILL1P+A.FILL2P ELSE 0 END) AS P32,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM3$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP+A.OVSUDP+A.ANSUDP+
		         A.YUSUDP+A.HKSUDP+A.ORSUDP ELSE 0 END) AS P33,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM3$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS P34,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM3$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.SLSUDP+A.UCSUDP+A.YCSUDP ELSE 0 END) AS P35, 
		SUM(CASE WHEN A.KNYYM=$p_KNYYM3$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PMKJMP+A.PMKBMP ELSE 0 END) AS P36, 
		SUM(CASE WHEN A.KNYYM=$p_KNYYM3$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END) AS P37,
		<!-- M+3 -->
		SUM(CASE WHEN A.KNYYM=$p_KNYYM4$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.KIBONP ELSE 0 END) AS P41,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM4$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.CJSUDP+A.GSSUDP+A.WFSUDP+
		         A.YHSUDP+A.DOSUDP+A.TQSUDP+A.GTSUDP+A.QLSUDP+A.BJSUDP+A.WHSUDP+A.TESUDP+A.JMSUDP+A.JKSUDP+
		         A.HASUDP+A.FILL3P+A.FILL1P+A.FILL2P ELSE 0 END) AS P42,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM4$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP+A.OVSUDP+A.ANSUDP+
		         A.YUSUDP+A.HKSUDP+A.ORSUDP ELSE 0 END) AS P43,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM4$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS P44,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM4$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.SLSUDP+A.UCSUDP+A.YCSUDP ELSE 0 END) AS P45, 
		SUM(CASE WHEN A.KNYYM=$p_KNYYM4$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PMKJMP+A.PMKBMP ELSE 0 END) AS P46, 
		SUM(CASE WHEN A.KNYYM=$p_KNYYM4$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END) AS P47,
		<!-- M+4 -->
		SUM(CASE WHEN A.KNYYM=$p_KNYYM5$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.KIBONP ELSE 0 END) AS P51,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM5$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.CJSUDP+A.GSSUDP+A.WFSUDP+
		         A.YHSUDP+A.DOSUDP+A.TQSUDP+A.GTSUDP+A.QLSUDP+A.BJSUDP+A.WHSUDP+A.TESUDP+A.JMSUDP+A.JKSUDP+
		         A.HASUDP+A.FILL3P+A.FILL1P+A.FILL2P ELSE 0 END) AS P52,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM5$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP+A.OVSUDP+A.ANSUDP+
		         A.YUSUDP+A.HKSUDP+A.ORSUDP ELSE 0 END) AS P53,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM5$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS P54,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM5$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.SLSUDP+A.UCSUDP+A.YCSUDP ELSE 0 END) AS P55, 
		SUM(CASE WHEN A.KNYYM=$p_KNYYM5$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PMKJMP+A.PMKBMP ELSE 0 END) AS P56, 
		SUM(CASE WHEN A.KNYYM=$p_KNYYM5$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END) AS P57,
		<!-- M+5 -->
		SUM(CASE WHEN A.KNYYM=$p_KNYYM6$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.KIBONP ELSE 0 END) AS P61,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM6$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.CJSUDP+A.GSSUDP+A.WFSUDP+
		         A.YHSUDP+A.DOSUDP+A.TQSUDP+A.GTSUDP+A.QLSUDP+A.BJSUDP+A.WHSUDP+A.TESUDP+A.JMSUDP+A.JKSUDP+
		         A.HASUDP+A.FILL3P+A.FILL1P+A.FILL2P ELSE 0 END) AS P62,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM6$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP+A.OVSUDP+A.ANSUDP+
		         A.YUSUDP+A.HKSUDP+A.ORSUDP ELSE 0 END) AS P63,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM6$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS P64,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM6$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.SLSUDP+A.UCSUDP+A.YCSUDP ELSE 0 END) AS P65, 
		SUM(CASE WHEN A.KNYYM=$p_KNYYM6$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PMKJMP+A.PMKBMP ELSE 0 END) AS P66, 
		SUM(CASE WHEN A.KNYYM=$p_KNYYM6$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END) AS P67,
		<!-- M+6 -->
		SUM(CASE WHEN A.KNYYM=$p_KNYYM7$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.KIBONP ELSE 0 END) AS P71,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM7$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.CJSUDP+A.GSSUDP+A.WFSUDP+
		         A.YHSUDP+A.DOSUDP+A.TQSUDP+A.GTSUDP+A.QLSUDP+A.BJSUDP+A.WHSUDP+A.TESUDP+A.JMSUDP+A.JKSUDP+
		         A.HASUDP+A.FILL3P+A.FILL1P+A.FILL2P ELSE 0 END) AS P72,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM7$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP+A.OVSUDP+A.ANSUDP+
		         A.YUSUDP+A.HKSUDP+A.ORSUDP ELSE 0 END) AS P73,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM7$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS P74,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM7$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.SLSUDP+A.UCSUDP+A.YCSUDP ELSE 0 END) AS P75, 
		SUM(CASE WHEN A.KNYYM=$p_KNYYM7$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PMKJMP+A.PMKBMP ELSE 0 END) AS P76,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM7$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END) AS P77,
		<!-- M+7 -->
		SUM(CASE WHEN A.KNYYM=$p_KNYYM8$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.KIBONP ELSE 0 END) AS P81,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM8$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.CJSUDP+A.GSSUDP+A.WFSUDP+
		         A.YHSUDP+A.DOSUDP+A.TQSUDP+A.GTSUDP+A.QLSUDP+A.BJSUDP+A.WHSUDP+A.TESUDP+A.JMSUDP+A.JKSUDP+
		         A.HASUDP+A.FILL3P+A.FILL1P+A.FILL2P ELSE 0 END) AS P82,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM8$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP+A.OVSUDP+A.ANSUDP+
		         A.YUSUDP+A.HKSUDP+A.ORSUDP ELSE 0 END) AS P83,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM8$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS P84,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM8$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.SLSUDP+A.UCSUDP+A.YCSUDP ELSE 0 END) AS P85, 
		SUM(CASE WHEN A.KNYYM=$p_KNYYM8$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PMKJMP+A.PMKBMP ELSE 0 END) AS P86, 
		SUM(CASE WHEN A.KNYYM=$p_KNYYM8$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END) AS P87,
		<!-- M+8 -->
		SUM(CASE WHEN A.KNYYM=$p_KNYYM9$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.KIBONP ELSE 0 END) AS P91,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM9$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.CJSUDP+A.GSSUDP+A.WFSUDP+
		         A.YHSUDP+A.DOSUDP+A.TQSUDP+A.GTSUDP+A.QLSUDP+A.BJSUDP+A.WHSUDP+A.TESUDP+A.JMSUDP+A.JKSUDP+
		         A.HASUDP+A.FILL3P+A.FILL1P+A.FILL2P ELSE 0 END) AS P92,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM9$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP+A.OVSUDP+A.ANSUDP+
		         A.YUSUDP+A.HKSUDP+A.ORSUDP ELSE 0 END) AS P93,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM9$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS P94,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM9$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.SLSUDP+A.UCSUDP+A.YCSUDP ELSE 0 END) AS P95, 
		SUM(CASE WHEN A.KNYYM=$p_KNYYM9$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PMKJMP+A.PMKBMP ELSE 0 END) AS P96, 
		SUM(CASE WHEN A.KNYYM=$p_KNYYM9$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END) AS P97,
		<!-- M+9 -->
		SUM(CASE WHEN A.KNYYM=$p_KNYYM10$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.KIBONP ELSE 0 END) AS P101,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM10$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.CJSUDP+A.GSSUDP+A.WFSUDP+
		         A.YHSUDP+A.DOSUDP+A.TQSUDP+A.GTSUDP+A.QLSUDP+A.BJSUDP+A.WHSUDP+A.TESUDP+A.JMSUDP+A.JKSUDP+
		         A.HASUDP+A.FILL3P+A.FILL1P+A.FILL2P ELSE 0 END) AS P102,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM10$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP+A.OVSUDP+A.ANSUDP+
		         A.YUSUDP+A.HKSUDP+A.ORSUDP ELSE 0 END) AS P103,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM10$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS P104,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM10$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.SLSUDP+A.UCSUDP+A.YCSUDP ELSE 0 END) AS P105, 
		SUM(CASE WHEN A.KNYYM=$p_KNYYM10$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PMKJMP+A.PMKBMP ELSE 0 END) AS P106,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM10$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END) AS P107,
		<!-- M+10 -->
		SUM(CASE WHEN A.KNYYM=$p_KNYYM11$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.KIBONP ELSE 0 END) AS P111,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM11$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.CJSUDP+A.GSSUDP+A.WFSUDP+
		         A.YHSUDP+A.DOSUDP+A.TQSUDP+A.GTSUDP+A.QLSUDP+A.BJSUDP+A.WHSUDP+A.TESUDP+A.JMSUDP+A.JKSUDP+
		         A.HASUDP+A.FILL3P+A.FILL1P+A.FILL2P ELSE 0 END) AS P112,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM11$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP+A.OVSUDP+A.ANSUDP+
		         A.YUSUDP+A.HKSUDP+A.ORSUDP ELSE 0 END) AS P113,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM11$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS P114,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM11$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.SLSUDP+A.UCSUDP+A.YCSUDP ELSE 0 END) AS P115, 
		SUM(CASE WHEN A.KNYYM=$p_KNYYM11$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PMKJMP+A.PMKBMP ELSE 0 END) AS P116, 
		SUM(CASE WHEN A.KNYYM=$p_KNYYM11$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END) AS P117,
		<!-- M+11 -->
		SUM(CASE WHEN A.KNYYM=$p_KNYYM12$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.KIBONP ELSE 0 END) AS P121,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM12$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN  A.CJSUDP+A.GSSUDP+A.WFSUDP+
		         A.YHSUDP+A.DOSUDP+A.TQSUDP+A.GTSUDP+A.QLSUDP+A.BJSUDP+A.WHSUDP+A.TESUDP+A.JMSUDP+A.JKSUDP+
		         A.HASUDP+A.FILL3P+A.FILL1P+A.FILL2P ELSE 0 END) AS P122,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM12$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.OTSUDP+A.OVSUDP+A.ANSUDP+
		         A.YUSUDP+A.HKSUDP+A.ORSUDP ELSE 0 END) AS P123,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM12$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS P124,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM12$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.SLSUDP+A.UCSUDP+A.YCSUDP ELSE 0 END) AS P125, 
		SUM(CASE WHEN A.KNYYM=$p_KNYYM12$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PMKJMP+A.PMKBMP ELSE 0 END) AS P126,
		SUM(CASE WHEN A.KNYYM=$p_KNYYM12$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.PAMTTP ELSE 0 END) AS P127
	FROM
		$LIB3$.HPC200PF A, $LIB3$.HMD020PF B, $LIB2$.MST650PF C,
		(SELECT  SABUN,MIN(KNDAT) AS DD1,MAX(KNDAT) AS DD2 FROM $LIB3$.HWD010PF 
			WHERE INT(KNDAT/100)>=$p_KNYYM1$ AND KNTCD=20 GROUP BY SABUN) D
	WHERE
	A.KNYYM >= $p_KNYYM1$
	AND A.KNYYM <![CDATA[<=]]> $p_KNYYM12$
	AND A.PTYPE  LIKE 'P%'
	AND A.SABUN = B.SABUN
	AND B.DPTCD = C.DPCODE
	AND C.DPCOMP = #COMPS#
	AND A.SABUN = D.SABUN
	GROUP BY B.DPTCD, C.DPDPNM, DIGITS(D.SABUN), B.KORNM, DIGITS(B.YSCDA)||DIGITS(B.YSCDB)||DIGITS(B.YSCDC), B.SEXCD,
	         B.GNDAT, B.ENDAT, B.PEDTB, D.DD1, D.DD2
	</select>
	
	<select id="selectHMDZ100Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		'$COMPS$' AS COMPS,
		C.DPSQNO, A.DPTCD, TRIM(C.DPDPNM) AS DPDPNM,
		A.GRADE, TRIM(COALESCE(B.PCONT,' ')) AS GRANM, DIGITS(A.SABUN) AS SABUN, TRIM(A.KORNM) AS KORNM, A.GRADE, A.HOBON, A.GNDAT,
		A.CNDAT, A.KIBON,
		A.JKSUD, A.QLSUD, A.GSSUD, A.CJSUD, A.WFSUD,
		A.DOSUD, A.OTSUD, A.TESUD, A.BJSUD, A.WHSUD, A.JMSUD, A.YHSUD,
		A.GTSUD, A.HASUD, A.TQSUD, A.FILL1, A.FILL3,
		<isEqual property="GUBCD" compareValue="0">
		(A.JKSUD + A.QLSUD + A.GSSUD + A.CJSUD + A.WFSUD + A.DOSUD + A.OTSUD + A.TESUD + A.BJSUD +
		A.WHSUD + A.JMSUD + A.YHSUD + A.GTSUD + A.HASUD + A.TQSUD + A.FILL1 + A.FILL3) AS SUB,
		(A.JKSUD + A.QLSUD + A.GSSUD + A.CJSUD + A.WFSUD + A.DOSUD + A.OTSUD + A.TESUD + A.BJSUD +
		A.WHSUD + A.JMSUD + A.YHSUD + A.GTSUD + A.HASUD + A.TQSUD + A.FILL1 + A.FILL3 + 
			<isEqual property="PAYCD" compareValue="0">
			(CASE WHEN A.YNBCD='1' THEN A.MKBON ELSE A.KIBON END)
			</isEqual>
			<isEqual property="PAYCD" compareValue="1">
			(CASE WHEN A.PAYCD='9' THEN (CASE WHEN A.YNBCD='1' THEN A.MKBON ELSE A.KIBON END)/30
			ELSE (CASE WHEN A.YNBCD='1' THEN A.MKBON ELSE A.KIBON END) END)
			</isEqual>
		) AS TOT,
		</isEqual>	
		<isEqual property="GUBCD" compareValue="1">
		<!-- 통상금인 경우 OT(A.OTSUD)랑 파트장수당(A.FILL3)제외 -->
		(A.JKSUD + A.QLSUD + A.GSSUD + A.CJSUD + A.WFSUD + A.DOSUD + A.TESUD + A.BJSUD +
		A.WHSUD + A.JMSUD + A.YHSUD + A.GTSUD + A.HASUD + A.TQSUD + A.FILL1) AS SUB,
		(A.JKSUD + A.QLSUD + A.GSSUD + A.CJSUD + A.WFSUD + A.DOSUD + A.TESUD + A.BJSUD +
		A.WHSUD + A.JMSUD + A.YHSUD + A.GTSUD + A.HASUD + A.TQSUD + A.FILL1 + 
			<isEqual property="PAYCD" compareValue="0">
			(CASE WHEN A.YNBCD='1' THEN A.MKBON ELSE A.KIBON END)
			</isEqual>
			<isEqual property="PAYCD" compareValue="1">
			(CASE WHEN A.PAYCD='9' THEN (CASE WHEN A.YNBCD='1' THEN A.MKBON ELSE A.KIBON END)/30
			ELSE (CASE WHEN A.YNBCD='1' THEN A.MKBON ELSE A.KIBON END) END)
			</isEqual>
		) AS TOT,	
		</isEqual>	
		
		A.MKBON,
		A.PAYCD, A.SEXCD, A.ENDAT, A.YNBCD
	FROM
		$LIB3$.HMD020PF A
		LEFT OUTER JOIN $LIB3$.HUM010PF B ON 'ODCD' || A.GRADE = B.PCODE
		LEFT OUTER JOIN $LIB2$.MST650PF C ON A.DPTCD = C.DPCODE AND C.DPCOMP = #COMPS#
	WHERE
		A.PAYCD BETWEEN #PAYCDF# AND #PAYCDT#
		AND A.JOGCD BETWEEN #JOGCDF# AND #JOGCDT#
		AND A.DPTCD BETWEEN #DPTCDF# AND #DPTCDT#
		AND A.GRADE BETWEEN #GRADEF# AND #GRADET#
		AND A.GNDAT BETWEEN #GNDATF# AND #GNDATT#
	<isEqual prepend="AND" property="CNDCD" compareValue="0">
		A.CNDCD != 'R'
	</isEqual>	
	ORDER BY A.GRADE, A.SEXCD, A.ENDAT, A.SABUN
	</select>
	<select id="selectHBMZ101Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		'$COMPS$' AS COMPS,
	<isEqual property="GUBCD" compareValue="0"> 
		<!--정기상여  -->
		A.BNKCD AS BNKCD, TRIM(COALESCE(C.CAPNM,' ')) AS CAPNM, A.DPTCD, TRIM(B.DPDPNM) AS DPDPNM,
		DIGITS(A.SABUN) AS SABUN, TRIM(A.KORNM) AS KORNM, TRIM(A.CNDCD) AS CNDCD, A.BSTTM AS BSTTM, TRIM(COALESCE(A.GJANB,' ')) AS GJANB, A.GNDAT
	FROM
		$LIB3$.HBM100PF A
		LEFT OUTER JOIN (SELECT * FROM $LIB2$.MST600PF) C ON DIGITS(A.BNKCD) = C.VNDOR,
		$LIB2$.MST650PF B
	</isEqual>
	<isEqual property="GUBCD" compareValue="1">
		<!--특별상여  -->
		TRIM(COALESCE(E.BNKCD2, A.BNKCD,' ')) AS BNKCD, TRIM(COALESCE(F.CAPNM,C.CAPNM)) AS CAPNM, A.DPTCD, TRIM(B.DPDPNM) AS DPDPNM,
		DIGITS(A.SABUN) AS SABUN, TRIM(A.KORNM) AS KORNM, TRIM(A.CNDCD) AS CNDCD, D.SPEMN AS BSTTM, TRIM(COALESCE(E.GJANB2, A.GJANB,' ')) AS GJANB, A.GNDAT
	FROM
		$LIB3$.HMD020PF A
		LEFT OUTER JOIN (SELECT * FROM $LIB2$.MST600PF) C ON DIGITS(A.BNKCD) = C.VNDOR,
		$LIB2$.MST650PF B, $LIB3$.HBS051PF D
		LEFT OUTER JOIN $LIB3$.HMD010PF E ON A.SABUN=E.SABUN
		LEFT OUTER JOIN (SELECT * FROM $LIB2$.MST600PF) F ON DIGITS(E.BNKCD2) = F.VNDOR
	</isEqual>
	<isEqual property="GUBCD" compareValue="2">
		<!--년차  -->
		TRIM(COALESCE(E.BNKCD2, A.BNKCD,' ')) AS BNKCD, TRIM(COALESCE(F.CAPNM,C.CAPNM)) AS CAPNM, A.DPTCD, TRIM(B.DPDPNM) AS DPDPNM,
		DIGITS(A.SABUN) AS SABUN, TRIM(A.KORNM) AS KORNM, TRIM(A.CNDCD) AS CNDCD, D.SYAMT AS BSTTM, TRIM(COALESCE(E.GJANB2, A.GJANB,' ')) AS GJANB, A.GNDAT
	FROM
		$LIB3$.HMD020PF A
		LEFT OUTER JOIN (SELECT * FROM $LIB2$.MST600PF) C ON DIGITS(A.BNKCD) = C.VNDOR,
		$LIB2$.MST650PF B, $LIB3$.HPM061PF D
		LEFT OUTER JOIN $LIB3$.HMD010PF E ON A.SABUN=E.SABUN
		LEFT OUTER JOIN (SELECT * FROM $LIB2$.MST600PF) F ON DIGITS(E.BNKCD2) = F.VNDOR
	</isEqual>
	WHERE
		A.PAYCD BETWEEN #PAYCDF# AND #PAYCDT#
		AND A.JOGCD BETWEEN #JOGCDF# AND #JOGCDT#
		AND A.DPTCD BETWEEN #DPTCDF# AND #DPTCDT#
		<isEqual prepend="AND" property="BNKCD" compareValue="1">
		A.BNKCD != 0
		</isEqual>	
		<isEqual prepend="AND" property="BNKCD" compareValue="2">
		A.BNKCD = 0
		</isEqual>	
		AND A.DPTCD = B.DPCODE
		AND B.DPCOMP = #COMPS#
		<isNotEqual prepend="AND" property="GUBCD" compareValue="0">
		A.SABUN=D.SABUN
		</isNotEqual>
	ORDER BY BNKCD, A.DPTCD, A.GNDAT, SABUN
	</select>
	<select id="selectHAYZ092Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	<!--  2017.03.06 수정 - 국외근로소득을 전근무지로 변환
	SELECT
		TRIM(B.MEDNO) AS MEDNO, SUBSTR(DIGITS(B.PASSA),3,6) || '-' || DIGITS(B.PASSB) || DIGITS(B.PASSC) AS JUNO,
		A.ZZ020, A.ZY002, A.ZZ003, A.ZZ004, A.ZY004, A.ZZ020+A.ZY002 AS TOTAL,
		B.SABUN, TRIM(B.KORNM) AS KORNM, B.GNDAT, B.ENDAT, B.CNDAT, B.DPTCD, TRIM(C.DPCONM) AS DPCONM, C.DPSQNO,
		CASE WHEN SUBSTR(B.GNDAT,1,4) <![CDATA[<=]]> $PTJYM$ THEN '12' ELSE 12-INT(SUBSTR(B.GNDAT,5,2))+1 END AS WRK_MON
	FROM
		$LIB3$.HAY081PF A, $LIB3$.HMD020PF B, $LIB2$.MST650PF C
	WHERE
		A.SABUN=B.SABUN AND B.DPTCD=C.DPCODE AND C.DPCOMP=#COMPS#
		AND B.CNDCD !='R'
	ORDER BY DPSQNO
	-->
	SELECT
		TRIM(B.MEDNO) AS MEDNO, SUBSTR(DIGITS(B.PASSA),3,6) || '-' || DIGITS(B.PASSB) || DIGITS(B.PASSC) AS JUNO,
		A.ZZ020, A.ZY002, A.ZZ003, A.ZZ004, A.ZY004, A.ZZ020+A.ZY002 AS TOTAL,
		B.SABUN, TRIM(B.KORNM) AS KORNM, B.GNDAT, B.ENDAT, B.CNDAT, B.DPTCD, TRIM(C.DPCONM) AS DPCONM, C.DPSQNO,
		CASE WHEN SUBSTR(B.GNDAT,1,4) <![CDATA[<=]]> $PTJYM$ THEN '12' ELSE 12-INT(SUBSTR(B.GNDAT,5,2))+1 END AS WRK_MON,
		D.RGB11
	FROM
		$LIB3$.HAY081PF A
		LEFT OUTER JOIN $LIB3$.HAY011PF D ON A.SABUN=D.SABUN,
		$LIB3$.HMD020PF B, $LIB2$.MST650PF C
	WHERE
		A.SABUN=B.SABUN AND B.DPTCD=C.DPCODE AND C.DPCOMP=#COMPS#
		AND B.CNDCD !='R'
	ORDER BY DPSQNO
	</select>
	<select id="selectHAYZ093Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">	
	SELECT
		C.DPSQNO, A.DPTCD, TRIM(C.DPCONM) AS DPCONM, DIGITS(A.SABUN) AS SABUN, TRIM(A.KORNM) AS KORNM,
		A.SEXCD, A.PAYCD, A.YNBCD, A.GRADE, A.GNDAT, A.PASSA,
		CASE WHEN A.PAYCD= 1 THEN '관리직' WHEN A.PAYCD= 2 THEN '직장'
			 WHEN A.PAYCD= 3 THEN '반장' WHEN A.PAYCD= 4 THEN '노동조합'
			 WHEN A.PAYCD= 9 THEN '기능직' ELSE '' END AS PAYNM,
		CASE WHEN A.YNBCD='1' THEN '연봉자' ELSE '월급자' END AS YNBNM,
		A.ENDAT, A.PEDTB,
		
		D.YYAMT,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.KIBONP ELSE 0 END) AS KIBONP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.JKSUDP ELSE 0 END) AS JKSUDP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.TESUDP ELSE 0 END) AS TESUDP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.QLSUDP ELSE 0 END) AS QLSUDP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.BJSUDP ELSE 0 END) AS BJSUDP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.GSSUDP ELSE 0 END) AS GSSUDP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.WHSUDP ELSE 0 END) AS WHSUDP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.CJSUDP ELSE 0 END) AS CJSUDP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.JMSUDP ELSE 0 END) AS JMSUDP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.WFSUDP ELSE 0 END) AS WFSUDP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.YHSUDP ELSE 0 END) AS YHSUDP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.DOSUDP ELSE 0 END) AS DOSUDP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.GTSUDP ELSE 0 END) AS GTSUDP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.HASUDP ELSE 0 END) AS HASUDP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.TQSUDP ELSE 0 END) AS TQSUDP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.OTSUDP ELSE 0 END) AS OTSUDP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.FILL1P ELSE 0 END) AS FILL1P,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.FILL2P ELSE 0 END) AS FILL2P,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.FILL3P ELSE 0 END) AS FILL3P,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.PMKJMP ELSE 0 END) AS PMKJMP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.PMKBMP ELSE 0 END) AS PMKBMP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.EDUCMP ELSE 0 END) AS EDUCMP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.SLSUDP ELSE 0 END) AS SLSUDP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.UCSUDP ELSE 0 END) AS UCSUDP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.YCSUDP ELSE 0 END) AS YCSUDP,
		
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.OTTIM ELSE 0 END) AS OTTIM,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.ANTIM ELSE 0 END) AS ANTIM,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.HTTIM ELSE 0 END) AS HTTIM,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.YTTIM ELSE 0 END) AS YTTIM,
		
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.OVSUDP ELSE 0 END) AS OVSUDP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.ANSUDP ELSE 0 END) AS ANSUDP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.HKSUDP ELSE 0 END) AS HKSUDP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.YUSUDP ELSE 0 END) AS YUSUDP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.ORSUDP ELSE 0 END) AS ORSUDP,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' THEN B.PAMTTP ELSE 0 END) AS PAMTTP,
		
		SUM(CASE WHEN B.PTYPE>='B0' AND B.PTYPE <![CDATA[<=]]> 'B9' THEN B.PAMTTP ELSE 0 END) AS BTOT,
		SUM(CASE WHEN B.PTYPE>='BA' AND B.PTYPE <![CDATA[<=]]> 'BZ' THEN B.PAMTTP ELSE 0 END) AS SBTOT,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='C' THEN B.PAMTTP ELSE 0 END) AS SSBTOT
	FROM
		$LIB3$.HMD020PF A LEFT OUTER JOIN $LIB3$.HPM100PF D ON A.SABUN=D.SABUN AND D.YYEAR=$YYEAR$,
		$LIB3$.HPC200PF B, $LIB2$.MST650PF C
	WHERE
		A.SABUN=B.SABUN AND A.DPTCD=C.DPCODE
		AND B.KNYYM>=$KNYYMF$ AND B.KNYYM <![CDATA[<=]]> $KNYYMT$
		AND A.CNDCD <![CDATA[<>]]> 'R'
		AND C.DPCOMP=#COMPS#
	GROUP BY C.DPSQNO, A.DPTCD, C.DPCONM, A.SABUN, A.KORNM, A.SEXCD, A.PAYCD, A.YNBCD, A.GRADE, A.GNDAT, A.PASSA, 
			CASE WHEN A.PAYCD= 1 THEN '관리직' WHEN A.PAYCD= 2 THEN '직장'
			 WHEN A.PAYCD= 3 THEN '반장' WHEN A.PAYCD= 4 THEN '노동조합'
			 WHEN A.PAYCD= 9 THEN '기능직' ELSE '' END,
			CASE WHEN A.YNBCD='1' THEN '연봉자' ELSE '월급자' END,	 A.ENDAT, A.PEDTB, D.YYAMT
	ORDER BY C.DPSQNO, A.DPTCD, A.GRADE, A.GNDAT, SABUN
	</select>
	
	<select id="selectHAYZ095Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">	
	SELECT
		C.DPSQNO, A.DPTCD, TRIM(C.DPCONM) AS DPCONM, DIGITS(A.SABUN) AS SABUN, TRIM(A.KORNM) AS KORNM,
		A.SEXCD, A.PAYCD, A.YNBCD, A.GRADE, A.GNDAT, A.PASSA,
		CASE WHEN A.PAYCD= 1 THEN '관리직' WHEN A.PAYCD= 2 THEN '직장'
			 WHEN A.PAYCD= 3 THEN '반장' WHEN A.PAYCD= 4 THEN '노동조합'
			 WHEN A.PAYCD= 9 THEN '기능직' ELSE '' END AS PAYNM,
		CASE WHEN A.YNBCD='1' THEN '연봉자' ELSE '월급자' END AS YNBNM,
		A.ENDAT, A.PEDTB,
		B.ZZ001, B.ZZ002, B.ZZ001+B.ZZ002 AS TOT
	FROM
		$LIB3$.HMD020PF A, $LIB3$.HAY200PF B, $LIB2$.MST650PF C
	WHERE
		A.SABUN=B.SABUN
		AND A.DPTCD=C.DPCODE
		AND A.CNDCD <![CDATA[<>]]> 'R'
		AND B.PTJYM = $PTJYM$
		AND C.DPCOMP=#COMPS#
	ORDER BY C.DPSQNO, A.DPTCD, A.GRADE, A.GNDAT, SABUN
	</select>
	<select id="selectHAYZ096Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">	
	SELECT
		C.DPSQNO, A.DPTCD, TRIM(C.DPCONM) AS DPCONM, DIGITS(A.SABUN) AS SABUN, TRIM(A.KORNM) AS KORNM,
		A.SEXCD, A.PAYCD, A.YNBCD, A.GRADE, A.GNDAT, A.PASSA,
		CASE WHEN A.PAYCD= 1 THEN '관리직' WHEN A.PAYCD= 2 THEN '직장'
			 WHEN A.PAYCD= 3 THEN '반장' WHEN A.PAYCD= 4 THEN '노동조합'
			 WHEN A.PAYCD= 9 THEN '기능직' ELSE '' END AS PAYNM,
		CASE WHEN A.YNBCD='1' THEN '연봉자' ELSE '월급자' END AS YNBNM,
		A.ENDAT, A.PEDTB,
		
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM1$ THEN B.OTTIM ELSE 0 END) AS OTTIM01,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM1$ THEN B.ANTIM ELSE 0 END) AS ANTIM01,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM1$ THEN B.HTTIM ELSE 0 END) AS HTTIM01,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM1$ THEN B.YTTIM ELSE 0 END) AS YTTIM01,

		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM2$ THEN B.OTTIM ELSE 0 END) AS OTTIM02,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM2$ THEN B.ANTIM ELSE 0 END) AS ANTIM02,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM2$ THEN B.HTTIM ELSE 0 END) AS HTTIM02,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM2$ THEN B.YTTIM ELSE 0 END) AS YTTIM02,
		
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM3$ THEN B.OTTIM ELSE 0 END) AS OTTIM03,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM3$ THEN B.ANTIM ELSE 0 END) AS ANTIM03,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM3$ THEN B.HTTIM ELSE 0 END) AS HTTIM03,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM3$ THEN B.YTTIM ELSE 0 END) AS YTTIM03,

		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM4$ THEN B.OTTIM ELSE 0 END) AS OTTIM04,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM4$ THEN B.ANTIM ELSE 0 END) AS ANTIM04,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM4$ THEN B.HTTIM ELSE 0 END) AS HTTIM04,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM4$ THEN B.YTTIM ELSE 0 END) AS YTTIM04,		

		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM5$ THEN B.OTTIM ELSE 0 END) AS OTTIM05,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM5$ THEN B.ANTIM ELSE 0 END) AS ANTIM05,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM5$ THEN B.HTTIM ELSE 0 END) AS HTTIM05,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM5$ THEN B.YTTIM ELSE 0 END) AS YTTIM05,

		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM6$ THEN B.OTTIM ELSE 0 END) AS OTTIM06,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM6$ THEN B.ANTIM ELSE 0 END) AS ANTIM06,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM6$ THEN B.HTTIM ELSE 0 END) AS HTTIM06,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM6$ THEN B.YTTIM ELSE 0 END) AS YTTIM06,

		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM7$ THEN B.OTTIM ELSE 0 END) AS OTTIM07,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM7$ THEN B.ANTIM ELSE 0 END) AS ANTIM07,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM7$ THEN B.HTTIM ELSE 0 END) AS HTTIM07,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM7$ THEN B.YTTIM ELSE 0 END) AS YTTIM07,

		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM8$ THEN B.OTTIM ELSE 0 END) AS OTTIM08,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM8$ THEN B.ANTIM ELSE 0 END) AS ANTIM08,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM8$ THEN B.HTTIM ELSE 0 END) AS HTTIM08,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM8$ THEN B.YTTIM ELSE 0 END) AS YTTIM08,

		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM9$ THEN B.OTTIM ELSE 0 END) AS OTTIM09,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM9$ THEN B.ANTIM ELSE 0 END) AS ANTIM09,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM9$ THEN B.HTTIM ELSE 0 END) AS HTTIM09,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM9$ THEN B.YTTIM ELSE 0 END) AS YTTIM09,

		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM10$ THEN B.OTTIM ELSE 0 END) AS OTTIM10,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM10$ THEN B.ANTIM ELSE 0 END) AS ANTIM10,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM10$ THEN B.HTTIM ELSE 0 END) AS HTTIM10,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM10$ THEN B.YTTIM ELSE 0 END) AS YTTIM10,

		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM11$ THEN B.OTTIM ELSE 0 END) AS OTTIM11,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM11$ THEN B.ANTIM ELSE 0 END) AS ANTIM11,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM11$ THEN B.HTTIM ELSE 0 END) AS HTTIM11,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM11$ THEN B.YTTIM ELSE 0 END) AS YTTIM11,

		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM12$ THEN B.OTTIM ELSE 0 END) AS OTTIM12,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM12$ THEN B.ANTIM ELSE 0 END) AS ANTIM12,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM12$ THEN B.HTTIM ELSE 0 END) AS HTTIM12,
		SUM(CASE WHEN SUBSTR(B.PTYPE,1,1)='P' AND B.KNYYM=$p_KNYYM12$ THEN B.YTTIM ELSE 0 END) AS YTTIM12																		
	FROM
		$LIB3$.HMD020PF A, $LIB3$.HPC200PF B, $LIB2$.MST650PF C
	WHERE
		A.SABUN=B.SABUN AND A.DPTCD=C.DPCODE
		AND B.KNYYM>=$KNYYMF$ AND B.KNYYM <![CDATA[<=]]> $KNYYMT$
		AND A.CNDCD <![CDATA[<>]]> 'R'
		AND C.DPCOMP=#COMPS#
	GROUP BY C.DPSQNO, A.DPTCD, C.DPCONM, A.SABUN, A.KORNM, A.SEXCD, A.PAYCD, A.YNBCD, A.GRADE, A.GNDAT, A.PASSA, 
			CASE WHEN A.PAYCD= 1 THEN '관리직' WHEN A.PAYCD= 2 THEN '직장'
			 WHEN A.PAYCD= 3 THEN '반장' WHEN A.PAYCD= 4 THEN '노동조합'
			 WHEN A.PAYCD= 9 THEN '기능직' ELSE '' END,
			CASE WHEN A.YNBCD='1' THEN '연봉자' ELSE '월급자' END,	 A.ENDAT, A.PEDTB
	<isEqual property="COMPS" compareValue="E1">	
	ORDER BY A.DPTCD, A.GRADE, A.GNDAT, SABUN
	</isEqual>
	<isNotEqual property="COMPS" compareValue="E1">
	ORDER BY C.DPSQNO, A.DPTCD, A.GRADE, A.GNDAT, SABUN
	</isNotEqual>
		
	</select>
	<select id="selectHMDC009Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT	
		CASE WHEN B.GRADE = '00' THEN '중역' WHEN (B.GRADE > '00' AND B.GRADE <![CDATA[<]]>'49') THEN '관리직' ELSE '기능직' END AS GRANM,
		DIGITS(A.SABUN) AS SABUN, TRIM(B.KORNM) AS KORNM, B.GNDAT, B.ENDAT, B.PEDTB, B.CNDAT,
		SUBSTR(DIGITS(B.PASSA),3,6)||'-'||DIGITS(B.PASSB)||DIGITS(B.PASSC) AS JUMIN, B.DPTCD, TRIM(C.DPDPNM) AS DPDPNM, 
			
		SUM(A.YMT) AS YMT,		
		SUM(A.PAY) AS PAY, SUM(A.EDU) AS EDU, SUM(A.BBOS) AS BBOS, SUM(A.CBOS) AS CBOS, SUM(A.YMT+A.PAY+A.EDU+A.BBOS+A.CBOS) AS TOT,
		SUM(A.PAY01) AS PAY01, SUM(A.EDU01) AS EDU01, SUM(A.BBOS01) AS BBOS01, SUM(A.CBOS01) AS CBOS01, SUM(A.PAY01+A.EDU01+A.BBOS01+A.CBOS01) AS TOT01,
		SUM(A.PAY02) AS PAY02, SUM(A.EDU02) AS EDU02, SUM(A.BBOS02) AS BBOS02, SUM(A.CBOS02) AS CBOS02, SUM(A.PAY02+A.EDU02+A.BBOS02+A.CBOS02) AS TOT02,
		SUM(A.PAY03) AS PAY03, SUM(A.EDU03) AS EDU03, SUM(A.BBOS03) AS BBOS03, SUM(A.CBOS03) AS CBOS03, SUM(A.PAY03+A.EDU03+A.BBOS03+A.CBOS03) AS TOT03,
		SUM(A.PAY04) AS PAY04, SUM(A.EDU04) AS EDU04, SUM(A.BBOS04) AS BBOS04, SUM(A.CBOS04) AS CBOS04, SUM(A.PAY04+A.EDU04+A.BBOS04+A.CBOS04) AS TOT04,
		SUM(A.PAY05) AS PAY05, SUM(A.EDU05) AS EDU05, SUM(A.BBOS05) AS BBOS05, SUM(A.CBOS05) AS CBOS05, SUM(A.PAY05+A.EDU05+A.BBOS05+A.CBOS05) AS TOT05,
		SUM(A.PAY06) AS PAY06, SUM(A.EDU06) AS EDU06, SUM(A.BBOS06) AS BBOS06, SUM(A.CBOS06) AS CBOS06, SUM(A.PAY06+A.EDU06+A.BBOS06+A.CBOS06) AS TOT06,
		SUM(A.PAY07) AS PAY07, SUM(A.EDU07) AS EDU07, SUM(A.BBOS07) AS BBOS07, SUM(A.CBOS07) AS CBOS07, SUM(A.PAY07+A.EDU07+A.BBOS07+A.CBOS07) AS TOT07,
		SUM(A.PAY08) AS PAY08, SUM(A.EDU08) AS EDU08, SUM(A.BBOS08) AS BBOS08, SUM(A.CBOS08) AS CBOS08, SUM(A.PAY08+A.EDU08+A.BBOS08+A.CBOS08) AS TOT08,
		SUM(A.PAY09) AS PAY09, SUM(A.EDU09) AS EDU09, SUM(A.BBOS09) AS BBOS09, SUM(A.CBOS09) AS CBOS09, SUM(A.PAY09+A.EDU09+A.BBOS09+A.CBOS09) AS TOT09,
		SUM(A.PAY10) AS PAY10, SUM(A.EDU10) AS EDU10, SUM(A.BBOS10) AS BBOS10, SUM(A.CBOS10) AS CBOS10, SUM(A.PAY10+A.EDU10+A.BBOS10+A.CBOS10) AS TOT10,
		SUM(A.PAY11) AS PAY11, SUM(A.EDU11) AS EDU11, SUM(A.BBOS11) AS BBOS11, SUM(A.CBOS11) AS CBOS11, SUM(A.PAY11+A.EDU11+A.BBOS11+A.CBOS11) AS TOT11,
		SUM(A.PAY12) AS PAY12, SUM(A.EDU12) AS EDU12, SUM(A.BBOS12) AS BBOS12, SUM(A.CBOS12) AS CBOS12, SUM(A.PAY12+A.EDU12+A.BBOS12+A.CBOS12) AS TOT12
	FROM (
		SELECT
			A.SABUN, 0 AS YMT,
			<!-- TOTAL -->			
			SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) = 'P' THEN (A.PAMTTP-A.EDUCMP) ELSE 0 END) AS PAY,
			SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS EDU,
			SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) = 'B' THEN A.PAMTTP ELSE 0 END) AS BBOS,
			SUM(CASE WHEN SUBSTR(A.PTYPE,1,1) = 'C' THEN A.PAMTTP ELSE 0 END) AS CBOS,
			<!-- M -->
			SUM(CASE WHEN A.KNYYM=$p_KNYYM1$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN (A.PAMTTP-A.EDUCMP) ELSE 0 END) AS PAY01,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM1$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS EDU01,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM1$ AND SUBSTR(A.PTYPE,1,1) = 'B' THEN A.PAMTTP ELSE 0 END) AS BBOS01,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM1$ AND SUBSTR(A.PTYPE,1,1) = 'C' THEN A.PAMTTP ELSE 0 END) AS CBOS01,
			<!-- M+1 -->
			SUM(CASE WHEN A.KNYYM=$p_KNYYM2$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN (A.PAMTTP-A.EDUCMP) ELSE 0 END) AS PAY02,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM2$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS EDU02,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM2$ AND SUBSTR(A.PTYPE,1,1) = 'B' THEN A.PAMTTP ELSE 0 END) AS BBOS02,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM2$ AND SUBSTR(A.PTYPE,1,1) = 'C' THEN A.PAMTTP ELSE 0 END) AS CBOS02,
			<!-- M+2 -->
			SUM(CASE WHEN A.KNYYM=$p_KNYYM3$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN (A.PAMTTP-A.EDUCMP) ELSE 0 END) AS PAY03,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM3$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS EDU03,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM3$ AND SUBSTR(A.PTYPE,1,1) = 'B' THEN A.PAMTTP ELSE 0 END) AS BBOS03,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM3$ AND SUBSTR(A.PTYPE,1,1) = 'C' THEN A.PAMTTP ELSE 0 END) AS CBOS03,
			<!-- M+3 -->
			SUM(CASE WHEN A.KNYYM=$p_KNYYM4$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN (A.PAMTTP-A.EDUCMP) ELSE 0 END) AS PAY04,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM4$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS EDU04,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM4$ AND SUBSTR(A.PTYPE,1,1) = 'B' THEN A.PAMTTP ELSE 0 END) AS BBOS04,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM4$ AND SUBSTR(A.PTYPE,1,1) = 'C' THEN A.PAMTTP ELSE 0 END) AS CBOS04,
			<!-- M+4 -->
			SUM(CASE WHEN A.KNYYM=$p_KNYYM5$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN (A.PAMTTP-A.EDUCMP) ELSE 0 END) AS PAY05,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM5$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS EDU05,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM5$ AND SUBSTR(A.PTYPE,1,1) = 'B' THEN A.PAMTTP ELSE 0 END) AS BBOS05,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM5$ AND SUBSTR(A.PTYPE,1,1) = 'C' THEN A.PAMTTP ELSE 0 END) AS CBOS05,
			<!-- M+5 -->
			SUM(CASE WHEN A.KNYYM=$p_KNYYM6$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN (A.PAMTTP-A.EDUCMP) ELSE 0 END) AS PAY06,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM6$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS EDU06,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM6$ AND SUBSTR(A.PTYPE,1,1) = 'B' THEN A.PAMTTP ELSE 0 END) AS BBOS06,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM6$ AND SUBSTR(A.PTYPE,1,1) = 'C' THEN A.PAMTTP ELSE 0 END) AS CBOS06,
			<!-- M+6 -->
			SUM(CASE WHEN A.KNYYM=$p_KNYYM7$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN (A.PAMTTP-A.EDUCMP) ELSE 0 END) AS PAY07,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM7$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS EDU07,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM7$ AND SUBSTR(A.PTYPE,1,1) = 'B' THEN A.PAMTTP ELSE 0 END) AS BBOS07,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM7$ AND SUBSTR(A.PTYPE,1,1) = 'C' THEN A.PAMTTP ELSE 0 END) AS CBOS07,
			<!-- M+7 -->
			SUM(CASE WHEN A.KNYYM=$p_KNYYM8$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN (A.PAMTTP-A.EDUCMP) ELSE 0 END) AS PAY08,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM8$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS EDU08,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM8$ AND SUBSTR(A.PTYPE,1,1) = 'B' THEN A.PAMTTP ELSE 0 END) AS BBOS08,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM8$ AND SUBSTR(A.PTYPE,1,1) = 'C' THEN A.PAMTTP ELSE 0 END) AS CBOS08,
			<!-- M+8 -->
			SUM(CASE WHEN A.KNYYM=$p_KNYYM9$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN (A.PAMTTP-A.EDUCMP) ELSE 0 END) AS PAY09,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM9$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS EDU09,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM9$ AND SUBSTR(A.PTYPE,1,1) = 'B' THEN A.PAMTTP ELSE 0 END) AS BBOS09,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM9$ AND SUBSTR(A.PTYPE,1,1) = 'C' THEN A.PAMTTP ELSE 0 END) AS CBOS09,
			<!-- M+9 -->
			SUM(CASE WHEN A.KNYYM=$p_KNYYM10$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN (A.PAMTTP-A.EDUCMP) ELSE 0 END) AS PAY10,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM10$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS EDU10,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM10$ AND SUBSTR(A.PTYPE,1,1) = 'B' THEN A.PAMTTP ELSE 0 END) AS BBOS10,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM10$ AND SUBSTR(A.PTYPE,1,1) = 'C' THEN A.PAMTTP ELSE 0 END) AS CBOS10,
			<!-- M+10 -->
			SUM(CASE WHEN A.KNYYM=$p_KNYYM11$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN (A.PAMTTP-A.EDUCMP) ELSE 0 END) AS PAY11,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM11$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS EDU11,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM11$ AND SUBSTR(A.PTYPE,1,1) = 'B' THEN A.PAMTTP ELSE 0 END) AS BBOS11,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM11$ AND SUBSTR(A.PTYPE,1,1) = 'C' THEN A.PAMTTP ELSE 0 END) AS CBOS11,
			<!-- M+11 -->
			SUM(CASE WHEN A.KNYYM=$p_KNYYM12$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN (A.PAMTTP-A.EDUCMP) ELSE 0 END) AS PAY12,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM12$ AND SUBSTR(A.PTYPE,1,1) = 'P' THEN A.EDUCMP ELSE 0 END) AS EDU12,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM12$ AND SUBSTR(A.PTYPE,1,1) = 'B' THEN A.PAMTTP ELSE 0 END) AS BBOS12,
			SUM(CASE WHEN A.KNYYM=$p_KNYYM12$ AND SUBSTR(A.PTYPE,1,1) = 'C' THEN A.PAMTTP ELSE 0 END) AS CBOS12
		FROM
			$LIB3$.HPC200PF A
		WHERE
			A.KNYYM >= $p_KNYYM1$
			AND A.KNYYM <![CDATA[<=]]> $p_KNYYM12$
			<isNotEmpty prepend="AND" property="SABUN">
			A.SABUN IN  $SABUN$
			</isNotEmpty>
		GROUP BY A.SABUN
			
		UNION  ALL
		SELECT
			B.SABUN, B.YYAMT AS YMT, 
			0 AS PAY, 0 AS EDU, 0 AS BBOS, 0 AS CBOS,
			CASE WHEN SUBSTR($p_KNYYM1$,5,2) = 01 THEN B.YYAMT ELSE 0 END AS PAY01, 0 AS EDU01, 0 AS BBOS01, 0 AS CBOS01,
			CASE WHEN SUBSTR($p_KNYYM2$,5,2) = 01 THEN B.YYAMT ELSE 0 END AS PAY02, 0 AS EDU02, 0 AS BBOS02, 0 AS CBOS02,
			CASE WHEN SUBSTR($p_KNYYM3$,5,2) = 01 THEN B.YYAMT ELSE 0 END AS PAY03, 0 AS EDU03, 0 AS BBOS03, 0 AS CBOS03,
			CASE WHEN SUBSTR($p_KNYYM4$,5,2) = 01 THEN B.YYAMT ELSE 0 END AS PAY04, 0 AS EDU04, 0 AS BBOS04, 0 AS CBOS04,
			CASE WHEN SUBSTR($p_KNYYM5$,5,2) = 01 THEN B.YYAMT ELSE 0 END AS PAY05, 0 AS EDU05, 0 AS BBOS05, 0 AS CBOS05,
			CASE WHEN SUBSTR($p_KNYYM6$,5,2) = 01 THEN B.YYAMT ELSE 0 END AS PAY06, 0 AS EDU06, 0 AS BBOS06, 0 AS CBOS06,
			CASE WHEN SUBSTR($p_KNYYM7$,5,2) = 01 THEN B.YYAMT ELSE 0 END AS PAY07, 0 AS EDU07, 0 AS BBOS07, 0 AS CBOS07,
			CASE WHEN SUBSTR($p_KNYYM8$,5,2) = 01 THEN B.YYAMT ELSE 0 END AS PAY08, 0 AS EDU08, 0 AS BBOS08, 0 AS CBOS08,
			CASE WHEN SUBSTR($p_KNYYM9$,5,2) = 01 THEN B.YYAMT ELSE 0 END AS PAY09, 0 AS EDU09, 0 AS BBOS09, 0 AS CBOS09,
			CASE WHEN SUBSTR($p_KNYYM10$,5,2) = 01 THEN B.YYAMT ELSE 0 END AS PAY10, 0 AS EDU10, 0 AS BBOS10, 0 AS CBOS10,
			CASE WHEN SUBSTR($p_KNYYM11$,5,2) = 01 THEN B.YYAMT ELSE 0 END AS PAY11, 0 AS EDU11, 0 AS BBOS11, 0 AS CBOS11,
			CASE WHEN SUBSTR($p_KNYYM12$,5,2) = 01 THEN B.YYAMT ELSE 0 END AS PAY12, 0 AS EDU12, 0 AS BBOS12, 0 AS CBOS12			
		FROM
			$LIB3$.HPM100PF B
		WHERE
			B.YYEAR = $YYEAR$
			AND B.GUBUN = 'Y'
			AND B.GOBOH <![CDATA[>]]> 0
			<isNotEmpty prepend="AND" property="SABUN">
			B.SABUN IN  $SABUN$
			</isNotEmpty>			
		) A, $LIB3$.HMD020PF B
		LEFT OUTER JOIN $LIB2$.MST650PF C ON B.DPTCD = C.DPCODE AND C.DPCOMP = #COMPS#
	WHERE
		A.SABUN = B.SABUN
	GROUP BY CASE WHEN B.GRADE = '00' THEN '중역' WHEN (B.GRADE > '00' AND B.GRADE <![CDATA[<]]>'49') THEN '관리직' ELSE '기능직' END,
				DIGITS(A.SABUN), TRIM(B.KORNM), B.GNDAT, B.ENDAT, B.PEDTB, B.CNDAT,
				SUBSTR(DIGITS(B.PASSA),3,6)||'-'||DIGITS(B.PASSB)||DIGITS(B.PASSC), B.DPTCD, TRIM(C.DPDPNM) 
	ORDER BY GRANM, SABUN
	</select>
	<select id="selectHMDZ012Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		B.DPSQNO, A.DPTCD, TRIM(B.DPCONM) AS DPCONM, TRIM(B.DPDPNM) AS DPDPNM,
		CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
		ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN, TRIM(A.KORNM) AS KORNM,
		SUBSTR(DIGITS(A.PASSA),3,6)||'-'||DIGITS(A.PASSB)||DIGITS(A.PASSC) AS JUMIN,
		A.GNDAT, A.ENDAT, A.PEDTB,
		A.CNDAT, A.PAYCD, A.YNBCD, A.GRADE, A.YENBO,
		CASE WHEN A.YNBCD=0 THEN A.KIBON ELSE 0 END AS KIBON,
		(A.JKSUD+A.TESUD+A.QLSUD+A.BJSUD+A.GSSUD+A.WHSUD+A.CJSUD+A.JMSUD+A.WFSUD+A.YHSUD+A.DOSUD+A.GTSUD+A.HASUD+A.TQSUD+A.FILL1+A.FILL3) AS TOTSUD
       <!-- C.MPAYD, C.MGYAM, C.OUPAY -->	
	FROM $LIB3$.HMD020PF A  <!-- 미사용 상관없음. $LIB3$.HAR021PF C  -->
	LEFT OUTER JOIN $LIB2$.MST650PF B ON A.DPTCD=B.DPCODE AND B.DPCOMP = #COMPS#
	<dynamic prepend="WHERE">
		<isEqual prepend="AND" property="CNDCD" compareValue="0">
			A.CNDCD != 'R'
		</isEqual>
		<isEqual prepend="AND" property="CNDCD" compareValue="1">
			(A.CNDAT =0 OR A.CNDAT >= $CNDAT$)
		</isEqual>
		<isEqual prepend="AND" property="GUBCD" compareValue="1">
			A.YNBCD = 1
		</isEqual>
		<isEqual prepend="AND" property="GUBCD" compareValue="2">
			A.YNBCD != 1
		</isEqual>
	</dynamic>	
	ORDER BY B.DPSQNO, A.SABUN
	</select>
	<select id="selectHMDZ013Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		B.DPSQNO, A.DPTCD, TRIM(B.DPCONM) AS DPCONM, TRIM(B.DPDPNM) AS DPDPNM,
		CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
		ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN, TRIM(A.KORNM) AS KORNM,
		SUBSTR(DIGITS(A.PASSA),3,6)||'-'||DIGITS(A.PASSB)||DIGITS(A.PASSC) AS JUMIN,
		A.SEXCD, CASE WHEN A.SEXCD = 'F' THEN '여' ELSE '남' END AS SEXNM, 
		A.GRADE, TRIM(COALESCE(C.PCONT,' ')) AS GRADENM,
		A.PAYCD, A.YNBCD,
		A.GNDAT, A.ENDAT, A.PEDTB, A.CNDAT
	FROM $LIB3$.HMD020PF A
	LEFT OUTER JOIN $LIB2$.MST650PF B ON A.DPTCD=B.DPCODE AND B.DPCOMP = #COMPS#
	LEFT OUTER JOIN $LIB3$.HUM010PF C ON 'ODCD' || A.GRADE = C.PCODE
	WHERE
		(A.CNDAT = 0 OR (A.CNDAT BETWEEN $CNDATFR$ AND $CNDATTO$))	
	ORDER BY B.DPSQNO, A.SABUN
	</select>
	<!-- 퇴직금 추계액생성~~~~~오오오옹 -->
	<!-- 대상자선택/연차포함 -->
	<select id="selectPDC101C" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		A.SABUN, A.KORNM, A.GRADE, A.HOBON, A.GUNHO, A.DPTCD, A.ENDAT, A.SEXCD, A.GNDAT,
		A.PASSA, A.PEDTB, B.YYAMT,
		'' AS AGE, 	'' AS AGE2
	FROM
		$LIB3$.HMD020PF A
		LEFT OUTER JOIN $LIB3$.HPM100PF B ON A.SABUN=B.SABUN AND B.YYEAR=$YYEAR$ AND B.GUBUN = 'Y' AND  B.GOBOH <![CDATA[>]]> 0
	WHERE
		(A.CNDAT = 0 OR A.CNDAT >= $CNDAT$)
		AND A.GNDAT <![CDATA[<=]]> $CNDAT$
		<isEqual prepend="AND" property="GUBUN" compareValue="1">
			A.GRADE <![CDATA[<]]> '49'
		</isEqual>
		<isEqual prepend="AND" property="GUBUN" compareValue="2">
			A.GRADE <![CDATA[>]]> '49'
		</isEqual>
		AND A.SABUN=40029
	</select>
	<!--  기존DATA삭제 -->
	<delete id="deletePDC101C" parameterClass="java.util.HashMap">
	DELETE FROM 
		PSDIOLIB.HRC200PF
	WHERE 
		CYEAR=$KYEAR$
		<isEqual prepend="AND" property="GUBUN" compareValue="1">
			A.GRADE <![CDATA[<]]> '49'
		</isEqual>
		<isEqual prepend="AND" property="GUBUN" compareValue="2">
			A.GRADE <![CDATA[>]]> '49'
		</isEqual>
	</delete>
	
	<insert id="insertPDC101C" parameterClass="java.util.HashMap">
	INSERT INTO PSDIOLIB.HRC200PF
		(SABUN, CYEAR, KORNM, GRADE, HOBON, GUNHO, DPTCD, ENDAT, PASSN, SEXCD, REGYY, REGDD, PAYT1, PAYT2, PAYT3,
		 PAYTM, YMPAY, BONUS, PAYTT, BOSTT, YYPAY, MMPAY, YYBOS, MMBOS, ADDYY, ADDMM, ADDTP, TTAMT, DPCHG, GNDAT)
	VALUES(
	
	)
	</insert>

	<select id="selectHAEZ02Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			DIGITS(A.SABUN) AS SABUN, TRIM(A.HONIN) AS HONIN,
			(CASE WHEN SUBSTR(A.HONIN,1,1)= 'G' THEN '기혼' ELSE '미혼' END) AS HONINNM,
				
			TRIM(A.KORNM) AS KORNM, TRIM(A.CHRNM) AS CHRNM, A.SEXCD, TRIM(A.SIKCM) AS SIKCM,
			(CASE WHEN A.SEXCD = 'M' THEN '남' ELSE '여' END) AS SEX, TRIM(A.ORADR) AS ORADR,
			(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'RGCD' || A.CHOCD) AS PCONT,
			(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'ITCD' || A.CHMCD) AS CHMCD,
			A.TALLM, A.WEIGT, A.LEEYE, A.RIEYE, A.BLDTY, A.BDYCT, TRIM(A.CUADR) AS CUADR, A.TELNB,
			(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'OSCD' || DIGITS(A.FYGCD)) AS FYGCD,
			(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'MTCD' || DIGITS(A.FVRCD)) AS FVRCD,
			(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'MSCD' || DIGITS(A.FBGCD)) AS FBGCD,
			(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'DRCD' || DIGITS(A.FCLCD)) AS FCLCD,
			A.FIDAT, A.FODAT, TRIM(B.DPDPNM) AS DPNM, A.GRADE, A.GNDAT, A.PASSA,
			(SUBSTR(A.PASSA,3,6) || '-' || A.PASSB || A.PASSC) AS JUMIN, 
			(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'ODCD' || A.GRADE) AS GRANM,
			TRIM(C.ENGNM) AS ENGNM,
			CASE WHEN SUBSTR(TRIM(A.SIKCM),1,1) = '1' THEN '보훈대상' ELSE ''END AS SIKCM1,
			CASE WHEN SUBSTR(TRIM(A.SIKCM),1,1) = '2' THEN '장애대상' ELSE ''END AS SIKCM2
		FROM
			$LIB3$.HMD020PF A INNER JOIN $LIB2$.MST650PF B ON A.DPTCD = B.DPCODE AND B.DPCOMP=#COMPS#
			LEFT OUTER JOIN $LIB3$.HMD300PF C ON A.SABUN=C.SABUN
		WHERE 
			A.SABUN=$SABUN$
	</select>
	<select id="selectHAEZ02Q_HMD150PF" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
		 	<isEqual property="COMPS" compareValue="PE">
			A.SCHCD || (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'SSCD' || A.SCHCD) AS SCHCD,
			A.ADRCD || (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'BPCD' || A.ADRCD) AS ADRCD,
			A.MAJCD || (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'MJCD' || A.MAJCD) AS MAJCD,
			A.GRDCD || (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'GDCD' || A.GRDCD) AS GRDCD,
			</isEqual>
			<isNotEqual property="COMPS" compareValue="PE">
			DIGITS(A.SCHCD) || (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'SSCD' || DIGITS(A.SCHCD)) AS SCHCD,
			DIGITS(A.ADRCD) || (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'BPCD' || DIGITS(A.ADRCD)) AS ADRCD,
			DIGITS(A.MAJCD) || (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'MJCD' || DIGITS(A.MAJCD)) AS MAJCD,
			DIGITS(A.GRDCD) || (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'GDCD' || DIGITS(A.GRDCD)) AS GRDCD,
			</isNotEqual>
			CASE WHEN LENGTH(TRIM(A.OUDAT))=8 THEN SUBSTR(OUDAT,1,4)||'-'||SUBSTR(OUDAT,5,2)||'-'||SUBSTR(OUDAT,7,2) 
				WHEN LENGTH(TRIM(A.OUDAT))=6 THEN SUBSTR(OUDAT,1,4)||'-'||SUBSTR(OUDAT,5,2)
				WHEN LENGTH(TRIM(A.OUDAT))=1 THEN TRIM(CHAR(A.OUDAT)) ELSE '' END AS OUDAT2,
			A.OUDAT, TRIM(A.SCHNM) AS SCHNM, TRIM(A.GRDCM) AS GRDCM
		FROM 
			$LIB3$.HMD150PF A
		WHERE 
			A.SABUN = $SABUN$
		ORDER BY A.OUDAT DESC
	</select>
	<select id="selectHAEZ02Q_HMD170PF" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			(CASE WHEN GUBCD = '1' THEN '1사외' ELSE '2사내' END) AS GUBCD, 
			ISDAT, OSDAT, TRIM(PLANM) AS PLANM, DEPNM, TRIM(GRANM) AS GRANM, WRKNM
		FROM 
			$LIB3$.HMD170PF
		WHERE 
			SABUN = $SABUN$
		ORDER BY ISDAT DESC
	</select>
	<select id="selectHAEZ02Q_HMD180PF" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			(CASE WHEN LCSCD <![CDATA[<]]> 10 THEN (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'QFCD0' || LCSCD) 
			ELSE (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'QFCD' || LCSCD) END) AS LCSCD,
			TRIM((SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'QDCD' || LCSCL)) AS LCSCL,
			GTDAT, TRIM(LCSNB) AS LCSNB, TRIM(LCSPL) AS LCSPL
		FROM 
			$LIB3$.HMD180PF
		WHERE 
			SABUN = $SABUN$
		ORDER BY GTDAT DESC
	</select>
	<select id="selectHAEZ02Q_HMD190PF" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			LSDAT, LLDAT, LDPOT,
			(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'LMCD0' || LDTCD) AS LDTCD
		FROM 
			$LIB3$.HMD190PF
		WHERE 
			SABUN = $SABUN$
		ORDER BY LSDAT DESC
	</select>					
	<select id="selectHAEZ02Q_HMD160PF" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			TRIM(A.RELNM) AS RELNM, A.BRDAT, A.LIVCD, A.SUBCD,
			A.RELCD || (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'FMCD' || REPEAT('0', 2-length(TRIM(CHAR(A.RELCD)))) || A.RELCD) AS RELCD,
			A.HAKCD || (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'SSCD' || REPEAT('0', 2-length(TRIM(CHAR(A.HAKCD)))) || A.HAKCD) AS HAKCD,
			A.JOBCD || (SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'JBCD' || REPEAT('0', 2-length(TRIM(CHAR(A.JOBCD)))) || A.JOBCD) AS JOBCD
		FROM 
			$LIB3$.HMD160PF A
		WHERE 
			A.SABUN = $SABUN$
	</select>

	<select id="selectHAEZ02Q_HMD220PF" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			A.APDAT, A.APDDL, A.APDCL, A.APDWK
		FROM (
			<isEqual property="COMPS" compareValue="PE">
			SELECT APDAT, TRIM(APDDL) AS APDDL, TRIM(APDCL) AS APDCL, APDWK
			FROM $LIB3$.HMD220PF
			WHERE SABUN = '$SABUN$' AND APDCD IN (12)	
			</isEqual>
			<isNotEqual property="COMPS" compareValue="PE">
			<!--
			SELECT UPDAT AS APDAT, '' AS APDDL, 
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'ODCD' || UGRAD) AS APDCL, TRIM(UPD02) AS APDWK 
			FROM $LIB3$.HMD210PF
			WHERE SABUN = $SABUN$
			-->
			SELECT UPDAT AS APDAT, TRIM(C.DPDPNM) AS APDDL,
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'ODCD' || A.UGRAD) AS APDCL, TRIM(A.UPD02) AS APDWK 
			FROM $LIB3$.HMD210PF A
			LEFT OUTER JOIN $LIB3$.HPC200PF B ON A.SABUN=B.SABUN AND SUBSTR(A.UPDAT,1,6) = B.KNYYM AND B.PTYPE='P1'
			LEFT OUTER JOIN $LIB2$.MST650PF C ON C.DPCOMP=#COMPS2# AND B.DPTCDP=C.DPCODE
			WHERE A.SABUN = $SABUN$
			</isNotEqual>
			) A
		ORDER BY A.APDAT DESC
	</select>
	<select id="selectHAEZ02Q_TAB2" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			A.APDAT, A.APDCD, A.APDCL, A.APDDL, A.APDNM
		FROM (
			<isEqual property="COMPS" compareValue="PE">
			SELECT APDAT, APDCD, TRIM(APDCL) AS APDCL, TRIM(APDDL) AS APDDL,
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'HACD' || APDCD) AS APDNM
			FROM $LIB3$.HMD220PF
			WHERE SABUN = $SABUN$ AND APDCD IN (10, 11)
			</isEqual>
			<isNotEqual property="COMPS" compareValue="PE">
			<!-- 이동부서 및 직급수정전
			SELECT BSDAT AS APDAT, BALCD AS APDCD, '' AS APDCL, TRIM(NAYON) AS APDDL,
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'HACD' || BALCD) AS APDNM
			FROM $LIB3$.HMD250PF
			WHERE SABUN = $SABUN$ AND BALCD = 71
			 -->
			SELECT A.BSDAT AS APDAT, A.BALCD AS APDCD, TRIM(C.PCONT) AS APDCL, TRIM(B.DPDPNM) AS APDDL,
				(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'HACD' || A.BALCD) AS APDNM
			FROM $LIB3$.HMD250PF A
			LEFT OUTER JOIN $LIB2$.MST650PF B ON B.DPCOMP=#COMPS2# AND TRIM(A.NAYEK)=B.DPCODE
			LEFT OUTER JOIN $LIB3$.HUM010PF C ON C.PCODE = 'ODCD' || A.HGSCD
			WHERE SABUN = $SABUN$ AND BALCD = 71
			</isNotEqual>	
			) A
		ORDER BY A.APDAT DESC
	</select>
	<select id="selectHAEZ02Q_TAB3" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			KNYYM, (GRADEP || HOBONP) AS HOBONP, GYBONP, KIBONP, CJSUDP, HASUDP, WHSUDP, TESUDP,  
			JMSUDP, JKSUDP, GSSUDP, BJSUDP, QLSUDP, TQSUDP, WFSUDP, YHSUDP, DOSUDP, GTSUDP, OTSUDP,
			PAMTTP, WFSUDP+YHSUDP+DOSUDP AS WYDSUDP, FILL1P, FILL2P, FILL3P
		FROM 
			$LIB3$.HPC200PF
		WHERE 
			SUBSTR(KNYYM,5,2) = '04'
			AND	PTYPE = 'P0'				
			AND SABUN = $SABUN$
		ORDER BY KNYYM DESC
	</select>
	<select id="selectHAEZ02Q_TAB4" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			ADVYY, ADVPT, TRIM(ADVET) AS ADVET
		FROM
			$LIB3$.HMD260PF
		WHERE 
			SABUN = $SABUN$
		ORDER BY ADVYY DESC
	</select>
	<select id="selectHAEZ02Q_TAB5" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'EMCD' || EDTCD) AS EDTCD,
			ESDAT, EEDAT, TRIM(EDTPL) AS EDTPL, TRIM(EDTNM) AS EDTNM, EDPOT, EDCLS
		FROM 
			$LIB3$.HMD200PF
		WHERE 
			SABUN = $SABUN$
		ORDER BY ESDAT DESC
	</select>
	<select id="selectHAEZ02Q_TAB6" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'SICD0' || SICGB) AS SICGB,
			SICYY, FRSDT, TOSDT, TRIM(SICET) AS SICET
		FROM 
			$LIB3$.HMD270PF
		WHERE 
			SABUN = $SABUN$
		ORDER BY SICYY DESC
	</select>
	<select id="selectHAEZ02Q_TAB7" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			ACCYY, 
			CASE WHEN TRIM(ACCCD)='10' THEN '공상' WHEN TRIM(ACCCD)='20' THEN '산재' ELSE '' END AS ACCCD,
			ACDAT, ESDAT, EEDAT, TRIM(REMAK) AS REMAK
		FROM
			$LIB3$.HMD280PF
		WHERE
			SABUN = $SABUN$
		ORDER BY ACCYY DESC
	</select>
	<select id="selectHAEZ02Q_TAB8" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			'징계' AS GUBUN, TRIM(DCPMN) AS DCPMN, TRIM(DCPSY) AS DCPSY,
			(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'DPCD0' || DCPCD) AS DCPCD,
			(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'DPKD' || DCPKD) AS DCPKD
		FROM 
			$LIB3$.HMD230PF
		WHERE 
			SABUN = $SABUN$
		UNION ALL
		SELECT 
			'포상' AS GUBUN, TRIM(PRZMN) AS DCPMN,  TRIM(PRZSY) AS DCPSY,
			(SELECT TRIM(PCONT) FROM $LIB3$.HUM010PF WHERE PCODE = 'FSCD0' || PRZCD) AS DCPCD,
			TRIM(PRZNY) AS DCPKD
		FROM 
			$LIB3$.HMD240PF
		WHERE 
			SABUN = $SABUN$	
	</select>
	<select id="selectHAEZ02Q_TAB9" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			CFDAT, ESDAT, EEDAT, TRIM(LOCAT) AS LOCAT, TRIM(REMAK) AS REMAK
		FROM
			$LIB3$.HMD290PF
		WHERE
			SABUN = $SABUN$
		ORDER BY CFDAT DESC
	</select>
	<select id="selectHAEZ02Q_TAB10" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			A.HYYMM, A.SEQNM, A.HKAMT, TRIM(A.SCHAT) AS SCHAT, A.STUCD, TRIM(B.PCONT) AS STUNM,
			TRIM(A.KORNO) AS KORNO, TRIM(A.REMAK) AS REMAK
		FROM 
			$LIB3$.HPC020PF A
			LEFT OUTER JOIN $LIB3$.HUM010PF B ON 'HKC'||A.STUCD = B.PCODE
		WHERE 
			A.SABUN = $SABUN$
		ORDER BY A.HYYMM, A.SEQNM
	</select>
	<select id="selectHAEZ02Q_TAB11" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			A.SABUN, TRIM(B.KORNM) AS KORNM, B.CNDCD, B.GNDAT, B.ENDAT, B.PEDTB,
			A.OUPAY, A.MGYAM, A.R3301, A.R3303, A.R4400,
			A.CDSEQ, A.CEDCD,			
			A.R0901, A.R0902, A.R0911, A.R0912
		FROM
			$LIB3$.HAR200PF A, $LIB3$.HMD020PF B 
		WHERE
			A.SABUN = $SABUN$
			AND A.SABUN = B.SABUN 
		ORDER BY B.DPTCD, B.PAYCD, B.GRADE, B.SEXCD, B.ENDAT, A.SABUN, A.CDSEQ
	</select>
	<select id="selectHMDZ150" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
		
			CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
			ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,
			
			REPEAT('0', 2-length(TRIM(CHAR(A.SCHCD)))) || A.SCHCD AS SCHCD,
			REPEAT('0', 2-length(TRIM(CHAR(A.ADRCD)))) || A.ADRCD AS ADRCD,	
			TRIM(A.SCHNM) AS SCHNM,
			REPEAT('0', 2-length(TRIM(CHAR(A.MAJCD)))) || A.MAJCD AS MAJCD,
			A.INDAT, A.OUDAT,
			REPEAT('0', 2-length(TRIM(CHAR(A.GRDCD)))) || A.GRDCD AS GRDCD,
			TRIM(A.GRDCM) AS GRDCM,
			<!-- 
			A.SCHCD, A.ADRCD, A.MAJCD, A.GRDCD,
			-->
			TRIM(B.KORNM) AS KORNM,
			C.DPSQNO, B.DPTCD, TRIM(C.DPCONM) AS DPCONM, TRIM(C.DPDPNM) AS DPDPNM
		FROM
			$LIB3$.HMD150PF A
			<isEqual property="SCHCD" compareValue="1">
			, (SELECT Z.SABUN, MAX(Z.SCHCD) AS SCHCD FROM $LIB3$.HMD150PF Z GROUP BY Z.SABUN) D
			</isEqual>
			LEFT OUTER JOIN $LIB3$.HMD020PF B ON A.SABUN=B.SABUN
			LEFT OUTER JOIN $LIB2$.MST650PF C ON B.DPTCD=C.DPCODE AND C.DPCOMP=#COMPS#		
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="SABUN">
				A.SABUN =  $SABUN$
			</isNotEmpty>
			<isEqual prepend="AND" property="CNDCD" compareValue="0">
				B.CNDCD != 'R'
			</isEqual>
			<isEqual prepend="AND" property="SCHCD" compareValue="1">
				A.SABUN = D.SABUN AND A.SCHCD = D.SCHCD
			</isEqual>
		</dynamic>
		<isEqual property="COMPS" compareValue="E1">	
		ORDER BY B.DPTCD, B.GRADE, A.SABUN
		</isEqual>
		<isNotEqual property="COMPS" compareValue="E1">
		ORDER BY C.DPSQNO, B.DPTCD, SABUN, A.SCHCD
		</isNotEqual>		
	</select>
	<select id="selectHMDZ150_Check" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			COUNT(*) CNT 
		FROM
			$LIB3$.HMD150PF
		WHERE 
			SABUN = $SABUN$ AND SCHCD=$OLD_SCHCD$
	</select>
	<insert id="insertHMDZ150" parameterClass="java.util.HashMap" >
		INSERT INTO $LIB3$.HMD150PF (SABUN, SCHCD, ADRCD, SCHNM, MAJCD, INDAT, OUDAT, GRDCD, GRDCM)
		VALUES ($SABUN$, $SCHCD$, $ADRCD$, #SCHNM#, $MAJCD$, $INDAT$, $OUDAT$, $GRDCD$, #GRDCM#)
	</insert>
	<update id="updateHMDZ150" parameterClass="java.util.HashMap" >
		UPDATE $LIB3$.HMD150PF
		SET
			ADRCD=$ADRCD$,
			SCHNM=#SCHNM#,
			MAJCD=$MAJCD$,
			INDAT=$INDAT$,
			OUDAT=$OUDAT$,
			GRDCD=$GRDCD$,
			GRDCM=#GRDCM#
		WHERE
			SABUN = $SABUN$ AND SCHCD=$OLD_SCHCD$
	</update>
	<delete id="deleteHMDZ150" parameterClass="java.util.HashMap" >
		DELETE FROM $LIB3$.HMD150PF
			WHERE	SABUN = $SABUN$ AND SCHCD=$OLD_SCHCD$
	</delete>
	<select id="selectHMDZ160" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			DIGITS(A.SABUN) AS SABUN, A.RELSQ, TRIM(A.RELNM) AS RELNM, A.RELCD, A.BRDAT,
			REPEAT('0', 2-length(TRIM(CHAR(A.HAKCD)))) || A.HAKCD AS HAKCD,
			REPEAT('0', 2-length(TRIM(CHAR(A.JOBCD)))) || A.JOBCD AS JOBCD,
			<!-- A.HAKCD, A.JOBCD,  -->
			TRIM(A.LIVCD) AS LIVCD, TRIM(A.SUBCD) AS SUBCD,
			TRIM(B.KORNM) AS KORNM,
			C.DPSQNO, B.DPTCD, TRIM(C.DPCONM) AS DPCONM, TRIM(C.DPDPNM) AS DPDPNM 
		FROM
			$LIB3$.HMD160PF A
			LEFT OUTER JOIN $LIB3$.HMD020PF B ON A.SABUN=B.SABUN
			LEFT OUTER JOIN $LIB2$.MST650PF C ON B.DPTCD=C.DPCODE AND C.DPCOMP=#COMPS#		
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="SABUN">
				A.SABUN =  $SABUN$
			</isNotEmpty>
			<isEqual prepend="AND" property="CNDCD" compareValue="0">
				B.CNDCD != 'R'
			</isEqual>			
		</dynamic>
		ORDER BY C.DPSQNO, B.DPTCD, SABUN, A.RELSQ
	</select>
	<select id="selectHMDZ160_Check" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			COUNT(*) CNT 
		FROM
			$LIB3$.HMD160PF
		WHERE 
			SABUN = $SABUN$ AND RELSQ=$OLD_RELSQ$
	</select>
	<insert id="insertHMDZ160" parameterClass="java.util.HashMap" >
		INSERT INTO $LIB3$.HMD160PF (SABUN, RELSQ, RELNM, RELCD, BRDAT, HAKCD, JOBCD, LIVCD, SUBCD)
		VALUES ($SABUN$, $RELSQ$, #RELNM#, $RELCD$, $BRDAT$, $HAKCD$, $JOBCD$, #LIVCD#, #SUBCD#)
	</insert>
	<update id="updateHMDZ160" parameterClass="java.util.HashMap" >
		UPDATE $LIB3$.HMD160PF
		SET
			RELNM=#RELNM#,
			RELCD=$RELCD$,
			BRDAT=$BRDAT$,
			HAKCD=$HAKCD$,
			JOBCD=$JOBCD$,
			LIVCD=#LIVCD#,
			SUBCD=#SUBCD#
		WHERE
			SABUN = $SABUN$ AND RELSQ=$OLD_RELSQ$
	</update>
	<delete id="deleteHMDZ160" parameterClass="java.util.HashMap" >
		DELETE FROM $LIB3$.HMD160PF
			WHERE	SABUN = $SABUN$ AND RELSQ=$OLD_RELSQ$
	</delete>

	<select id="selectHMDZ180" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
			ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,
			REPEAT('0', 2-length(TRIM(CHAR(A.LCSCD)))) || A.LCSCD AS LCSCD,
			CASE WHEN TRIM(CHAR(A.LCSCL))='0' THEN '00' ELSE TRIM(CHAR(A.LCSCL)) END AS LCSCL,
			A.GTDAT, TRIM(A.LCSNB) AS LCSNB, TRIM(A.LCSPL) AS LCSPL,
			TRIM(B.KORNM) AS KORNM,
			C.DPSQNO, B.DPTCD, TRIM(C.DPCONM) AS DPCONM, TRIM(C.DPDPNM) AS DPDPNM 
		FROM
			$LIB3$.HMD180PF A
			LEFT OUTER JOIN $LIB3$.HMD020PF B ON A.SABUN=B.SABUN
			LEFT OUTER JOIN $LIB2$.MST650PF C ON B.DPTCD=C.DPCODE AND C.DPCOMP=#COMPS#		
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="SABUN">
				A.SABUN =  $SABUN$
			</isNotEmpty>
			<isEqual prepend="AND" property="CNDCD" compareValue="0">
				B.CNDCD != 'R'
			</isEqual>
			<isNotEmpty prepend="AND" property="LCSCD">
				A.LCSCD =  $LCSCD$
			</isNotEmpty>
		</dynamic>
		<isEqual property="COMPS" compareValue="E1">	
		ORDER BY C.DPCOMP, B.DPTCD, B.GRADE, A.SABUN
		</isEqual>
		<isNotEqual property="COMPS" compareValue="E1">
		ORDER BY C.DPCOMP, C.DPSQNO, B.DPTCD, B.GRADE, A.SABUN
		</isNotEqual>
	</select>
	<select id="selectHMDZ180_Check" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			COUNT(*) CNT 
		FROM
			PSDIOLIB.HMD180PF
		WHERE 
			SABUN = $SABUN$ AND LCSCD=$OLD_LCSCD$ AND LCSCL=$OLD_LCSCL$
	</select>
	<insert id="insertHMDZ180" parameterClass="java.util.HashMap" >
		INSERT INTO PSDIOLIB.HMD180PF (SABUN, LCSCD, LCSCL, GTDAT, LCSNB, LCSPL)
		VALUES ($SABUN$, $LCSCD$, $LCSCL$, $GTDAT$, #LCSNB#, #LCSPL#)
	</insert>
	<update id="updateHMDZ180" parameterClass="java.util.HashMap" >
		UPDATE PSDIOLIB.HMD180PF
		SET
			GTDAT=$GTDAT$,
			LCSNB=#LCSNB#,
			LCSPL=#LCSPL#
		WHERE
			SABUN = $SABUN$ AND LCSCD=$OLD_LCSCD$ AND LCSCL=$OLD_LCSCL$
	</update>
	<delete id="deleteHMDZ180" parameterClass="java.util.HashMap" >
		DELETE FROM PSDIOLIB.HMD180PF
			WHERE	SABUN = $SABUN$ AND LCSCD=$OLD_LCSCD$ AND LCSCL=$OLD_LCSCL$
	</delete>
	<select id="selectHMDZ190" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
			ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,
			A.LSDAT, A.LLDAT,
			REPEAT('0', 2-length(TRIM(CHAR(A.LDTCD)))) || A.LDTCD AS LDTCD,
			A.LDPOT, TRIM(A.LDBCD) AS LDBCD, A.LEDAT, TRIM(A.LBIGO) AS LBIGO,
			TRIM(B.KORNM) AS KORNM,
			C.DPSQNO, B.DPTCD, TRIM(C.DPCONM) AS DPCONM, TRIM(C.DPDPNM) AS DPDPNM 
		FROM
			$LIB3$.HMD190PF A
			<isEqual property="LATCD" compareValue="1">
			, (SELECT Z.SABUN, Z.LDTCD, MAX(Z.LDPOT) AS LDPOT, Z.LDBCD FROM PSEDBLIB.HMD190PF Z GROUP BY  Z.SABUN, Z.LDTCD, Z.LDBCD) D
			</isEqual>
			LEFT OUTER JOIN $LIB3$.HMD020PF B ON A.SABUN=B.SABUN
			LEFT OUTER JOIN $LIB2$.MST650PF C ON B.DPTCD=C.DPCODE AND C.DPCOMP=#COMPS#					
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="SABUN">
				A.SABUN =  $SABUN$
			</isNotEmpty>
			<isEqual prepend="AND" property="CNDCD" compareValue="0">
				B.CNDCD != 'R'
			</isEqual>
			<isNotEmpty prepend="AND" property="LDTCD">
				A.LDTCD =  $LDTCD$
			</isNotEmpty>
			<isEqual prepend="AND" property="LATCD" compareValue="1">
				A.SABUN = D.SABUN AND A.LDTCD = D.LDTCD AND A.LDPOT = D.LDPOT AND A.LDBCD=D.LDBCD
			</isEqual>
		</dynamic>
		<isEqual property="COMPS" compareValue="E1">	
		ORDER BY C.DPCOMP, B.DPTCD, B.GRADE, A.SABUN, A.LDTCD, A.LSDAT
		</isEqual>
		<isNotEqual property="COMPS" compareValue="E1">
		ORDER BY C.DPCOMP, C.DPSQNO, B.DPTCD, B.GRADE, A.SABUN, A.LDTCD, A.LSDAT
		</isNotEqual>
	</select>
	<select id="selectHMDZ190_Check" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			COUNT(*) CNT 
		FROM
			$LIB3$.HMD190PF
		WHERE 
			SABUN = $SABUN$ AND LSDAT=$OLD_LSDAT$
	</select>
	<insert id="insertHMDZ190" parameterClass="java.util.HashMap" >
		INSERT INTO $LIB3$.HMD190PF (SABUN, LSDAT, LLDAT, LDTCD, LDPOT, LDBCD, LEDAT, LBIGO)
		VALUES ($SABUN$, $LSDAT$, $LLDAT$, $LDTCD$, $LDPOT$, #LDBCD#, 0, #LBIGO#)
	</insert>
	<update id="updateHMDZ190" parameterClass="java.util.HashMap" >
		UPDATE $LIB3$.HMD190PF
		SET
			LLDAT=$LLDAT$,
			LDTCD=$LDTCD$,
			LDPOT=$LDPOT$,
			LDBCD=#LDBCD#,
			LBIGO=#LBIGO#
		WHERE
			SABUN = $SABUN$ AND LSDAT=$OLD_LSDAT$
	</update>
	<delete id="deleteHMDZ190" parameterClass="java.util.HashMap" >
		DELETE FROM $LIB3$.HMD190PF
			WHERE	SABUN = $SABUN$ AND LSDAT=$OLD_LSDAT$
	</delete>
	<select id="selectHMDZ280" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			DIGITS(A.SABUN) AS SABUN, A.ACCYY, A.ACCCD, A.ACDAT, A.ESDAT, A.EEDAT, TRIM(A.REMAK) AS REMAK,
			A.INPDT, A.INPTM, A.CHGDT, A.CHGTM,
			TRIM(B.KORNM) AS KORNM,
			C.DPSQNO, B.DPTCD, TRIM(C.DPCONM) AS DPCONM, TRIM(C.DPDPNM) AS DPDPNM
		FROM
			$LIB3$.HMD280PF A
			LEFT OUTER JOIN $LIB3$.HMD020PF B ON A.SABUN=B.SABUN
			LEFT OUTER JOIN $LIB2$.MST650PF C ON B.DPTCD=C.DPCODE AND C.DPCOMP=#COMPS#
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="SABUN">
				A.SABUN =  $SABUN$
			</isNotEmpty>
			<isEqual prepend="AND" property="CNDCD" compareValue="0">
				B.CNDCD != 'R'
			</isEqual>
		</dynamic>
		ORDER BY C.DPSQNO, B.DPTCD, SABUN, A.ACCYY
	</select>
			
	<select id="selectHMDZ280_Check" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			COUNT(*) CNT 
		FROM
			$LIB3$.HMD280PF
		WHERE 
			SABUN = $SABUN$ AND ACCYY=$OLD_ACCYY$ AND ACCCD=$OLD_ACCCD$ AND ACDAT=$OLD_ACDAT$
	</select>
	<insert id="insertHMDZ280" parameterClass="java.util.HashMap" >
		INSERT INTO $LIB3$.HMD280PF (SABUN, ACCYY ,ACCCD, ACDAT, ESDAT, EEDAT, REMAK, INPDT, INPTM, CHGDT, CHGTM)
		VALUES ($SABUN$, $ACCYY$, #ACCCD#, $ACDAT$, $ESDAT$, $EEDAT$, #REMAK#,
				REPLACE(CHAR(DATE(current date), ISO), '-', ''), REPLACE(CHAR(time(current time), ISO), '.', ''),
				REPLACE(CHAR(DATE(current date), ISO), '-', ''), REPLACE(CHAR(time(current time), ISO), '.', ''))
	</insert>
	<update id="updateHMDZ280" parameterClass="java.util.HashMap" >
		UPDATE $LIB3$.HMD280PF
		SET
			ACCYY=$ACCYY$,
			ACCCD=#ACCCD#,
			ACDAT=$ACDAT$,
			ESDAT=$ESDAT$,
			EEDAT=$EEDAT$,
			REMAK=#REMAK#,
			CHGDT= REPLACE(CHAR(DATE(current date), ISO), '-', ''),
			CHGTM= REPLACE(CHAR(time(current time), ISO), '.', '')
		WHERE
			SABUN = $SABUN$ AND ACCYY=$OLD_ACCYY$ AND ACCCD=$OLD_ACCCD$ AND ACDAT=$OLD_ACDAT$
	</update>
	<delete id="deleteHMDZ280" parameterClass="java.util.HashMap" >
		DELETE FROM $LIB3$.HMD280PF
			WHERE SABUN = $SABUN$ AND ACCYY=$OLD_ACCYY$ AND ACCCD=$OLD_ACCCD$ AND ACDAT=$OLD_ACDAT$
	</delete>
	<select id="selectHMDZ290" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			DIGITS(A.SABUN) AS SABUN, A.CFDAT, A.ESDAT, A.EEDAT, TRIM(A.LOCAT) AS LOCAT, TRIM(A.REMAK) AS REMAK,
			A.INPDT, A.INPTM, A.CHGDT, A.CHGTM,
			TRIM(B.KORNM) AS KORNM,
			C.DPSQNO, B.DPTCD, TRIM(C.DPCONM) AS DPCONM, TRIM(C.DPDPNM) AS DPDPNM
		FROM
			$LIB3$.HMD290PF A
			LEFT OUTER JOIN $LIB3$.HMD020PF B ON A.SABUN=B.SABUN
			LEFT OUTER JOIN $LIB2$.MST650PF C ON B.DPTCD=C.DPCODE AND C.DPCOMP=#COMPS#
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="SABUN">
				A.SABUN =  $SABUN$
			</isNotEmpty>
			<isEqual prepend="AND" property="CNDCD" compareValue="0">
				B.CNDCD != 'R'
			</isEqual>
		</dynamic>
		ORDER BY C.DPSQNO, B.DPTCD, SABUN, A.CFDAT
	</select>
	<select id="selectHMDZ290_Check" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			COUNT(*) CNT 
		FROM
			$LIB3$.HMD290PF
		WHERE 
			SABUN = $SABUN$ AND CFDAT=$OLD_CFDAT$ AND ESDAT=$OLD_ESDAT$ AND EEDAT=$OLD_EEDAT$
	</select>
	<insert id="insertHMDZ290" parameterClass="java.util.HashMap" >
		INSERT INTO $LIB3$.HMD290PF (SABUN, CFDAT, ESDAT, EEDAT, LOCAT, REMAK, INPDT, INPTM, CHGDT, CHGTM)
		VALUES ($SABUN$, $CFDAT$, $ESDAT$, $EEDAT$, #LOCAT#, #REMAK#,
				REPLACE(CHAR(DATE(current date), ISO), '-', ''), REPLACE(CHAR(time(current time), ISO), '.', ''),
				REPLACE(CHAR(DATE(current date), ISO), '-', ''), REPLACE(CHAR(time(current time), ISO), '.', ''))
	</insert>
	<update id="updateHMDZ290" parameterClass="java.util.HashMap" >
		UPDATE $LIB3$.HMD290PF
		SET
			CFDAT=$CFDAT$,
			ESDAT=$ESDAT$,
			EEDAT=$EEDAT$,
			LOCAT=#LOCAT#,
			REMAK=#REMAK#,
			CHGDT= REPLACE(CHAR(DATE(current date), ISO), '-', ''),
			CHGTM= REPLACE(CHAR(time(current time), ISO), '.', '')
		WHERE
			SABUN = $SABUN$ AND CFDAT=$OLD_CFDAT$ AND ESDAT=$OLD_ESDAT$ AND EEDAT=$OLD_EEDAT$
	</update>
	<delete id="deleteHMDZ290" parameterClass="java.util.HashMap" >
		DELETE FROM $LIB3$.HMD290PF
			WHERE SABUN = $SABUN$ AND CFDAT=$OLD_CFDAT$ AND ESDAT=$OLD_ESDAT$ AND EEDAT=$OLD_EEDAT$
	</delete>
	<select id="selectHMDZ300" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		B.DPSQNO, A.DPTCD, TRIM(B.DPCONM) AS DPCONM, TRIM(B.DPDPNM) AS DPDPNM, 
		CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
			ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,
		TRIM(A.KORNM) AS KORNM, TRIM(A.CHRNM) AS CHRNM, TRIM(C.ENGNM) AS ENGNM, TRIM(C.EMAIL) AS EMAIL
	FROM
		$LIB3$.HMD020PF A
		LEFT OUTER JOIN $LIB2$.MST650PF B ON A.DPTCD=B.DPCODE AND B.DPCOMP=#COMPS#
		LEFT OUTER JOIN $LIB3$.HMD300PF C ON A.SABUN=C.SABUN
	<dynamic prepend="WHERE">
		<isEqual prepend="AND" property="CNDCD" compareValue="0">
			A.CNDCD != 'R'
		</isEqual>
		<isNotEmpty prepend="AND" property="SABUN">
			A.SABUN =  $SABUN$
		</isNotEmpty>
	</dynamic>
	ORDER BY B.DPSQNO, A.DPTCD, A.GRADE, A.GNDAT, SABUN
	</select>
	<select id="selectHMDZ300_Check" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			COUNT(*) CNT 
		FROM
			$LIB3$.HMD300PF
		WHERE 
			SABUN = $SABUN$
	</select>
	<insert id="insertHMDZ300" parameterClass="java.util.HashMap" >
		INSERT INTO $LIB3$.HMD300PF (SABUN, ENGNM, EMAIL, INPDT, INPTM, CHGDT, CHGTM)
		VALUES ($SABUN$, #ENGNM#, #EMAIL#,
				REPLACE(CHAR(DATE(current date), ISO), '-', ''), REPLACE(CHAR(time(current time), ISO), '.', ''),
				REPLACE(CHAR(DATE(current date), ISO), '-', ''), REPLACE(CHAR(time(current time), ISO), '.', ''))
	</insert>
	<update id="updateHMDZ300" parameterClass="java.util.HashMap" >
		UPDATE $LIB3$.HMD300PF
		SET
			ENGNM=#ENGNM#,
			EMAIL=#EMAIL#,
			CHGDT = REPLACE(CHAR(DATE(current date), ISO), '-', ''),
			CHGTM= REPLACE(CHAR(time(current time), ISO), '.', '')
		WHERE
			SABUN = $SABUN$
	</update>
	<select id="selectHMDZ310Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		B.DPSQNO, A.DPTCD, TRIM(B.DPCONM) AS DPCONM, TRIM(B.DPDPNM) AS DPDPNM, 
		CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
			ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,
		TRIM(A.KORNM) AS KORNM, TRIM(A.SIKCM) AS SIKCM, A.SEXCD, A.PAYCD, A.YNBCD,
		CASE WHEN TRIM(A.SIKCM)='1' THEN 1 ELSE 0 END AS SIKCM1,
		CASE WHEN TRIM(A.SIKCM)='2' THEN 1 ELSE 0 END AS SIKCM2
	FROM
		$LIB3$.HMD020PF A
		LEFT OUTER JOIN $LIB2$.MST650PF B ON A.DPTCD=B.DPCODE AND B.DPCOMP=#COMPS#
	<dynamic prepend="WHERE">
		<isEqual prepend="AND" property="CNDCD" compareValue="0">
			A.CNDCD != 'R'
		</isEqual>
		<isNotEmpty prepend="AND" property="SABUN">
			A.SABUN =  $SABUN$
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="SIKCM">
			A.SIKCM =  #SIKCM#
		</isNotEmpty>
	</dynamic>
	ORDER BY B.DPSQNO, A.DPTCD, A.GRADE, A.GNDAT, SABUN
	</select>	
	<select id="selectHARZ203Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
<!-- 
	SELECT
		B.DPSQNO, A.DPTCD, TRIM(B.DPCONM) AS DPCONM, TRIM(B.DPDPNM) AS DPDPNM, 
		CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
			ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,
		TRIM(A.KORNM) AS KORNM, 
		A.CNDCD, A.GNDAT, A.ENDAT, A.PEDTB,
		C.OUPAY, C.MGYAM, C.R3301, C.R3303, C.R4400,
		C.CDSEQ, C.CEDCD,			
		C.R0901, C.R0902, C.R0911, C.R0912
	FROM
		$LIB3$.HMD020PF A
		LEFT OUTER JOIN $LIB2$.MST650PF B ON A.DPTCD=B.DPCODE AND B.DPCOMP=#COMPS#
		LEFT OUTER JOIN $LIB3$.HAR200PF C ON A.SABUN=C.SABUN
	<dynamic prepend="WHERE">
		<isEqual prepend="AND" property="CNDCD" compareValue="0">
			A.CNDCD != 'R'
		</isEqual>
		<isNotEmpty prepend="AND" property="SABUN">
			A.SABUN =  $SABUN$
		</isNotEmpty>
	</dynamic>
 -->	
	SELECT
		C.DPSQNO, B.DPTCD, TRIM(C.DPCONM) AS DPCONM, TRIM(C.DPDPNM) AS DPDPNM, 
		CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
			ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,
		TRIM(B.KORNM) AS KORNM, 
		B.CNDCD, B.GNDAT, B.ENDAT, B.PEDTB,
		A.OUPAY, A.MGYAM, A.R3301, A.R3303, A.R4400,
		A.CDSEQ, A.CEDCD,
		A.R0901, A.R0902, A.R0911, A.R0912
	FROM
		$LIB3$.HAR200PF A, $LIB3$.HMD020PF B 
		LEFT OUTER JOIN $LIB2$.MST650PF C ON B.DPTCD=C.DPCODE AND C.DPCOMP=#COMPS#
	WHERE
		A.SABUN = B.SABUN
		<isEqual prepend="AND" property="CNDCD" compareValue="0">
			B.CNDCD != 'R'
		</isEqual>
		<isNotEmpty prepend="AND" property="SABUN">
			A.SABUN =  $SABUN$
		</isNotEmpty>
	<isEqual property="COMPS" compareValue="E1">	
	ORDER BY B.DPTCD, B.GRADE, B.GNDAT, A.SABUN, A.CDSEQ
	</isEqual>
	<isNotEqual property="COMPS" compareValue="E1">
	ORDER BY C.DPSQNO, B.DPTCD, B.GRADE, B.GNDAT, A.SABUN, A.CDSEQ
	</isNotEqual>				
	</select>	
	<select id="selectHMDZ014Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		'$COMPS$' AS COMPS,
		C.DPSQNO, A.DPTCD, TRIM(C.DPDPNM) AS DPDPNM,
		CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
		ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,
		TRIM(A.KORNM) AS KORNM, TRIM(COALESCE(B.PCONT,' ')) AS GRANM,
		A.GRADE, A.HOBON, 
		A.SEXCD, A.PAYCD, A.YNBCD, A.GRADE, A.GNDAT, A.BIDAT, A.PASSA,
		CASE WHEN A.PAYCD= 1 THEN '관리직' WHEN A.PAYCD= 2 THEN '직장'
			 WHEN A.PAYCD= 3 THEN '반장' WHEN A.PAYCD= 4 THEN '노동조합'
			 WHEN A.PAYCD= 9 THEN '기능직' ELSE '' END AS PAYNM,
		CASE WHEN A.YNBCD='1' THEN '연봉자' ELSE '월급자' END AS YNBNM,			
		A.GNDAT, A.ENDAT, A.CNDAT, A.PEDTB,
		A.KIBON, A.JKSUD, A.TESUD, A.QLSUD, A.BJSUD, A.GSSUD, A.WHSUD, A.CJSUD, A.JMSUD, A.WFSUD,
		A.YHSUD, A.DOSUD, A.GTSUD, A.HASUD, A.TQSUD, A.OTSUD, A.FILL1, A.FILL2, A.FILL3,
		A.GYBON, A.CYBON, A.YENBO, A.YKRTE, A.MKBON, A.LABOM,
		A.KIBON+A.JKSUD+A.TESUD+A.QLSUD+A.BJSUD+A.GSSUD+A.WHSUD+A.CJSUD+A.JMSUD+A.WFSUD+
		A.YHSUD+A.DOSUD+A.GTSUD+A.HASUD+A.TQSUD+A.FILL1+A.FILL2 AS TOT_SUD,
		A.KIBON+A.JKSUD+A.TESUD+A.QLSUD+A.BJSUD+A.GSSUD+A.WHSUD+A.CJSUD+A.JMSUD+A.WFSUD+
		A.YHSUD+A.DOSUD+A.GTSUD+A.HASUD+A.TQSUD+A.FILL1+A.FILL2+A.OTSUD+A.FILL3 AS TOT_SUB,
		(A.KIBON/240)+
		(((A.KIBON+A.JKSUD+A.TESUD+A.QLSUD+A.BJSUD+A.GSSUD+A.WHSUD+A.CJSUD+A.JMSUD+A.WFSUD+
		 A.YHSUD+A.DOSUD+A.GTSUD+A.HASUD+A.TQSUD+A.FILL1+A.FILL2)-A.KIBON)/226) AS AVG
	FROM
		$LIB4$.$TABLE$ A
		LEFT OUTER JOIN $LIB3$.HUM010PF B ON 'ODCD' || A.GRADE = B.PCODE
		LEFT OUTER JOIN $LIB2$.MST650PF C ON A.DPTCD = C.DPCODE AND C.DPCOMP = #COMPS#
	<dynamic prepend="WHERE">
		<isEqual prepend="AND" property="CNDCD" compareValue="0">
			A.CNDCD != 'R'
		</isEqual>
		<isEqual prepend="AND" property="CNDCD" compareValue="1">
			A.CNDCD != 'R' OR A.CNDAT >=$CNDAT$
		</isEqual>
		<isNotEmpty prepend="AND" property="YNBCD">
			A.YNBCD =  #YNBCD#
		</isNotEmpty>
	</dynamic>
	<isEqual property="COMPS" compareValue="E1">	
	ORDER BY COMPS, A.DPTCD, A.GRADE, A.GNDAT, A.SABUN
	</isEqual>
	<isNotEqual property="COMPS" compareValue="E1">
	ORDER BY COMPS, C.DPSQNO, A.DPTCD, A.GRADE, A.GNDAT, A.SABUN
	</isNotEqual>
	</select>
	<select id="selectHPCZ030Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT
		A.DONHO, TRIM(D.PCONT) AS DONGM,
		CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
			ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,
		TRIM(B.KORNM) AS KORNM,
		TRIM(C.DPDPNM) AS DPDPNM, COALESCE(A.JICNM,' ') AS JICNM,
		A.GADAT, A.TADAT, A.DOAMT, A.DMEMO, B.GNDAT, B.GRADE,
		TRIM(COALESCE(E.PCONT,' ')) AS GRADENM
	FROM
		$LIB3$.HPC030PF A, $LIB3$.HMD020PF B, $LIB2$.MST650PF C
		LEFT OUTER JOIN $LIB3$.HUM010PF D ON 'DOC'||A.DONHO = D.PCODE
		LEFT OUTER JOIN $LIB3$.HUM010PF E ON 'ODCD' || B.GRADE = E.PCODE
	WHERE
		A.SABUN = B.SABUN
		AND B.DPTCD = C.DPCODE
		AND C.DPCOMP = #COMPS#
		<isNotEmpty prepend="AND" property="SABUN">
			A.SABUN =  $SABUN$
		</isNotEmpty>
	ORDER BY A.DONHO, B.GNDAT, A.SABUN, JICNM
	</select>
	<select id="selectHAYZ009Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			A.DPTCD, TRIM(B.DPDPNM) AS DPDPNM, A.SABUN, TRIM(A.KORNM) AS KORNM,
			SUBSTR(A.PASSA,3,6)||'-'||A.PASSB || REPEAT('0', 6-length(trim(char(A.PASSC)))) || A.PASSC AS JUMIN,
			A.GNDAT, A.ENDAT, A.CNDAT, A.PAYCD, A.SEXCD, TRIM(A.CUADR) AS CUADR, B.DPSQNO
		FROM
			$LIB3$.HMD020PF A
			LEFT OUTER JOIN $LIB2$.MST650PF B ON A.DPTCD=B.DPCODE AND B.DPCOMP=#COMPS#
		WHERE
			A.CNDCD !='R'
			OR (SUBSTR(A.CNDAT,1,4) = $CNDAT$)
		<isEqual property="COMPS" compareValue="E1">	
		ORDER BY A.DPTCD, A.SABUN
		</isEqual>
		<isNotEqual property="COMPS" compareValue="E1">
		ORDER BY B.DPSQNO, A.SABUN
		</isNotEqual>	
	</select>
	<select id="selectHBSZ051UC_HBS071" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	 	SELECT * FROM $LIB3$.HBS071PF	
	</select>
	<delete id="deleteHBSZ051UC_HZM100PF" parameterClass="java.util.HashMap" >
		DELETE FROM $LIB3$.HZM100PF
	</delete >
	<delete id="deleteHBSZ051UC_HZM101PF" parameterClass="java.util.HashMap" >
		DELETE FROM $LIB3$.HZM101PF
	</delete >
	<delete id="deleteHBSZ051UC_HBS051PF" parameterClass="java.util.HashMap" >
		DELETE FROM $LIB3$.HBS051PF
	</delete >	
	<insert id="insertHBSZ051UC_HBS051PF" parameterClass="java.util.HashMap" >
		<!-- INSERT INTO $LIB3$.HBS051PF (SABUN, PTYPE, SCODE, SPEMT, SPEMR, SPE01, SPDAT, DPSQN) -->
		INSERT INTO $LIB3$.HBS051PF (SABUN, PTYPE, SCODE, SPEMT, SPDAT, DPSQN)
		VALUES ($SABUN$, #PTYPE#, $SCODE$, #SPEMN#, $SPDAT$,
				(SELECT DPSQNO FROM $LIB3$.MST650PF WHERE DPCOMP=#COMPS# AND DPCODE=#DPCODE_S#))
	</insert>
	<insert id="insertHBSZ051UC_HZM101PF" parameterClass="java.util.HashMap" >
		INSERT INTO $LIB3$.HZM101PF
			(ZYYYM, SABUN, TYPEP,GNDAT, ENDAT, FORCD, PAYCD, TAXCD, YNBCD, GRADE, HOBON,
				GUNHO, WFBCD, KYBCD, CHBCD, PTBCD, TRBCD, PMWCD, BUBCD, SOSCD, BYFL1, BYFL2, SPEMN)
		(SELECT $PTJYM$, A.SABUN, A.PTYPE, B.GNDAT, B.ENDAT, B.FORCD, B.PAYCD, B.TAXCD, B.YNBCD, B.GRADE, B.HOBON,
				B.GUNHO, B.WFBCD, B.KYBCD, B.CHBCD, B.PTBCD, B.TRBCD, B.PMWCD, B.BUBCD, B.SOSCD, B.BYFL1, B.BYFL2, A.SPEMT
		 FROM $LIB3$.HBS051PF A
		 LEFT OUTER JOIN $LIB3$.HMD020PF B ON A.SABUN=B.SABUN)
	</insert>
	<select id="selectHBSZ051C_CHK" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	<!-- 
		SELECT 
			COUNT(*) CNT 
		FROM
			$LIB3$.HBS051PF
	 -->
	 	SELECT 
			PTYPE, SCODE, SPDAT
		FROM
			$LIB3$.HBS051PF	
		GROUP BY PTYPE, SCODE, SPDAT
	</select>
	
	<select id="selectHWBZ200Q" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	<!-- 근태자료-근무시간  -->
	SELECT
		B.DPSQNO, A.DPTCD, TRIM(B.DPCONM) AS DPCONM, TRIM(B.DPDPNM) AS DPDPNM, A.GRADE, A.GNDAT,
		CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
			ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,
		A.PAYCD, 
		CASE WHEN A.PAYCD= 1 THEN '관리직' WHEN A.PAYCD= 2 THEN '직장'
			 WHEN A.PAYCD= 3 THEN '반장' WHEN A.PAYCD= 4 THEN '노동조합'
			 WHEN A.PAYCD= 9 THEN '기능직' ELSE '' END AS PAYNM,
		A.YNBCD,
		CASE WHEN A.YNBCD='1' THEN '연봉자' ELSE '월급자' END AS YNBNM,
		TRIM(A.KORNM) AS KORNM,'K99ILH' AS GUB,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='01' THEN K99ILH END) AS DAY01,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='02' THEN K99ILH END) AS DAY02,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='03' THEN K99ILH END) AS DAY03,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='04' THEN K99ILH END) AS DAY04,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='05' THEN K99ILH END) AS DAY05,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='06' THEN K99ILH END) AS DAY06,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='07' THEN K99ILH END) AS DAY07,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='08' THEN K99ILH END) AS DAY08,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='09' THEN K99ILH END) AS DAY09,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='10' THEN K99ILH END) AS DAY10,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='11' THEN K99ILH END) AS DAY11,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='12' THEN K99ILH END) AS DAY12,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='13' THEN K99ILH END) AS DAY13,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='14' THEN K99ILH END) AS DAY14,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='15' THEN K99ILH END) AS DAY15,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='16' THEN K99ILH END) AS DAY16,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='17' THEN K99ILH END) AS DAY17,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='18' THEN K99ILH END) AS DAY18,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='19' THEN K99ILH END) AS DAY19,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='20' THEN K99ILH END) AS DAY20,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='21' THEN K99ILH END) AS DAY21,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='22' THEN K99ILH END) AS DAY22,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='23' THEN K99ILH END) AS DAY23,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='24' THEN K99ILH END) AS DAY24,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='25' THEN K99ILH END) AS DAY25,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='26' THEN K99ILH END) AS DAY26,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='27' THEN K99ILH END) AS DAY27,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='28' THEN K99ILH END) AS DAY28,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='29' THEN K99ILH END) AS DAY29,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='30' THEN K99ILH END) AS DAY30,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='31' THEN K99ILH END) AS DAY31
	FROM
		$LIB3$.HMD020PF A, $LIB2$.MST650PF B, $LIB3$.HWB200PF C
	WHERE
		A.SABUN=C.SABUN AND A.DPTCD=B.DPCODE AND B.DPCOMP=#COMPS# AND SUBSTR(C.SEDAT,1,6)= $KNYYM$
		<isNotEqual property="YNBCD" compareValue="0">
			<isEqual prepend="AND" property="YNBCD" compareValue="1">
			A.YNBCD = 1
			</isEqual>
			<isEqual prepend="AND" property="YNBCD" compareValue="2">
			A.YNBCD != 1
			</isEqual>
		</isNotEqual>
	GROUP BY A.PAYCD, A.YNBCD, B.DPSQNO, A.DPTCD, B.DPCONM, B.DPDPNM, A.GRADE, A.GNDAT, A.SABUN, A.KORNM
	
	<!-- 근태자료-사고일수 -->
	UNION ALL
	SELECT
		B.DPSQNO, A.DPTCD, TRIM(B.DPCONM) AS DPCONM, TRIM(B.DPDPNM) AS DPDPNM, A.GRADE, A.GNDAT,
		CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
			ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,
		A.PAYCD, 
		CASE WHEN A.PAYCD= 1 THEN '관리직' WHEN A.PAYCD= 2 THEN '직장'
			 WHEN A.PAYCD= 3 THEN '반장' WHEN A.PAYCD= 4 THEN '노동조합'
			 WHEN A.PAYCD= 9 THEN '기능직' ELSE '' END AS PAYNM,
		A.YNBCD,
		CASE WHEN A.YNBCD='1' THEN '연봉자' ELSE '월급자' END AS YNBNM,
		TRIM(A.KORNM) AS KORNM,'K60CDH' AS GUB,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='01' THEN K60CDH END) AS DAY01,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='02' THEN K60CDH END) AS DAY02,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='03' THEN K60CDH END) AS DAY03,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='04' THEN K60CDH END) AS DAY04,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='05' THEN K60CDH END) AS DAY05,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='06' THEN K60CDH END) AS DAY06,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='07' THEN K60CDH END) AS DAY07,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='08' THEN K60CDH END) AS DAY08,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='09' THEN K60CDH END) AS DAY09,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='10' THEN K60CDH END) AS DAY10,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='11' THEN K60CDH END) AS DAY11,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='12' THEN K60CDH END) AS DAY12,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='13' THEN K60CDH END) AS DAY13,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='14' THEN K60CDH END) AS DAY14,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='15' THEN K60CDH END) AS DAY15,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='16' THEN K60CDH END) AS DAY16,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='17' THEN K60CDH END) AS DAY17,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='18' THEN K60CDH END) AS DAY18,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='19' THEN K60CDH END) AS DAY19,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='20' THEN K60CDH END) AS DAY20,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='21' THEN K60CDH END) AS DAY21,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='22' THEN K60CDH END) AS DAY22,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='23' THEN K60CDH END) AS DAY23,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='24' THEN K60CDH END) AS DAY24,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='25' THEN K60CDH END) AS DAY25,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='26' THEN K60CDH END) AS DAY26,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='27' THEN K60CDH END) AS DAY27,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='28' THEN K60CDH END) AS DAY28,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='29' THEN K60CDH END) AS DAY29,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='30' THEN K60CDH END) AS DAY30,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='31' THEN K60CDH END) AS DAY31
	FROM
		$LIB3$.HMD020PF A, $LIB2$.MST650PF B, $LIB3$.HWB200PF C
	WHERE
		A.SABUN=C.SABUN AND A.DPTCD=B.DPCODE AND B.DPCOMP=#COMPS# AND SUBSTR(C.SEDAT,1,6)= $KNYYM$
		<isNotEqual property="YNBCD" compareValue="0">
			<isEqual prepend="AND" property="YNBCD" compareValue="1">
			A.YNBCD = 1
			</isEqual>
			<isEqual prepend="AND" property="YNBCD" compareValue="2">
			A.YNBCD != 1
			</isEqual>
		</isNotEqual>
	GROUP BY A.PAYCD, A.YNBCD, B.DPSQNO, A.DPTCD, B.DPCONM, B.DPDPNM, A.GRADE, A.GNDAT, A.SABUN, A.KORNM
	
	<!-- 근태자료-연장시간 -->
	UNION ALL
	SELECT
		B.DPSQNO, A.DPTCD, TRIM(B.DPCONM) AS DPCONM, TRIM(B.DPDPNM) AS DPDPNM, A.GRADE, A.GNDAT,
		CASE WHEN 'E1'='$COMPS$' THEN REPEAT('0', 6-length(trim(char(A.SABUN)))) || A.SABUN
			ELSE REPEAT('0', 7-length(trim(char(A.SABUN)))) || A.SABUN END SABUN,
		A.PAYCD, 
		CASE WHEN A.PAYCD= 1 THEN '관리직' WHEN A.PAYCD= 2 THEN '직장'
			 WHEN A.PAYCD= 3 THEN '반장' WHEN A.PAYCD= 4 THEN '노동조합'
			 WHEN A.PAYCD= 9 THEN '기능직' ELSE '' END AS PAYNM,
		A.YNBCD,
		CASE WHEN A.YNBCD='1' THEN '연봉자' ELSE '월급자' END AS YNBNM,
		TRIM(A.KORNM) AS KORNM,'K21ILH' AS GUB,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='01' THEN K21ILH END) AS DAY01,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='02' THEN K21ILH END) AS DAY02,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='03' THEN K21ILH END) AS DAY03,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='04' THEN K21ILH END) AS DAY04,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='05' THEN K21ILH END) AS DAY05,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='06' THEN K21ILH END) AS DAY06,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='07' THEN K21ILH END) AS DAY07,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='08' THEN K21ILH END) AS DAY08,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='09' THEN K21ILH END) AS DAY09,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='10' THEN K21ILH END) AS DAY10,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='11' THEN K21ILH END) AS DAY11,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='12' THEN K21ILH END) AS DAY12,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='13' THEN K21ILH END) AS DAY13,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='14' THEN K21ILH END) AS DAY14,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='15' THEN K21ILH END) AS DAY15,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='16' THEN K21ILH END) AS DAY16,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='17' THEN K21ILH END) AS DAY17,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='18' THEN K21ILH END) AS DAY18,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='19' THEN K21ILH END) AS DAY19,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='20' THEN K21ILH END) AS DAY20,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='21' THEN K21ILH END) AS DAY21,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='22' THEN K21ILH END) AS DAY22,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='23' THEN K21ILH END) AS DAY23,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='24' THEN K21ILH END) AS DAY24,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='25' THEN K21ILH END) AS DAY25,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='26' THEN K21ILH END) AS DAY26,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='27' THEN K21ILH END) AS DAY27,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='28' THEN K21ILH END) AS DAY28,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='29' THEN K21ILH END) AS DAY29,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='30' THEN K21ILH END) AS DAY30,
		SUM(CASE WHEN SUBSTR(C.SEDAT,7,2)='31' THEN K21ILH END) AS DAY31
	FROM
		$LIB3$.HMD020PF A, $LIB2$.MST650PF B, $LIB3$.HWB200PF C
	WHERE
		A.SABUN=C.SABUN AND A.DPTCD=B.DPCODE AND B.DPCOMP=#COMPS# AND SUBSTR(C.SEDAT,1,6)= $KNYYM$
		<isNotEqual property="YNBCD" compareValue="0">
			<isEqual prepend="AND" property="YNBCD" compareValue="1">
			A.YNBCD = 1
			</isEqual>
			<isEqual prepend="AND" property="YNBCD" compareValue="2">
			A.YNBCD != 1
			</isEqual>
		</isNotEqual>
	GROUP BY A.PAYCD, A.YNBCD, B.DPSQNO, A.DPTCD, B.DPCONM, B.DPDPNM, A.GRADE, A.GNDAT, A.SABUN, A.KORNM

	ORDER BY PAYCD, YNBCD, DPSQNO, DPTCD, DPCONM, DPDPNM, GRADE, GNDAT, SABUN, KORNM

	</select>	
	
<!-- MSSQL  -->
<!-- 
	<select id="selectGATE02" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	select
		z.emp_no, z.cardno, z.attendcate,
		z.regdt, z.regtm, z.reader, z.empGu
	from
	(
		select
			a.emp_no, a.cardno, a.attendcate,
			convert(char(8),a.regdate,112) as regdt,
			convert(char(8),a.regdate,114) as regtm, a.reader, substring(a.emp_no,1,1) as empGu
		from dbo.tbl_attendhist a 
		where convert(char(10),a.regdate,120)= '2017-10-26'
		and a.attendcate = '1'
		<isEqual property="COMPS" compareValue="C1">
		and a.reader <![CDATA[<]]> '013'
		</isEqual>
		and convert(char(8),a.regdate,114) = (select min(convert(char(8),b.regdate,114))
		                                    from  dbo.tbl_attendhist b
		                                   Where a.emp_no = b.emp_no
		                                   and b.attendcate = '1'
											<isEqual property="COMPS" compareValue="C1">
		                                   and b.reader <![CDATA[<]]> '013'
											</isEqual>
		                                   and convert(char(10),b.regdate,120)= '2017-10-26'
		)
		union all
		select
			a.emp_no, a.cardno, a.attendcate,
			convert(char(8),a.regdate,112) as regdt,
			convert(char(8),a.regdate,114) as regtm, a.reader, substring(a.emp_no,1,1) as empGu
		from dbo.tbl_attendhist a
		where convert(char(10),a.regdate,120)= '2017-10-26'
		and a.attendcate = '2'
		<isEqual property="COMPS" compareValue="C1">
		and a.reader <![CDATA[<]]> '013'
		</isEqual>
		and convert(char(8),a.regdate,114) = (select max(convert(char(8),b.regdate,114))
		                                    from  dbo.tbl_attendhist b
		                                   Where a.emp_no = b.emp_no
		                                   and b.attendcate = '2'
											<isEqual property="COMPS" compareValue="C1">
		                                   and b.reader <![CDATA[<]]> '013'
											</isEqual>
		                                   and convert(char(10),b.regdate,120)= '2017-10-26'
		)
	) z
	order by z.emp_no, z.attendcate, z.regtm
	</select>
-->	
<!-- MYSQL  -->	
	<select id="selectGATE02" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	select
		z.emp_no, z.cardno, z.attendcate,
		replace(z.regdt,'-','') regdt,
		replace(z.regtm,':','') regtm,
		z.reader, z.empGu
	from
	(
		select
			a.emp_no, a.cardno, a.attendcate,
			cast(DATE(a.regdate) as CHAR) as regdt,
			cast(TIME(a.regdate) as CHAR) as regtm, a.reader, substring(a.emp_no,1,1) as empGu
		from tblattendhist a
		where
			DATE(a.regdate)=#ACKTIME#
			and a.attendcate = '1'
			<isEqual property="COMPS" compareValue="C1">
				and a.reader <![CDATA[<]]> '013'
			</isEqual>
			and cast(TIME(a.regdate) as CHAR) = 
			(select z.mtm from
				(select min(cast(TIME(b.regdate) as CHAR)) as mtm, b.Emp_no
				from tblattendhist b
				Where b.attendcate = '1'
				<isEqual property="COMPS" compareValue="C1">
					and b.reader <![CDATA[<]]> '013'
				</isEqual>
					and DATE(b.regdate)=#ACKTIME#
				group by b.Emp_no
				)z where z.emp_no=a.emp_no
			)
		union all
		select
			<!-- 2019.04.30 구KA 퇴근 근태코드 강제수정 (2→4)
			a.emp_no, a.cardno, a.attendcate,
			 -->
			a.emp_no, a.cardno,
			CASE WHEN a.attendcate ='2' THEN '4' ELSE  a.attendcate END AS attendcate,
			cast(DATE(a.regdate) as CHAR) as regdt,
			cast(TIME(a.regdate) as CHAR) as regtm, a.reader, substring(a.emp_no,1,1) as empGu
		from tblattendhist a
		where
			DATE(a.regdate)=#ACKTIME#
			and a.attendcate = '2'
			<isEqual property="COMPS" compareValue="C1">
				and a.reader <![CDATA[<]]> '013'
			</isEqual>
			and cast(TIME(a.regdate) as CHAR) =
			(select z.mxtm from
				(select max(cast(TIME(b.regdate) as CHAR)) as mxtm, b.Emp_no
				from tblattendhist b
				Where b.attendcate = '2'
				<isEqual property="COMPS" compareValue="C1">
					and b.reader <![CDATA[<]]> '013'
				</isEqual>
					and DATE(b.regdate)=#ACKTIME#
				group by b.Emp_no
			)z where z.emp_no=a.emp_no
		)
	) z
	order by z.emp_no, z.attendcate, z.regtm 	
	</select>	
</sqlMap>
